
AGV_ROBOT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  0800ece0  0800ece0  0001ece0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f620  0800f620  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f620  0800f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f628  0800f628  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f628  0800f628  0001f628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f630  0800f630  0001f630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800f634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  20000220  0800f850  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200010d0  0800f850  000210d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4b1  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eef  00000000  00000000  0003c6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0003f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  000406c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002365d  00000000  00000000  000416e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001380a  00000000  00000000  00064d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d404c  00000000  00000000  00078547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f24  00000000  00000000  0014c5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecc8 	.word	0x0800ecc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800ecc8 	.word	0x0800ecc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <DC2_thuan>:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_SET);
}

void DC2_thuan(int speed)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,speed);
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <DC2_thuan+0x30>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <DC2_thuan+0x34>)
 8001004:	f006 fac0 	bl	8007588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100e:	4804      	ldr	r0, [pc, #16]	; (8001020 <DC2_thuan+0x34>)
 8001010:	f006 faba 	bl	8007588 <HAL_GPIO_WritePin>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000fe8 	.word	0x20000fe8
 8001020:	40021000 	.word	0x40021000

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f005 fb50 	bl	80066cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f822 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 f9ec 	bl	800140c <MX_GPIO_Init>
  MX_DMA_Init();
 8001034:	f000 f9c2 	bl	80013bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001038:	f000 f96c 	bl	8001314 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800103c:	f000 f884 	bl	8001148 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001040:	f000 f92e 	bl	80012a0 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001044:	f000 f990 	bl	8001368 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001048:	2104      	movs	r1, #4
 800104a:	4808      	ldr	r0, [pc, #32]	; (800106c <main+0x48>)
 800104c:	f007 f84a 	bl	80080e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001050:	2108      	movs	r1, #8
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <main+0x48>)
 8001054:	f007 f846 	bl	80080e4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim9);
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <main+0x4c>)
 800105a:	f006 ff79 	bl	8007f50 <HAL_TIM_Base_Start_IT>
	//HAL_UART_Receive_IT(&huart3, &pData, 1);
	setup();
 800105e:	f003 fe69 	bl	8004d34 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //loop();
	  DC2_thuan(3000);
 8001062:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001066:	f7ff ffc1 	bl	8000fec <DC2_thuan>
 800106a:	e7fa      	b.n	8001062 <main+0x3e>
 800106c:	20000fe8 	.word	0x20000fe8
 8001070:	20001030 	.word	0x20001030

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f009 f99a 	bl	800a3bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <SystemClock_Config+0xcc>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a6:	6413      	str	r3, [r2, #64]	; 0x40
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <SystemClock_Config+0xcc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <SystemClock_Config+0xd0>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d8:	2310      	movs	r3, #16
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e4:	2308      	movs	r3, #8
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e8:	23a8      	movs	r3, #168	; 0xa8
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 fa91 	bl	8007620 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001104:	f000 fa50 	bl	80015a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2302      	movs	r3, #2
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001114:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800111a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800111e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2105      	movs	r1, #5
 8001126:	4618      	mov	r0, r3
 8001128:	f006 fcf2 	bl	8007b10 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001132:	f000 fa39 	bl	80015a8 <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3750      	adds	r7, #80	; 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b096      	sub	sp, #88	; 0x58
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2220      	movs	r2, #32
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f009 f91b 	bl	800a3bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001186:	4b44      	ldr	r3, [pc, #272]	; (8001298 <MX_TIM1_Init+0x150>)
 8001188:	4a44      	ldr	r2, [pc, #272]	; (800129c <MX_TIM1_Init+0x154>)
 800118a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21-1;
 800118c:	4b42      	ldr	r3, [pc, #264]	; (8001298 <MX_TIM1_Init+0x150>)
 800118e:	2214      	movs	r2, #20
 8001190:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <MX_TIM1_Init+0x150>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000-1;
 8001198:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <MX_TIM1_Init+0x150>)
 800119a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800119e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <MX_TIM1_Init+0x150>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a6:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <MX_TIM1_Init+0x150>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <MX_TIM1_Init+0x150>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b2:	4839      	ldr	r0, [pc, #228]	; (8001298 <MX_TIM1_Init+0x150>)
 80011b4:	f006 fe7c 	bl	8007eb0 <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011be:	f000 f9f3 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011cc:	4619      	mov	r1, r3
 80011ce:	4832      	ldr	r0, [pc, #200]	; (8001298 <MX_TIM1_Init+0x150>)
 80011d0:	f007 fa1a 	bl	8008608 <HAL_TIM_ConfigClockSource>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011da:	f000 f9e5 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011de:	482e      	ldr	r0, [pc, #184]	; (8001298 <MX_TIM1_Init+0x150>)
 80011e0:	f006 ff26 	bl	8008030 <HAL_TIM_PWM_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011ea:	f000 f9dd 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011fa:	4619      	mov	r1, r3
 80011fc:	4826      	ldr	r0, [pc, #152]	; (8001298 <MX_TIM1_Init+0x150>)
 80011fe:	f007 fe0d 	bl	8008e1c <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001208:	f000 f9ce 	bl	80015a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	2360      	movs	r3, #96	; 0x60
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	2204      	movs	r2, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4819      	ldr	r0, [pc, #100]	; (8001298 <MX_TIM1_Init+0x150>)
 8001232:	f007 f927 	bl	8008484 <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800123c:	f000 f9b4 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	2208      	movs	r2, #8
 8001246:	4619      	mov	r1, r3
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <MX_TIM1_Init+0x150>)
 800124a:	f007 f91b 	bl	8008484 <HAL_TIM_PWM_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001254:	f000 f9a8 	bl	80015a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800126c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001270:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM1_Init+0x150>)
 800127c:	f007 fe4a 	bl	8008f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001286:	f000 f98f 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM1_Init+0x150>)
 800128c:	f004 fcd2 	bl	8005c34 <HAL_TIM_MspPostInit>

}
 8001290:	bf00      	nop
 8001292:	3758      	adds	r7, #88	; 0x58
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000fe8 	.word	0x20000fe8
 800129c:	40010000 	.word	0x40010000

080012a0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_TIM9_Init+0x6c>)
 80012b4:	4a16      	ldr	r2, [pc, #88]	; (8001310 <MX_TIM9_Init+0x70>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400-1;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_TIM9_Init+0x6c>)
 80012ba:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80012be:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_TIM9_Init+0x6c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 250-1;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_TIM9_Init+0x6c>)
 80012c8:	22f9      	movs	r2, #249	; 0xf9
 80012ca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_TIM9_Init+0x6c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_TIM9_Init+0x6c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_TIM9_Init+0x6c>)
 80012da:	f006 fde9 	bl	8007eb0 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80012e4:	f000 f960 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ec:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_TIM9_Init+0x6c>)
 80012f4:	f007 f988 	bl	8008608 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80012fe:	f000 f953 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20001030 	.word	0x20001030
 8001310:	40014000 	.word	0x40014000

08001314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_USART2_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800134c:	f007 fe48 	bl	8008fe0 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f927 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20001078 	.word	0x20001078
 8001364:	40004400 	.word	0x40004400

08001368 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART3_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART3_UART_Init+0x4c>)
 80013a0:	f007 fe1e 	bl	8008fe0 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f8fd 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000f44 	.word	0x20000f44
 80013b8:	40004800 	.word	0x40004800

080013bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_DMA_Init+0x4c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <MX_DMA_Init+0x4c>)
 80013cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_DMA_Init+0x4c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2010      	movs	r0, #16
 80013e4:	f005 fae3 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013e8:	2010      	movs	r0, #16
 80013ea:	f005 fafc 	bl	80069e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2011      	movs	r0, #17
 80013f4:	f005 fadb 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013f8:	2011      	movs	r0, #17
 80013fa:	f005 faf4 	bl	80069e6 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a5b      	ldr	r2, [pc, #364]	; (8001598 <MX_GPIO_Init+0x18c>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b59      	ldr	r3, [pc, #356]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b55      	ldr	r3, [pc, #340]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a54      	ldr	r2, [pc, #336]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b52      	ldr	r3, [pc, #328]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b4e      	ldr	r3, [pc, #312]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a4d      	ldr	r2, [pc, #308]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <MX_GPIO_Init+0x18c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <MX_GPIO_Init+0x18c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a46      	ldr	r2, [pc, #280]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <MX_GPIO_Init+0x18c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001498:	4840      	ldr	r0, [pc, #256]	; (800159c <MX_GPIO_Init+0x190>)
 800149a:	f006 f875 	bl	8007588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80014a4:	483e      	ldr	r0, [pc, #248]	; (80015a0 <MX_GPIO_Init+0x194>)
 80014a6:	f006 f86f 	bl	8007588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b0:	483c      	ldr	r0, [pc, #240]	; (80015a4 <MX_GPIO_Init+0x198>)
 80014b2:	f006 f869 	bl	8007588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80014b6:	2381      	movs	r3, #129	; 0x81
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4836      	ldr	r0, [pc, #216]	; (80015a4 <MX_GPIO_Init+0x198>)
 80014ca:	f005 fea9 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80014ce:	2342      	movs	r3, #66	; 0x42
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4830      	ldr	r0, [pc, #192]	; (80015a4 <MX_GPIO_Init+0x198>)
 80014e4:	f005 fe9c 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80014e8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4826      	ldr	r0, [pc, #152]	; (800159c <MX_GPIO_Init+0x190>)
 8001502:	f005 fe8d 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001506:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4820      	ldr	r0, [pc, #128]	; (80015a0 <MX_GPIO_Init+0x194>)
 8001520:	f005 fe7e 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4819      	ldr	r0, [pc, #100]	; (80015a4 <MX_GPIO_Init+0x198>)
 800153e:	f005 fe6f 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001542:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001548:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4810      	ldr	r0, [pc, #64]	; (800159c <MX_GPIO_Init+0x190>)
 800155a:	f005 fe61 	bl	8007220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2007      	movs	r0, #7
 8001564:	f005 fa23 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001568:	2007      	movs	r0, #7
 800156a:	f005 fa3c 	bl	80069e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2017      	movs	r0, #23
 8001574:	f005 fa1b 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001578:	2017      	movs	r0, #23
 800157a:	f005 fa34 	bl	80069e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2102      	movs	r1, #2
 8001582:	2028      	movs	r0, #40	; 0x28
 8001584:	f005 fa13 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001588:	2028      	movs	r0, #40	; 0x28
 800158a:	f005 fa2c 	bl	80069e6 <HAL_NVIC_EnableIRQ>

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40020800 	.word	0x40020800

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <Error_Handler+0x8>

080015b2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <_ZN3ros3MsgC1Ev+0x1c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	0800f0e0 	.word	0x0800f0e0

080015f4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
      data()
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ffe8 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ffcf 	bl	80015b2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	0800f0c8 	.word	0x0800f0c8

08001624 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6859      	ldr	r1, [r3, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	0a19      	lsrs	r1, r3, #8
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0c19      	lsrs	r1, r3, #16
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3302      	adds	r3, #2
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	b2ca      	uxtb	r2, r1
 8001662:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0e19      	lsrs	r1, r3, #24
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3303      	adds	r3, #3
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3304      	adds	r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	0a19      	lsrs	r1, r3, #8
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	0c19      	lsrs	r1, r3, #16
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3302      	adds	r3, #2
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	0e19      	lsrs	r1, r3, #24
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3303      	adds	r3, #3
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3304      	adds	r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80016c6:	68fb      	ldr	r3, [r7, #12]
    }
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3301      	adds	r3, #1
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	440b      	add	r3, r1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3302      	adds	r3, #2
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	440b      	add	r3, r1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3303      	adds	r3, #3
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	440b      	add	r3, r1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	061b      	lsls	r3, r3, #24
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3304      	adds	r3, #4
 8001736:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	440b      	add	r3, r1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3302      	adds	r3, #2
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	440b      	add	r3, r1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3303      	adds	r3, #3
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	440b      	add	r3, r1
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3304      	adds	r3, #4
 800178c:	60fb      	str	r3, [r7, #12]
     return offset;
 800178e:	68fb      	ldr	r3, [r7, #12]
    }
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	0800ece0 	.word	0x0800ece0

080017b8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	0800ecf0 	.word	0x0800ecf0

080017d4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fef8 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	809a      	strh	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a06      	ldr	r2, [pc, #24]	; (8001818 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
    {
    }
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800f0b0 	.word	0x0800f0b0
 8001818:	0800ed14 	.word	0x0800ed14

0800181c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	8899      	ldrh	r1, [r3, #4]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	889b      	ldrh	r3, [r3, #4]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	b299      	uxth	r1, r3
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	4413      	add	r3, r2
 8001848:	b2ca      	uxtb	r2, r1
 800184a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	3302      	adds	r3, #2
 8001850:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fcba 	bl	80001d0 <strlen>
 800185c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	4413      	add	r3, r2
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 fbb2 	bl	8004fd0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	3304      	adds	r3, #4
 8001870:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	18d0      	adds	r0, r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4619      	mov	r1, r3
 8001880:	f008 fd8e 	bl	800a3a0 <memcpy>
      offset += length_topic_name;
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4413      	add	r3, r2
 800188a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fc9d 	bl	80001d0 <strlen>
 8001896:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	4413      	add	r3, r2
 800189e:	6979      	ldr	r1, [r7, #20]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 fb95 	bl	8004fd0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	18d0      	adds	r0, r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f008 fd71 	bl	800a3a0 <memcpy>
      offset += length_message_type;
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	4413      	add	r3, r2
 80018c4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fc80 	bl	80001d0 <strlen>
 80018d0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	6939      	ldr	r1, [r7, #16]
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fb78 	bl	8004fd0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3304      	adds	r3, #4
 80018e4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	18d0      	adds	r0, r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4619      	mov	r1, r3
 80018f4:	f008 fd54 	bl	800a3a0 <memcpy>
      offset += length_md5sum;
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4413      	add	r3, r2
 80018fe:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	0a19      	lsrs	r1, r3, #8
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	4413      	add	r3, r2
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0c19      	lsrs	r1, r3, #16
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3302      	adds	r3, #2
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	b2ca      	uxtb	r2, r1
 8001930:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0e19      	lsrs	r1, r3, #24
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3303      	adds	r3, #3
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	4413      	add	r3, r2
 800193e:	b2ca      	uxtb	r2, r1
 8001940:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	61fb      	str	r3, [r7, #28]
      return offset;
 8001948:	69fb      	ldr	r3, [r7, #28]
    }
 800194a:	4618      	mov	r0, r3
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001952:	b580      	push	{r7, lr}
 8001954:	b08a      	sub	sp, #40	; 0x28
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b29a      	uxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	889b      	ldrh	r3, [r3, #4]
 8001972:	b21a      	sxth	r2, r3
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	3301      	adds	r3, #1
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	440b      	add	r3, r1
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21b      	sxth	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b21b      	sxth	r3, r3
 8001986:	b29a      	uxth	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	3302      	adds	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	441a      	add	r2, r3
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fb34 	bl	800500c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	3304      	adds	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	4413      	add	r3, r2
 80019b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	441a      	add	r2, r3
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	440b      	add	r3, r1
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	3301      	adds	r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	e7ec      	b.n	80019ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4413      	add	r3, r2
 80019da:	3b01      	subs	r3, #1
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	441a      	add	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	441a      	add	r2, r3
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fb01 	bl	800500c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4413      	add	r3, r2
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d20c      	bcs.n	8001a3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	441a      	add	r2, r3
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	440b      	add	r3, r1
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	3301      	adds	r3, #1
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	e7ec      	b.n	8001a14 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b01      	subs	r3, #1
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	441a      	add	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	441a      	add	r2, r3
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 face 	bl	800500c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	3304      	adds	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d20c      	bcs.n	8001aa0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	441a      	add	r2, r3
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	6839      	ldr	r1, [r7, #0]
 8001a92:	440b      	add	r3, r1
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e7ec      	b.n	8001a7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	6839      	ldr	r1, [r7, #0]
 8001ace:	440a      	add	r2, r1
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	3301      	adds	r3, #1
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	440b      	add	r3, r1
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	3302      	adds	r3, #2
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	440b      	add	r3, r1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	3303      	adds	r3, #3
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	440b      	add	r3, r1
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	3304      	adds	r3, #4
 8001b16:	61bb      	str	r3, [r7, #24]
     return offset;
 8001b18:	69bb      	ldr	r3, [r7, #24]
    }
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	0800ed18 	.word	0x0800ed18

08001b40 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	0800ed34 	.word	0x0800ed34

08001b5c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fd34 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	711a      	strb	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001b7c:	609a      	str	r2, [r3, #8]
    {
    }
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	0800f098 	.word	0x0800f098
 8001b8c:	0800ed14 	.word	0x0800ed14

08001b90 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	7912      	ldrb	r2, [r2, #4]
 8001ba8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3301      	adds	r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fb0b 	bl	80001d0 <strlen>
 8001bba:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fa03 	bl	8004fd0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	18d0      	adds	r0, r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f008 fbdf 	bl	800a3a0 <memcpy>
      offset += length_msg;
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bea:	68fb      	ldr	r3, [r7, #12]
    }
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3301      	adds	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	441a      	add	r2, r3
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 f9f3 	bl	800500c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d20c      	bcs.n	8001c56 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	441a      	add	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	440b      	add	r3, r1
 8001c4a:	7812      	ldrb	r2, [r2, #0]
 8001c4c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e7ec      	b.n	8001c30 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	441a      	add	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
     return offset;
 8001c7a:	693b      	ldr	r3, [r7, #16]
    }
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	0800ed58 	.word	0x0800ed58

08001ca0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	0800ed6c 	.word	0x0800ed6c

08001cbc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fc84 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	0800f080 	.word	0x0800f080

08001d18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0a19      	lsrs	r1, r3, #8
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	0c19      	lsrs	r1, r3, #16
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	3302      	adds	r3, #2
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	b2ca      	uxtb	r2, r1
 8001d56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0e19      	lsrs	r1, r3, #24
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	3303      	adds	r3, #3
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	b2ca      	uxtb	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	6a3a      	ldr	r2, [r7, #32]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d22b      	bcs.n	8001dd6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001d8c:	6939      	ldr	r1, [r7, #16]
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	b2ca      	uxtb	r2, r1
 8001d96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	0a19      	lsrs	r1, r3, #8
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	3301      	adds	r3, #1
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	b2ca      	uxtb	r2, r1
 8001da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	0c19      	lsrs	r1, r3, #16
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	3302      	adds	r3, #2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	0e19      	lsrs	r1, r3, #24
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3303      	adds	r3, #3
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2ca      	uxtb	r2, r1
 8001dc6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	3304      	adds	r3, #4
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	623b      	str	r3, [r7, #32]
 8001dd4:	e7ce      	b.n	8001d74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6919      	ldr	r1, [r3, #16]
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	b2ca      	uxtb	r2, r1
 8001de2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	0a19      	lsrs	r1, r3, #8
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	3301      	adds	r3, #1
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	b2ca      	uxtb	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	0c19      	lsrs	r1, r3, #16
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	3302      	adds	r3, #2
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	b2ca      	uxtb	r2, r1
 8001e06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	0e19      	lsrs	r1, r3, #24
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	3303      	adds	r3, #3
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	b2ca      	uxtb	r2, r1
 8001e18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d22b      	bcs.n	8001e86 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	0a19      	lsrs	r1, r3, #8
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	3301      	adds	r3, #1
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	b2ca      	uxtb	r2, r1
 8001e56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	0c19      	lsrs	r1, r3, #16
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3302      	adds	r3, #2
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	b2ca      	uxtb	r2, r1
 8001e66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	0e19      	lsrs	r1, r3, #24
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	3303      	adds	r3, #3
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	b2ca      	uxtb	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	e7ce      	b.n	8001e24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69d9      	ldr	r1, [r3, #28]
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2ca      	uxtb	r2, r1
 8001e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	0a19      	lsrs	r1, r3, #8
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	0c19      	lsrs	r1, r3, #16
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3302      	adds	r3, #2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	0e19      	lsrs	r1, r3, #24
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	3303      	adds	r3, #3
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	3304      	adds	r3, #4
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d228      	bcs.n	8001f30 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe f970 	bl	80001d0 <strlen>
 8001ef0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	6979      	ldr	r1, [r7, #20]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f868 	bl	8004fd0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3304      	adds	r3, #4
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	18d0      	adds	r0, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f008 fa40 	bl	800a3a0 <memcpy>
      offset += length_stringsi;
 8001f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	4413      	add	r3, r2
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	e7d1      	b.n	8001ed4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f32:	4618      	mov	r0, r3
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b08e      	sub	sp, #56	; 0x38
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f54:	3301      	adds	r3, #1
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	6a3a      	ldr	r2, [r7, #32]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f66:	3302      	adds	r3, #2
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f78:	3303      	adds	r3, #3
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	6a3a      	ldr	r2, [r7, #32]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	6a3a      	ldr	r2, [r7, #32]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d90a      	bls.n	8001fae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f009 f88c 	bl	800b0c0 <realloc>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d236      	bcs.n	8002030 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fca:	6839      	ldr	r1, [r7, #0]
 8001fcc:	440a      	add	r2, r1
 8001fce:	7812      	ldrb	r2, [r2, #0]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd8:	3301      	adds	r3, #1
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	440b      	add	r3, r1
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fea:	3302      	adds	r3, #2
 8001fec:	6839      	ldr	r1, [r7, #0]
 8001fee:	440b      	add	r3, r1
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	041b      	lsls	r3, r3, #16
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	6839      	ldr	r1, [r7, #0]
 8002000:	440b      	add	r3, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002012:	3304      	adds	r3, #4
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	3301      	adds	r3, #1
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
 800202e:	e7c3      	b.n	8001fb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203c:	3301      	adds	r3, #1
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	4313      	orrs	r3, r2
 800204a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	3302      	adds	r3, #2
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	4313      	orrs	r3, r2
 800205c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002060:	3303      	adds	r3, #3
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	4313      	orrs	r3, r2
 800206e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002072:	3304      	adds	r3, #4
 8002074:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	429a      	cmp	r2, r3
 800207e:	d90a      	bls.n	8002096 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f009 f818 	bl	800b0c0 <realloc>
 8002090:	4602      	mov	r2, r0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d236      	bcs.n	8002118 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	440a      	add	r2, r1
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	3301      	adds	r3, #1
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	440b      	add	r3, r1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	3302      	adds	r3, #2
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	440b      	add	r3, r1
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e4:	3303      	adds	r3, #3
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	440b      	add	r3, r1
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80020f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fa:	3304      	adds	r3, #4
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	3214      	adds	r2, #20
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	3301      	adds	r3, #1
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002116:	e7c3      	b.n	80020a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	3301      	adds	r3, #1
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	3302      	adds	r3, #2
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	3303      	adds	r3, #3
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	061b      	lsls	r3, r3, #24
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	3304      	adds	r3, #4
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d90a      	bls.n	800217e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f008 ffa4 	bl	800b0c0 <realloc>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800218e:	429a      	cmp	r2, r3
 8002190:	d23f      	bcs.n	8002212 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	441a      	add	r2, r3
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 ff34 	bl	800500c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a6:	3304      	adds	r3, #4
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d20c      	bcs.n	80021d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	441a      	add	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	440b      	add	r3, r1
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	3301      	adds	r3, #1
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
 80021d2:	e7ec      	b.n	80021ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80021d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	3b01      	subs	r3, #1
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	3b01      	subs	r3, #1
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	441a      	add	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80021f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	3220      	adds	r2, #32
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	3301      	adds	r3, #1
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002210:	e7ba      	b.n	8002188 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002214:	4618      	mov	r0, r3
 8002216:	3738      	adds	r7, #56	; 0x38
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	0800ef74 	.word	0x0800ef74

08002238 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	0800ed90 	.word	0x0800ed90

08002254 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	611a      	str	r2, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68d8      	ldr	r0, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6891      	ldr	r1, [r2, #8]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4798      	blx	r3
 80022a0:	4603      	mov	r3, r0
  };
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
  }
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80022d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <_ZN13STM32HardwareC1Ev+0x34>)
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	20001078 	.word	0x20001078

08002320 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f804 	bl	8002336 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234a:	4619      	mov	r1, r3
 800234c:	f006 ff44 	bl	80091d8 <HAL_UART_Receive_DMA>
    }
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
 8002364:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffa8 	bl	80022c2 <_ZN13STM32Hardware10getRdmaIndEv>
 8002372:	4603      	mov	r3, r0
 8002374:	429c      	cmp	r4, r3
 8002376:	bf14      	ite	ne
 8002378:	2301      	movne	r3, #1
 800237a:	2300      	moveq	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d012      	beq.n	80023a8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002388:	1c59      	adds	r1, r3, #1
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	791b      	ldrb	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800239e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80023a8:	68fb      	ldr	r3, [r7, #12]
    }
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd90      	pop	{r4, r7, pc}
	...

080023b4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d108      	bne.n	80023dc <_ZN13STM32Hardware5flushEv+0x28>
 80023ca:	4b28      	ldr	r3, [pc, #160]	; (800246c <_ZN13STM32Hardware5flushEv+0xb8>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <_ZN13STM32Hardware5flushEv+0x28>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <_ZN13STM32Hardware5flushEv+0x2a>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03f      	beq.n	8002462 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <_ZN13STM32Hardware5flushEv+0xb8>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d031      	beq.n	800245c <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002404:	429a      	cmp	r2, r3
 8002406:	d20a      	bcs.n	800241e <_ZN13STM32Hardware5flushEv+0x6a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002416:	b29b      	uxth	r3, r3
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	b29b      	uxth	r3, r3
 800241c:	e006      	b.n	800242c <_ZN13STM32Hardware5flushEv+0x78>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002424:	b29b      	uxth	r3, r3
 8002426:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800242a:	b29b      	uxth	r3, r3
 800242c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002438:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	89fa      	ldrh	r2, [r7, #14]
 8002442:	4619      	mov	r1, r3
 8002444:	f006 fe4a 	bl	80090dc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800244e:	89fb      	ldrh	r3, [r7, #14]
 8002450:	4413      	add	r3, r2
 8002452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <_ZN13STM32Hardware5flushEv+0xb8>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
      }
    }
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000250 	.word	0x20000250

08002470 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
      int n = length;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002486:	bfa8      	it	ge
 8002488:	f44f 7300 	movge.w	r3, #512	; 0x200
 800248c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002494:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	4293      	cmp	r3, r2
 800249c:	bf28      	it	cs
 800249e:	4613      	movcs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80024a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f007 ff73 	bl	800a3a0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	4413      	add	r3, r2
 80024c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d00b      	beq.n	80024ee <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	18d1      	adds	r1, r2, r3
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	f007 ff59 	bl	800a3a0 <memcpy>
      }

      flush();
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff ff60 	bl	80023b4 <_ZN13STM32Hardware5flushEv>
    }
 80024f4:	bf00      	nop
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	f004 f948 	bl	8006798 <HAL_GetTick>
 8002508:	4603      	mov	r3, r0
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
      data("")
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f858 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 8002524:	4a05      	ldr	r2, [pc, #20]	; (800253c <_ZN8std_msgs6StringC1Ev+0x28>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <_ZN8std_msgs6StringC1Ev+0x2c>)
 800252e:	605a      	str	r2, [r3, #4]
    {
    }
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	0800f03c 	.word	0x0800f03c
 8002540:	0800ed14 	.word	0x0800ed14

08002544 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fe3a 	bl	80001d0 <strlen>
 800255c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	4413      	add	r3, r2
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fd32 	bl	8004fd0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3304      	adds	r3, #4
 8002570:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	18d0      	adds	r0, r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	4619      	mov	r1, r3
 8002580:	f007 ff0e 	bl	800a3a0 <memcpy>
      offset += length_data;
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4413      	add	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
      return offset;
 800258c:	68fb      	ldr	r3, [r7, #12]
    }
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	441a      	add	r2, r3
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fd2b 	bl	800500c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	3304      	adds	r3, #4
 80025ba:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4413      	add	r3, r2
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d20c      	bcs.n	80025e6 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	441a      	add	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	6839      	ldr	r1, [r7, #0]
 80025d8:	440b      	add	r3, r1
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3301      	adds	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e7ec      	b.n	80025c0 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	3b01      	subs	r3, #1
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	441a      	add	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
     return offset;
 800260a:	693b      	ldr	r3, [r7, #16]
    }
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <_ZN8std_msgs6String7getTypeEv+0x18>)
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	0800edb4 	.word	0x0800edb4

08002630 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	0800edc4 	.word	0x0800edc4

0800264c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe ffbc 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	0800f024 	.word	0x0800f024

0800269c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800269c:	b480      	push	{r7}
 800269e:	b08b      	sub	sp, #44	; 0x2c
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80026b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	4401      	add	r1, r0
 80026be:	b2d3      	uxtb	r3, r2
 80026c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80026c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	0a02      	lsrs	r2, r0, #8
 80026d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026d4:	0a0b      	lsrs	r3, r1, #8
 80026d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d8:	3101      	adds	r1, #1
 80026da:	6838      	ldr	r0, [r7, #0]
 80026dc:	4401      	add	r1, r0
 80026de:	b2d3      	uxtb	r3, r2
 80026e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80026e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	0c02      	lsrs	r2, r0, #16
 80026f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026f4:	0c0b      	lsrs	r3, r1, #16
 80026f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f8:	3102      	adds	r1, #2
 80026fa:	6838      	ldr	r0, [r7, #0]
 80026fc:	4401      	add	r1, r0
 80026fe:	b2d3      	uxtb	r3, r2
 8002700:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002702:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	0e02      	lsrs	r2, r0, #24
 8002710:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002714:	0e0b      	lsrs	r3, r1, #24
 8002716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002718:	3103      	adds	r1, #3
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	4401      	add	r1, r0
 800271e:	b2d3      	uxtb	r3, r2
 8002720:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002722:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	000a      	movs	r2, r1
 8002730:	2300      	movs	r3, #0
 8002732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002734:	3104      	adds	r1, #4
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	4401      	add	r1, r0
 800273a:	b2d3      	uxtb	r3, r2
 800273c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800273e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	0a0a      	lsrs	r2, r1, #8
 800274c:	2300      	movs	r3, #0
 800274e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002750:	3105      	adds	r1, #5
 8002752:	6838      	ldr	r0, [r7, #0]
 8002754:	4401      	add	r1, r0
 8002756:	b2d3      	uxtb	r3, r2
 8002758:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800275a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	0c0a      	lsrs	r2, r1, #16
 8002768:	2300      	movs	r3, #0
 800276a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276c:	3106      	adds	r1, #6
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	4401      	add	r1, r0
 8002772:	b2d3      	uxtb	r3, r2
 8002774:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002776:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	0e0a      	lsrs	r2, r1, #24
 8002784:	2300      	movs	r3, #0
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	3107      	adds	r1, #7
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	4401      	add	r1, r0
 800278e:	b2d3      	uxtb	r3, r2
 8002790:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	3308      	adds	r3, #8
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800279e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80027a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a8:	6838      	ldr	r0, [r7, #0]
 80027aa:	4401      	add	r1, r0
 80027ac:	b2d3      	uxtb	r3, r2
 80027ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80027b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	0a02      	lsrs	r2, r0, #8
 80027be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80027c2:	0a0b      	lsrs	r3, r1, #8
 80027c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c6:	3101      	adds	r1, #1
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	4401      	add	r1, r0
 80027cc:	b2d3      	uxtb	r3, r2
 80027ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80027d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	0c02      	lsrs	r2, r0, #16
 80027de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027e2:	0c0b      	lsrs	r3, r1, #16
 80027e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e6:	3102      	adds	r1, #2
 80027e8:	6838      	ldr	r0, [r7, #0]
 80027ea:	4401      	add	r1, r0
 80027ec:	b2d3      	uxtb	r3, r2
 80027ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80027f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	0e02      	lsrs	r2, r0, #24
 80027fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002802:	0e0b      	lsrs	r3, r1, #24
 8002804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002806:	3103      	adds	r1, #3
 8002808:	6838      	ldr	r0, [r7, #0]
 800280a:	4401      	add	r1, r0
 800280c:	b2d3      	uxtb	r3, r2
 800280e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002810:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	000a      	movs	r2, r1
 800281e:	2300      	movs	r3, #0
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	3104      	adds	r1, #4
 8002824:	6838      	ldr	r0, [r7, #0]
 8002826:	4401      	add	r1, r0
 8002828:	b2d3      	uxtb	r3, r2
 800282a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800282c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	0a0a      	lsrs	r2, r1, #8
 800283a:	2300      	movs	r3, #0
 800283c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800283e:	3105      	adds	r1, #5
 8002840:	6838      	ldr	r0, [r7, #0]
 8002842:	4401      	add	r1, r0
 8002844:	b2d3      	uxtb	r3, r2
 8002846:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002848:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	0c0a      	lsrs	r2, r1, #16
 8002856:	2300      	movs	r3, #0
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	3106      	adds	r1, #6
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	4401      	add	r1, r0
 8002860:	b2d3      	uxtb	r3, r2
 8002862:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002864:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	0e0a      	lsrs	r2, r1, #24
 8002872:	2300      	movs	r3, #0
 8002874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002876:	3107      	adds	r1, #7
 8002878:	6838      	ldr	r0, [r7, #0]
 800287a:	4401      	add	r1, r0
 800287c:	b2d3      	uxtb	r3, r2
 800287e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	3308      	adds	r3, #8
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800288c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	4401      	add	r1, r0
 800289a:	b2d3      	uxtb	r3, r2
 800289c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800289e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	0a02      	lsrs	r2, r0, #8
 80028ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028b0:	0a0b      	lsrs	r3, r1, #8
 80028b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b4:	3101      	adds	r1, #1
 80028b6:	6838      	ldr	r0, [r7, #0]
 80028b8:	4401      	add	r1, r0
 80028ba:	b2d3      	uxtb	r3, r2
 80028bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80028be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	0c02      	lsrs	r2, r0, #16
 80028cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028d0:	0c0b      	lsrs	r3, r1, #16
 80028d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d4:	3102      	adds	r1, #2
 80028d6:	6838      	ldr	r0, [r7, #0]
 80028d8:	4401      	add	r1, r0
 80028da:	b2d3      	uxtb	r3, r2
 80028dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80028de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	0e02      	lsrs	r2, r0, #24
 80028ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028f0:	0e0b      	lsrs	r3, r1, #24
 80028f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f4:	3103      	adds	r1, #3
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	4401      	add	r1, r0
 80028fa:	b2d3      	uxtb	r3, r2
 80028fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80028fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	000a      	movs	r2, r1
 800290c:	2300      	movs	r3, #0
 800290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002910:	3104      	adds	r1, #4
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	4401      	add	r1, r0
 8002916:	b2d3      	uxtb	r3, r2
 8002918:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800291a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	0a0a      	lsrs	r2, r1, #8
 8002928:	2300      	movs	r3, #0
 800292a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292c:	3105      	adds	r1, #5
 800292e:	6838      	ldr	r0, [r7, #0]
 8002930:	4401      	add	r1, r0
 8002932:	b2d3      	uxtb	r3, r2
 8002934:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	0c0a      	lsrs	r2, r1, #16
 8002944:	2300      	movs	r3, #0
 8002946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002948:	3106      	adds	r1, #6
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	4401      	add	r1, r0
 800294e:	b2d3      	uxtb	r3, r2
 8002950:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	0e0a      	lsrs	r2, r1, #24
 8002960:	2300      	movs	r3, #0
 8002962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002964:	3107      	adds	r1, #7
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	4401      	add	r1, r0
 800296a:	b2d3      	uxtb	r3, r2
 800296c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	3308      	adds	r3, #8
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002976:	4618      	mov	r0, r3
 8002978:	372c      	adds	r7, #44	; 0x2c
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002982:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002986:	b0bb      	sub	sp, #236	; 0xec
 8002988:	af00      	add	r7, sp, #0
 800298a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800298e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029a4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80029a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b0:	4413      	add	r3, r2
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	ea40 0402 	orr.w	r4, r0, r2
 80029be:	ea41 0503 	orr.w	r5, r1, r3
 80029c2:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029c6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029d4:	4413      	add	r3, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f04f 0000 	mov.w	r0, #0
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	0219      	lsls	r1, r3, #8
 80029e8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80029ec:	0210      	lsls	r0, r2, #8
 80029ee:	ea44 0a00 	orr.w	sl, r4, r0
 80029f2:	ea45 0b01 	orr.w	fp, r5, r1
 80029f6:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029fa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80029fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a02:	1c9a      	adds	r2, r3, #2
 8002a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	0419      	lsls	r1, r3, #16
 8002a1c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002a20:	0410      	lsls	r0, r2, #16
 8002a22:	ea44 0300 	orr.w	r3, r4, r0
 8002a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a2a:	ea45 0301 	orr.w	r3, r5, r1
 8002a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002a32:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002a36:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a3a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	1cda      	adds	r2, r3, #3
 8002a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a48:	4413      	add	r3, r2
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8002a56:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8002a5a:	ea40 0308 	orr.w	r3, r0, r8
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a62:	ea41 0309 	orr.w	r3, r1, r9
 8002a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a6a:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8002a6e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a72:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7a:	1d1a      	adds	r2, r3, #4
 8002a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	f04f 0000 	mov.w	r0, #0
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	0011      	movs	r1, r2
 8002a94:	2000      	movs	r0, #0
 8002a96:	ea44 0300 	orr.w	r3, r4, r0
 8002a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a9e:	ea45 0301 	orr.w	r3, r5, r1
 8002aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002aa6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002aaa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002aae:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	1d5a      	adds	r2, r3, #5
 8002ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	f04f 0000 	mov.w	r0, #0
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	0211      	lsls	r1, r2, #8
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	ea44 0300 	orr.w	r3, r4, r0
 8002ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ada:	ea45 0301 	orr.w	r3, r5, r1
 8002ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002ae2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8002ae6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002aea:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af2:	1d9a      	adds	r2, r3, #6
 8002af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af8:	4413      	add	r3, r2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	f04f 0000 	mov.w	r0, #0
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	0411      	lsls	r1, r2, #16
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	ea44 0300 	orr.w	r3, r4, r0
 8002b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b16:	ea45 0301 	orr.w	r3, r5, r1
 8002b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b1e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002b22:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b26:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2e:	1dda      	adds	r2, r3, #7
 8002b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	0611      	lsls	r1, r2, #24
 8002b48:	2000      	movs	r0, #0
 8002b4a:	ea44 0300 	orr.w	r3, r4, r0
 8002b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b52:	ea45 0301 	orr.w	r3, r5, r1
 8002b56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b5a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002b5e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 8002b62:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b72:	3308      	adds	r3, #8
 8002b74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b84:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002b88:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b90:	4413      	add	r3, r2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	ea40 0402 	orr.w	r4, r0, r2
 8002b9e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ba8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002bac:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bb0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	f04f 0000 	mov.w	r0, #0
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	0219      	lsls	r1, r3, #8
 8002bd2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002bd6:	0210      	lsls	r0, r2, #8
 8002bd8:	ea44 0300 	orr.w	r3, r4, r0
 8002bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002be0:	ea45 0301 	orr.w	r3, r5, r1
 8002be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002be8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8002bec:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bf0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	1c9a      	adds	r2, r3, #2
 8002bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bfe:	4413      	add	r3, r2
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f04f 0000 	mov.w	r0, #0
 8002c0c:	f04f 0100 	mov.w	r1, #0
 8002c10:	0419      	lsls	r1, r3, #16
 8002c12:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002c16:	0410      	lsls	r0, r2, #16
 8002c18:	ea44 0300 	orr.w	r3, r4, r0
 8002c1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c1e:	ea45 0301 	orr.w	r3, r5, r1
 8002c22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c24:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002c28:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c2c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c34:	1cda      	adds	r2, r3, #3
 8002c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	0a14      	lsrs	r4, r2, #8
 8002c46:	677c      	str	r4, [r7, #116]	; 0x74
 8002c48:	0613      	lsls	r3, r2, #24
 8002c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c4c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002c50:	4623      	mov	r3, r4
 8002c52:	4303      	orrs	r3, r0
 8002c54:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c56:	462b      	mov	r3, r5
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c5c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002c60:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c64:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6c:	1d1a      	adds	r2, r3, #4
 8002c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c72:	4413      	add	r3, r2
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0011      	movs	r1, r2
 8002c86:	2000      	movs	r0, #0
 8002c88:	ea44 0300 	orr.w	r3, r4, r0
 8002c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c8e:	ea45 0301 	orr.w	r3, r5, r1
 8002c92:	667b      	str	r3, [r7, #100]	; 0x64
 8002c94:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8002c98:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c9c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca4:	1d5a      	adds	r2, r3, #5
 8002ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f04f 0000 	mov.w	r0, #0
 8002cb8:	f04f 0100 	mov.w	r1, #0
 8002cbc:	0211      	lsls	r1, r2, #8
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	ea44 0300 	orr.w	r3, r4, r0
 8002cc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cc6:	ea45 0301 	orr.w	r3, r5, r1
 8002cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ccc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002cd0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002cd4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cdc:	1d9a      	adds	r2, r3, #6
 8002cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	0411      	lsls	r1, r2, #16
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	ea44 0300 	orr.w	r3, r4, r0
 8002cfc:	653b      	str	r3, [r7, #80]	; 0x50
 8002cfe:	ea45 0301 	orr.w	r3, r5, r1
 8002d02:	657b      	str	r3, [r7, #84]	; 0x54
 8002d04:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002d08:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002d0c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d14:	1dda      	adds	r2, r3, #7
 8002d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0611      	lsls	r1, r2, #24
 8002d2e:	2000      	movs	r0, #0
 8002d30:	ea44 0300 	orr.w	r3, r4, r0
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d36:	ea45 0301 	orr.w	r3, r5, r1
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d3c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002d40:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8002d44:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d4c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d54:	3308      	adds	r3, #8
 8002d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	ea40 0402 	orr.w	r4, r0, r2
 8002d80:	643c      	str	r4, [r7, #64]	; 0x40
 8002d82:	430b      	orrs	r3, r1
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
 8002d86:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d8a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d8e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d9c:	4413      	add	r3, r2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0219      	lsls	r1, r3, #8
 8002db0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002db4:	0210      	lsls	r0, r2, #8
 8002db6:	ea44 0300 	orr.w	r3, r4, r0
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dbc:	ea45 0301 	orr.w	r3, r5, r1
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002dc6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dca:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd2:	1c9a      	adds	r2, r3, #2
 8002dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	0419      	lsls	r1, r3, #16
 8002dec:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002df0:	0410      	lsls	r0, r2, #16
 8002df2:	ea44 0300 	orr.w	r3, r4, r0
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
 8002df8:	ea45 0301 	orr.w	r3, r5, r1
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002e02:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0e:	1cda      	adds	r2, r3, #3
 8002e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e14:	4413      	add	r3, r2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	0a14      	lsrs	r4, r2, #8
 8002e20:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002e22:	0613      	lsls	r3, r2, #24
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e26:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	4303      	orrs	r3, r0
 8002e2e:	623b      	str	r3, [r7, #32]
 8002e30:	462b      	mov	r3, r5
 8002e32:	430b      	orrs	r3, r1
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
 8002e36:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e3a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	3304      	adds	r3, #4
 8002e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2dc      	uxtb	r4, r3
 8002e52:	f04f 0500 	mov.w	r5, #0
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	0023      	movs	r3, r4
 8002e60:	2200      	movs	r2, #0
 8002e62:	ea40 0402 	orr.w	r4, r0, r2
 8002e66:	61bc      	str	r4, [r7, #24]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002e70:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e74:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7c:	3305      	adds	r3, #5
 8002e7e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	b2dc      	uxtb	r4, r3
 8002e88:	f04f 0500 	mov.w	r5, #0
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	0223      	lsls	r3, r4, #8
 8002e96:	2200      	movs	r2, #0
 8002e98:	ea40 0402 	orr.w	r4, r0, r2
 8002e9c:	613c      	str	r4, [r7, #16]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ea6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002eaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb2:	3306      	adds	r3, #6
 8002eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002eb8:	4413      	add	r3, r2
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b2dc      	uxtb	r4, r3
 8002ebe:	f04f 0500 	mov.w	r5, #0
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	0423      	lsls	r3, r4, #16
 8002ecc:	2200      	movs	r2, #0
 8002ece:	ea40 0402 	orr.w	r4, r0, r2
 8002ed2:	60bc      	str	r4, [r7, #8]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002edc:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ee0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee8:	3307      	adds	r3, #7
 8002eea:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002eee:	4413      	add	r3, r2
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b2dc      	uxtb	r4, r3
 8002ef4:	f04f 0500 	mov.w	r5, #0
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	0623      	lsls	r3, r4, #24
 8002f02:	2200      	movs	r2, #0
 8002f04:	ea40 0402 	orr.w	r4, r0, r2
 8002f08:	603c      	str	r4, [r7, #0]
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f12:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 8002f16:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002f1a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002f1e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f26:	3308      	adds	r3, #8
 8002f28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 8002f30:	4618      	mov	r0, r3
 8002f32:	37ec      	adds	r7, #236	; 0xec
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f3a:	4770      	bx	lr

08002f3c <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	0800ede8 	.word	0x0800ede8

08002f58 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	0800ee00 	.word	0x0800ee00

08002f74 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fb28 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 8002f84:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fb5c 	bl	800264c <_ZN13geometry_msgs7Vector3C1Ev>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3328      	adds	r3, #40	; 0x28
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fb57 	bl	800264c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	0800f00c 	.word	0x0800f00c

08002fac <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f103 0008 	add.w	r0, r3, #8
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7ff fb68 	bl	800269c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7ff fb5b 	bl	800269c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fee:	68fb      	ldr	r3, [r7, #12]
    }
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f103 0008 	add.w	r0, r3, #8
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4413      	add	r3, r2
 8003012:	4619      	mov	r1, r3
 8003014:	f7ff fcb5 	bl	8002982 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	4413      	add	r3, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7ff fca8 	bl	8002982 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
     return offset;
 800303a:	68fb      	ldr	r3, [r7, #12]
    }
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	0800ee24 	.word	0x0800ee24

08003060 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	0800ee38 	.word	0x0800ee38

0800307c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe faa4 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 800308c:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3308      	adds	r3, #8
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fa88 	bl	80015b2 <_ZN3ros4TimeC1Ev>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80030a6:	611a      	str	r2, [r3, #16]
    {
    }
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	0800eff4 	.word	0x0800eff4
 80030b8:	0800ed14 	.word	0x0800ed14

080030bc <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	b2ca      	uxtb	r2, r1
 80030d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0a19      	lsrs	r1, r3, #8
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3301      	adds	r3, #1
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	b2ca      	uxtb	r2, r1
 80030e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0c19      	lsrs	r1, r3, #16
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3302      	adds	r3, #2
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	b2ca      	uxtb	r2, r1
 80030fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	0e19      	lsrs	r1, r3, #24
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3303      	adds	r3, #3
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	4413      	add	r3, r2
 800310a:	b2ca      	uxtb	r2, r1
 800310c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3304      	adds	r3, #4
 8003112:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6899      	ldr	r1, [r3, #8]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	4413      	add	r3, r2
 800311e:	b2ca      	uxtb	r2, r1
 8003120:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0a19      	lsrs	r1, r3, #8
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3301      	adds	r3, #1
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	4413      	add	r3, r2
 8003130:	b2ca      	uxtb	r2, r1
 8003132:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	0c19      	lsrs	r1, r3, #16
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3302      	adds	r3, #2
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	4413      	add	r3, r2
 8003142:	b2ca      	uxtb	r2, r1
 8003144:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0e19      	lsrs	r1, r3, #24
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3303      	adds	r3, #3
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4413      	add	r3, r2
 8003154:	b2ca      	uxtb	r2, r1
 8003156:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3304      	adds	r3, #4
 800315c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68d9      	ldr	r1, [r3, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	4413      	add	r3, r2
 8003168:	b2ca      	uxtb	r2, r1
 800316a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	0a19      	lsrs	r1, r3, #8
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4413      	add	r3, r2
 800317a:	b2ca      	uxtb	r2, r1
 800317c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	0c19      	lsrs	r1, r3, #16
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3302      	adds	r3, #2
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4413      	add	r3, r2
 800318c:	b2ca      	uxtb	r2, r1
 800318e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0e19      	lsrs	r1, r3, #24
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3303      	adds	r3, #3
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	4413      	add	r3, r2
 800319e:	b2ca      	uxtb	r2, r1
 80031a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3304      	adds	r3, #4
 80031a6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f80f 	bl	80001d0 <strlen>
 80031b2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 ff07 	bl	8004fd0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3304      	adds	r3, #4
 80031c6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	18d0      	adds	r0, r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4619      	mov	r1, r3
 80031d6:	f007 f8e3 	bl	800a3a0 <memcpy>
      offset += length_frame_id;
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80031e2:	68fb      	ldr	r3, [r7, #12]
    }
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3301      	adds	r3, #1
 8003210:	6839      	ldr	r1, [r7, #0]
 8003212:	440b      	add	r3, r1
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	3302      	adds	r3, #2
 8003226:	6839      	ldr	r1, [r7, #0]
 8003228:	440b      	add	r3, r1
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	3303      	adds	r3, #3
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	440b      	add	r3, r1
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	3304      	adds	r3, #4
 800324e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4413      	add	r3, r2
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	3301      	adds	r3, #1
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	440b      	add	r3, r1
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	3302      	adds	r3, #2
 800327c:	6839      	ldr	r1, [r7, #0]
 800327e:	440b      	add	r3, r1
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	3303      	adds	r3, #3
 8003292:	6839      	ldr	r1, [r7, #0]
 8003294:	440b      	add	r3, r1
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	3304      	adds	r3, #4
 80032a4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	3301      	adds	r3, #1
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	440b      	add	r3, r1
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	3302      	adds	r3, #2
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	440b      	add	r3, r1
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	3303      	adds	r3, #3
 80032e8:	6839      	ldr	r1, [r7, #0]
 80032ea:	440b      	add	r3, r1
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	3304      	adds	r3, #4
 80032fa:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	441a      	add	r2, r3
 8003302:	f107 030c 	add.w	r3, r7, #12
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f001 fe7f 	bl	800500c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3304      	adds	r3, #4
 8003312:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	429a      	cmp	r2, r3
 8003322:	d20c      	bcs.n	800333e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	441a      	add	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3b01      	subs	r3, #1
 800332e:	6839      	ldr	r1, [r7, #0]
 8003330:	440b      	add	r3, r1
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e7ec      	b.n	8003318 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	3b01      	subs	r3, #1
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	4413      	add	r3, r2
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3b01      	subs	r3, #1
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
     return offset;
 8003362:	693b      	ldr	r3, [r7, #16]
    }
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	0800ee5c 	.word	0x0800ee5c

08003388 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	0800ee6c 	.word	0x0800ee6c

080033a4 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe f910 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	0800efdc 	.word	0x0800efdc

08003400 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003400:	b480      	push	{r7}
 8003402:	b08d      	sub	sp, #52	; 0x34
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003414:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003418:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800341c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	4401      	add	r1, r0
 8003422:	b2d3      	uxtb	r3, r2
 8003424:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003426:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	0a02      	lsrs	r2, r0, #8
 8003434:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003438:	0a0b      	lsrs	r3, r1, #8
 800343a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800343c:	3101      	adds	r1, #1
 800343e:	6838      	ldr	r0, [r7, #0]
 8003440:	4401      	add	r1, r0
 8003442:	b2d3      	uxtb	r3, r2
 8003444:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003446:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	0c02      	lsrs	r2, r0, #16
 8003454:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003458:	0c0b      	lsrs	r3, r1, #16
 800345a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800345c:	3102      	adds	r1, #2
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	4401      	add	r1, r0
 8003462:	b2d3      	uxtb	r3, r2
 8003464:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003466:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	0e02      	lsrs	r2, r0, #24
 8003474:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003478:	0e0b      	lsrs	r3, r1, #24
 800347a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800347c:	3103      	adds	r1, #3
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	4401      	add	r1, r0
 8003482:	b2d3      	uxtb	r3, r2
 8003484:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003486:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	000a      	movs	r2, r1
 8003494:	2300      	movs	r3, #0
 8003496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003498:	3104      	adds	r1, #4
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	4401      	add	r1, r0
 800349e:	b2d3      	uxtb	r3, r2
 80034a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80034a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	0a0a      	lsrs	r2, r1, #8
 80034b0:	2300      	movs	r3, #0
 80034b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034b4:	3105      	adds	r1, #5
 80034b6:	6838      	ldr	r0, [r7, #0]
 80034b8:	4401      	add	r1, r0
 80034ba:	b2d3      	uxtb	r3, r2
 80034bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80034be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	0c0a      	lsrs	r2, r1, #16
 80034cc:	2300      	movs	r3, #0
 80034ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034d0:	3106      	adds	r1, #6
 80034d2:	6838      	ldr	r0, [r7, #0]
 80034d4:	4401      	add	r1, r0
 80034d6:	b2d3      	uxtb	r3, r2
 80034d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80034da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	0e0a      	lsrs	r2, r1, #24
 80034e8:	2300      	movs	r3, #0
 80034ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ec:	3107      	adds	r1, #7
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	4401      	add	r1, r0
 80034f2:	b2d3      	uxtb	r3, r2
 80034f4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	3308      	adds	r3, #8
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003502:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800350a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800350c:	6838      	ldr	r0, [r7, #0]
 800350e:	4401      	add	r1, r0
 8003510:	b2d3      	uxtb	r3, r2
 8003512:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003514:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	0a02      	lsrs	r2, r0, #8
 8003522:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003526:	0a0b      	lsrs	r3, r1, #8
 8003528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800352a:	3101      	adds	r1, #1
 800352c:	6838      	ldr	r0, [r7, #0]
 800352e:	4401      	add	r1, r0
 8003530:	b2d3      	uxtb	r3, r2
 8003532:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003534:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	0c02      	lsrs	r2, r0, #16
 8003542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003546:	0c0b      	lsrs	r3, r1, #16
 8003548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800354a:	3102      	adds	r1, #2
 800354c:	6838      	ldr	r0, [r7, #0]
 800354e:	4401      	add	r1, r0
 8003550:	b2d3      	uxtb	r3, r2
 8003552:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003554:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	0e02      	lsrs	r2, r0, #24
 8003562:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003566:	0e0b      	lsrs	r3, r1, #24
 8003568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800356a:	3103      	adds	r1, #3
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	4401      	add	r1, r0
 8003570:	b2d3      	uxtb	r3, r2
 8003572:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003574:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	000a      	movs	r2, r1
 8003582:	2300      	movs	r3, #0
 8003584:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003586:	3104      	adds	r1, #4
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	4401      	add	r1, r0
 800358c:	b2d3      	uxtb	r3, r2
 800358e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003590:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	0a0a      	lsrs	r2, r1, #8
 800359e:	2300      	movs	r3, #0
 80035a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035a2:	3105      	adds	r1, #5
 80035a4:	6838      	ldr	r0, [r7, #0]
 80035a6:	4401      	add	r1, r0
 80035a8:	b2d3      	uxtb	r3, r2
 80035aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80035ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	0c0a      	lsrs	r2, r1, #16
 80035ba:	2300      	movs	r3, #0
 80035bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035be:	3106      	adds	r1, #6
 80035c0:	6838      	ldr	r0, [r7, #0]
 80035c2:	4401      	add	r1, r0
 80035c4:	b2d3      	uxtb	r3, r2
 80035c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80035c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	0e0a      	lsrs	r2, r1, #24
 80035d6:	2300      	movs	r3, #0
 80035d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035da:	3107      	adds	r1, #7
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	4401      	add	r1, r0
 80035e0:	b2d3      	uxtb	r3, r2
 80035e2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	3308      	adds	r3, #8
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80035f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80035f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	4401      	add	r1, r0
 80035fe:	b2d3      	uxtb	r3, r2
 8003600:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003602:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	0a02      	lsrs	r2, r0, #8
 8003610:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003614:	0a0b      	lsrs	r3, r1, #8
 8003616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003618:	3101      	adds	r1, #1
 800361a:	6838      	ldr	r0, [r7, #0]
 800361c:	4401      	add	r1, r0
 800361e:	b2d3      	uxtb	r3, r2
 8003620:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	0c02      	lsrs	r2, r0, #16
 8003630:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003634:	0c0b      	lsrs	r3, r1, #16
 8003636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003638:	3102      	adds	r1, #2
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	4401      	add	r1, r0
 800363e:	b2d3      	uxtb	r3, r2
 8003640:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	0e02      	lsrs	r2, r0, #24
 8003650:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003654:	0e0b      	lsrs	r3, r1, #24
 8003656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003658:	3103      	adds	r1, #3
 800365a:	6838      	ldr	r0, [r7, #0]
 800365c:	4401      	add	r1, r0
 800365e:	b2d3      	uxtb	r3, r2
 8003660:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	000a      	movs	r2, r1
 8003670:	2300      	movs	r3, #0
 8003672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003674:	3104      	adds	r1, #4
 8003676:	6838      	ldr	r0, [r7, #0]
 8003678:	4401      	add	r1, r0
 800367a:	b2d3      	uxtb	r3, r2
 800367c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800367e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	0a0a      	lsrs	r2, r1, #8
 800368c:	2300      	movs	r3, #0
 800368e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003690:	3105      	adds	r1, #5
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	4401      	add	r1, r0
 8003696:	b2d3      	uxtb	r3, r2
 8003698:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800369a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	0c0a      	lsrs	r2, r1, #16
 80036a8:	2300      	movs	r3, #0
 80036aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ac:	3106      	adds	r1, #6
 80036ae:	6838      	ldr	r0, [r7, #0]
 80036b0:	4401      	add	r1, r0
 80036b2:	b2d3      	uxtb	r3, r2
 80036b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80036b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	0e0a      	lsrs	r2, r1, #24
 80036c4:	2300      	movs	r3, #0
 80036c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036c8:	3107      	adds	r1, #7
 80036ca:	6838      	ldr	r0, [r7, #0]
 80036cc:	4401      	add	r1, r0
 80036ce:	b2d3      	uxtb	r3, r2
 80036d0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	3308      	adds	r3, #8
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036de:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 80036e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	4401      	add	r1, r0
 80036ec:	b2d3      	uxtb	r3, r2
 80036ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80036f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	0a02      	lsrs	r2, r0, #8
 80036fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003702:	0a0b      	lsrs	r3, r1, #8
 8003704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003706:	3101      	adds	r1, #1
 8003708:	6838      	ldr	r0, [r7, #0]
 800370a:	4401      	add	r1, r0
 800370c:	b2d3      	uxtb	r3, r2
 800370e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8003710:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	0c02      	lsrs	r2, r0, #16
 800371e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003722:	0c0b      	lsrs	r3, r1, #16
 8003724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003726:	3102      	adds	r1, #2
 8003728:	6838      	ldr	r0, [r7, #0]
 800372a:	4401      	add	r1, r0
 800372c:	b2d3      	uxtb	r3, r2
 800372e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8003730:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	0e02      	lsrs	r2, r0, #24
 800373e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003742:	0e0b      	lsrs	r3, r1, #24
 8003744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003746:	3103      	adds	r1, #3
 8003748:	6838      	ldr	r0, [r7, #0]
 800374a:	4401      	add	r1, r0
 800374c:	b2d3      	uxtb	r3, r2
 800374e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8003750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	000a      	movs	r2, r1
 800375e:	2300      	movs	r3, #0
 8003760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003762:	3104      	adds	r1, #4
 8003764:	6838      	ldr	r0, [r7, #0]
 8003766:	4401      	add	r1, r0
 8003768:	b2d3      	uxtb	r3, r2
 800376a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 800376c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	0a0a      	lsrs	r2, r1, #8
 800377a:	2300      	movs	r3, #0
 800377c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800377e:	3105      	adds	r1, #5
 8003780:	6838      	ldr	r0, [r7, #0]
 8003782:	4401      	add	r1, r0
 8003784:	b2d3      	uxtb	r3, r2
 8003786:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	0c0a      	lsrs	r2, r1, #16
 8003796:	2300      	movs	r3, #0
 8003798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800379a:	3106      	adds	r1, #6
 800379c:	6838      	ldr	r0, [r7, #0]
 800379e:	4401      	add	r1, r0
 80037a0:	b2d3      	uxtb	r3, r2
 80037a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 80037a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	0e0a      	lsrs	r2, r1, #24
 80037b2:	2300      	movs	r3, #0
 80037b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037b6:	3107      	adds	r1, #7
 80037b8:	6838      	ldr	r0, [r7, #0]
 80037ba:	4401      	add	r1, r0
 80037bc:	b2d3      	uxtb	r3, r2
 80037be:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	3308      	adds	r3, #8
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80037c8:	4618      	mov	r0, r3
 80037ca:	3734      	adds	r7, #52	; 0x34
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80037d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80037d8:	b0cf      	sub	sp, #316	; 0x13c
 80037da:	af00      	add	r7, sp, #0
 80037dc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80037e0:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    {
      int offset = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037f6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80037fa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80037fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003802:	4413      	add	r3, r2
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	ea40 0402 	orr.w	r4, r0, r2
 8003810:	ea41 0503 	orr.w	r5, r1, r3
 8003814:	e9c7 454a 	strd	r4, r5, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003818:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800381c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003826:	4413      	add	r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f04f 0000 	mov.w	r0, #0
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	0219      	lsls	r1, r3, #8
 800383a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800383e:	0210      	lsls	r0, r2, #8
 8003840:	ea44 0a00 	orr.w	sl, r4, r0
 8003844:	ea45 0b01 	orr.w	fp, r5, r1
 8003848:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800384c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003850:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003854:	1c9a      	adds	r2, r3, #2
 8003856:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800385a:	4413      	add	r3, r2
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	0419      	lsls	r1, r3, #16
 800386e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003872:	0410      	lsls	r0, r2, #16
 8003874:	ea44 0300 	orr.w	r3, r4, r0
 8003878:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800387c:	ea45 0301 	orr.w	r3, r5, r1
 8003880:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003884:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003888:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800388c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003890:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003894:	1cda      	adds	r2, r3, #3
 8003896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800389a:	4413      	add	r3, r2
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80038a8:	ea4f 6802 	mov.w	r8, r2, lsl #24
 80038ac:	ea40 0308 	orr.w	r3, r0, r8
 80038b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038b4:	ea41 0309 	orr.w	r3, r1, r9
 80038b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038bc:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80038c0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80038c4:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80038c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038cc:	1d1a      	adds	r2, r3, #4
 80038ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038d2:	4413      	add	r3, r2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	f04f 0000 	mov.w	r0, #0
 80038e0:	f04f 0100 	mov.w	r1, #0
 80038e4:	0011      	movs	r1, r2
 80038e6:	2000      	movs	r0, #0
 80038e8:	ea44 0300 	orr.w	r3, r4, r0
 80038ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80038f0:	ea45 0301 	orr.w	r3, r5, r1
 80038f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038f8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80038fc:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003900:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003904:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003908:	1d5a      	adds	r2, r3, #5
 800390a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f04f 0000 	mov.w	r0, #0
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	0211      	lsls	r1, r2, #8
 8003922:	2000      	movs	r0, #0
 8003924:	ea44 0300 	orr.w	r3, r4, r0
 8003928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800392c:	ea45 0301 	orr.w	r3, r5, r1
 8003930:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003934:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8003938:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800393c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003940:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003944:	1d9a      	adds	r2, r3, #6
 8003946:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	0411      	lsls	r1, r2, #16
 800395e:	2000      	movs	r0, #0
 8003960:	ea44 0300 	orr.w	r3, r4, r0
 8003964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003968:	ea45 0301 	orr.w	r3, r5, r1
 800396c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003970:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003974:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003978:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800397c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003980:	1dda      	adds	r2, r3, #7
 8003982:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003986:	4413      	add	r3, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	f04f 0000 	mov.w	r0, #0
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	0611      	lsls	r1, r2, #24
 800399a:	2000      	movs	r0, #0
 800399c:	ea44 0300 	orr.w	r3, r4, r0
 80039a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039a4:	ea45 0301 	orr.w	r3, r5, r1
 80039a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039ac:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80039b0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      this->x = u_x.real;
 80039b4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80039b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80039c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039c4:	3308      	adds	r3, #8
 80039c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039d6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80039da:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80039de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039e2:	4413      	add	r3, r2
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	ea40 0402 	orr.w	r4, r0, r2
 80039f0:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 80039f4:	430b      	orrs	r3, r1
 80039f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80039fa:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80039fe:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a02:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a10:	4413      	add	r3, r2
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	0219      	lsls	r1, r3, #8
 8003a24:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003a28:	0210      	lsls	r0, r2, #8
 8003a2a:	ea44 0300 	orr.w	r3, r4, r0
 8003a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a32:	ea45 0301 	orr.w	r3, r5, r1
 8003a36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a3a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003a3e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a42:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003a46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a4a:	1c9a      	adds	r2, r3, #2
 8003a4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a50:	4413      	add	r3, r2
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	0419      	lsls	r1, r3, #16
 8003a64:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003a68:	0410      	lsls	r0, r2, #16
 8003a6a:	ea44 0300 	orr.w	r3, r4, r0
 8003a6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a72:	ea45 0301 	orr.w	r3, r5, r1
 8003a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a7a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8003a7e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a82:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a8a:	1cda      	adds	r2, r3, #3
 8003a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a90:	4413      	add	r3, r2
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	0a14      	lsrs	r4, r2, #8
 8003a9c:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8003aa0:	0613      	lsls	r3, r2, #24
 8003aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8003aaa:	4623      	mov	r3, r4
 8003aac:	4303      	orrs	r3, r0
 8003aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aba:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8003abe:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ac2:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003ac6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ad0:	4413      	add	r3, r2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	f04f 0000 	mov.w	r0, #0
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	ea44 0300 	orr.w	r3, r4, r0
 8003aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003aee:	ea45 0301 	orr.w	r3, r5, r1
 8003af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003af6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003afa:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003afe:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003b02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b06:	1d5a      	adds	r2, r3, #5
 8003b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b0c:	4413      	add	r3, r2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	0211      	lsls	r1, r2, #8
 8003b20:	2000      	movs	r0, #0
 8003b22:	ea44 0300 	orr.w	r3, r4, r0
 8003b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b2a:	ea45 0301 	orr.w	r3, r5, r1
 8003b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b32:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8003b36:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b3a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003b3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b42:	1d9a      	adds	r2, r3, #6
 8003b44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b48:	4413      	add	r3, r2
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	0411      	lsls	r1, r2, #16
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	ea44 0300 	orr.w	r3, r4, r0
 8003b62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b66:	ea45 0301 	orr.w	r3, r5, r1
 8003b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b6e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003b72:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b76:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003b7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b7e:	1dda      	adds	r2, r3, #7
 8003b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b84:	4413      	add	r3, r2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	f04f 0000 	mov.w	r0, #0
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	0611      	lsls	r1, r2, #24
 8003b98:	2000      	movs	r0, #0
 8003b9a:	ea44 0300 	orr.w	r3, r4, r0
 8003b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ba2:	ea45 0301 	orr.w	r3, r5, r1
 8003ba6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003baa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003bae:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      this->y = u_y.real;
 8003bb2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bba:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bd4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003bd8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003be0:	4413      	add	r3, r2
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea40 0402 	orr.w	r4, r0, r2
 8003bee:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003bf8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003bfc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c00:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003c04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c0e:	4413      	add	r3, r2
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	0219      	lsls	r1, r3, #8
 8003c22:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003c26:	0210      	lsls	r0, r2, #8
 8003c28:	ea44 0300 	orr.w	r3, r4, r0
 8003c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c30:	ea45 0301 	orr.w	r3, r5, r1
 8003c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c38:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003c3c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c40:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003c44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c48:	1c9a      	adds	r2, r3, #2
 8003c4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c4e:	4413      	add	r3, r2
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	f04f 0000 	mov.w	r0, #0
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	0419      	lsls	r1, r3, #16
 8003c62:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003c66:	0410      	lsls	r0, r2, #16
 8003c68:	ea44 0300 	orr.w	r3, r4, r0
 8003c6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c6e:	ea45 0301 	orr.w	r3, r5, r1
 8003c72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c74:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003c78:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c7c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003c80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c84:	1cda      	adds	r2, r3, #3
 8003c86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c8a:	4413      	add	r3, r2
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	0a14      	lsrs	r4, r2, #8
 8003c96:	677c      	str	r4, [r7, #116]	; 0x74
 8003c98:	0613      	lsls	r3, r2, #24
 8003c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c9c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003ca0:	4623      	mov	r3, r4
 8003ca2:	4303      	orrs	r3, r0
 8003ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cac:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003cb0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003cb4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003cb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003cbc:	1d1a      	adds	r2, r3, #4
 8003cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cc2:	4413      	add	r3, r2
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	0011      	movs	r1, r2
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	ea44 0300 	orr.w	r3, r4, r0
 8003cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cde:	ea45 0301 	orr.w	r3, r5, r1
 8003ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ce4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003ce8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003cec:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003cf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003cf4:	1d5a      	adds	r2, r3, #5
 8003cf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	0211      	lsls	r1, r2, #8
 8003d0e:	2000      	movs	r0, #0
 8003d10:	ea44 0300 	orr.w	r3, r4, r0
 8003d14:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d16:	ea45 0301 	orr.w	r3, r5, r1
 8003d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d1c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003d20:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d24:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003d28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d2c:	1d9a      	adds	r2, r3, #6
 8003d2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d32:	4413      	add	r3, r2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	f04f 0000 	mov.w	r0, #0
 8003d40:	f04f 0100 	mov.w	r1, #0
 8003d44:	0411      	lsls	r1, r2, #16
 8003d46:	2000      	movs	r0, #0
 8003d48:	ea44 0300 	orr.w	r3, r4, r0
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d4e:	ea45 0301 	orr.w	r3, r5, r1
 8003d52:	657b      	str	r3, [r7, #84]	; 0x54
 8003d54:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003d58:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d5c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003d60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d64:	1dda      	adds	r2, r3, #7
 8003d66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d6a:	4413      	add	r3, r2
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	0611      	lsls	r1, r2, #24
 8003d7e:	2000      	movs	r0, #0
 8003d80:	ea44 0300 	orr.w	r3, r4, r0
 8003d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d86:	ea45 0301 	orr.w	r3, r5, r1
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003d90:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      this->z = u_z.real;
 8003d94:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9c:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003da4:	3308      	adds	r3, #8
 8003da6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003db6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003dba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003dbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003dc2:	4413      	add	r3, r2
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	ea40 0402 	orr.w	r4, r0, r2
 8003dd0:	643c      	str	r4, [r7, #64]	; 0x40
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003dda:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003dde:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003de2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003dec:	4413      	add	r3, r2
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	0219      	lsls	r1, r3, #8
 8003e00:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003e04:	0210      	lsls	r0, r2, #8
 8003e06:	ea44 0300 	orr.w	r3, r4, r0
 8003e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e0c:	ea45 0301 	orr.w	r3, r5, r1
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e12:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003e16:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e1a:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003e1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e28:	4413      	add	r3, r2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f04f 0100 	mov.w	r1, #0
 8003e3a:	0419      	lsls	r1, r3, #16
 8003e3c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003e40:	0410      	lsls	r0, r2, #16
 8003e42:	ea44 0300 	orr.w	r3, r4, r0
 8003e46:	633b      	str	r3, [r7, #48]	; 0x30
 8003e48:	ea45 0301 	orr.w	r3, r5, r1
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003e52:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e56:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003e5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e5e:	1cda      	adds	r2, r3, #3
 8003e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e64:	4413      	add	r3, r2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	0a14      	lsrs	r4, r2, #8
 8003e70:	62fc      	str	r4, [r7, #44]	; 0x2c
 8003e72:	0613      	lsls	r3, r2, #24
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e76:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	4303      	orrs	r3, r0
 8003e7e:	623b      	str	r3, [r7, #32]
 8003e80:	462b      	mov	r3, r5
 8003e82:	430b      	orrs	r3, r1
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e8a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003e8e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003e92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e96:	3304      	adds	r3, #4
 8003e98:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003e9c:	4413      	add	r3, r2
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b2dc      	uxtb	r4, r3
 8003ea2:	f04f 0500 	mov.w	r5, #0
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	0023      	movs	r3, r4
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	ea40 0402 	orr.w	r4, r0, r2
 8003eb6:	61bc      	str	r4, [r7, #24]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003ec0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ec4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003ec8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ecc:	3305      	adds	r3, #5
 8003ece:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b2dc      	uxtb	r4, r3
 8003ed8:	f04f 0500 	mov.w	r5, #0
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	0223      	lsls	r3, r4, #8
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	ea40 0402 	orr.w	r4, r0, r2
 8003eec:	613c      	str	r4, [r7, #16]
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ef6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003efa:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f02:	3306      	adds	r3, #6
 8003f04:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2dc      	uxtb	r4, r3
 8003f0e:	f04f 0500 	mov.w	r5, #0
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	0423      	lsls	r3, r4, #16
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	ea40 0402 	orr.w	r4, r0, r2
 8003f22:	60bc      	str	r4, [r7, #8]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f2c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003f30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003f34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f38:	3307      	adds	r3, #7
 8003f3a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003f3e:	4413      	add	r3, r2
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b2dc      	uxtb	r4, r3
 8003f44:	f04f 0500 	mov.w	r5, #0
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	0623      	lsls	r3, r4, #24
 8003f52:	2200      	movs	r2, #0
 8003f54:	ea40 0402 	orr.w	r4, r0, r2
 8003f58:	603c      	str	r4, [r7, #0]
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f62:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      this->w = u_w.real;
 8003f66:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003f6a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003f6e:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003f72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f76:	3308      	adds	r3, #8
 8003f78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     return offset;
 8003f7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    }
 8003f80:	4618      	mov	r0, r3
 8003f82:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003f86:	46bd      	mov	sp, r7
 8003f88:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f8c:	4770      	bx	lr
	...

08003f90 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	0800ee90 	.word	0x0800ee90

08003fac <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	0800eeac 	.word	0x0800eeac

08003fc8 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fd fafe 	bl	80015d4 <_ZN3ros3MsgC1Ev>
 8003fd8:	4a24      	ldr	r2, [pc, #144]	; (800406c <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff f84a 	bl	800307c <_ZN8std_msgs6HeaderC1Ev>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3318      	adds	r3, #24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff f9d9 	bl	80033a4 <_ZN13geometry_msgs10QuaternionC1Ev>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	db08      	blt.n	8004010 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	e9c2 0100 	strd	r0, r1, [r2]
 800400a:	3208      	adds	r2, #8
 800400c:	3b01      	subs	r3, #1
 800400e:	e7f4      	b.n	8003ffa <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3388      	adds	r3, #136	; 0x88
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fb19 	bl	800264c <_ZN13geometry_msgs7Vector3C1Ev>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8004020:	2308      	movs	r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	db08      	blt.n	8004038 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	e9c2 0100 	strd	r0, r1, [r2]
 8004032:	3208      	adds	r2, #8
 8004034:	3b01      	subs	r3, #1
 8004036:	e7f4      	b.n	8004022 <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	33f0      	adds	r3, #240	; 0xf0
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fb05 	bl	800264c <_ZN13geometry_msgs7Vector3C1Ev>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8004048:	2308      	movs	r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	db08      	blt.n	8004060 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 800404e:	f04f 0000 	mov.w	r0, #0
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	e9c2 0100 	strd	r0, r1, [r2]
 800405a:	3208      	adds	r2, #8
 800405c:	3b01      	subs	r3, #1
 800405e:	e7f4      	b.n	800404a <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	0800efc4 	.word	0x0800efc4

08004070 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	; 0x30
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	1d18      	adds	r0, r3, #4
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	4413      	add	r3, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f7ff f817 	bl	80030bc <_ZNK8std_msgs6Header9serializeEPh>
 800408e:	4602      	mov	r2, r0
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	4413      	add	r3, r2
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f103 0018 	add.w	r0, r3, #24
 800409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	4413      	add	r3, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7ff f9ac 	bl	8003400 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	4413      	add	r3, r2
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80040b0:	2300      	movs	r3, #0
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d87e      	bhi.n	80041b8 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	3308      	adds	r3, #8
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 80040cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d2:	6838      	ldr	r0, [r7, #0]
 80040d4:	4401      	add	r1, r0
 80040d6:	b2d3      	uxtb	r3, r2
 80040d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 80040da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	0a02      	lsrs	r2, r0, #8
 80040e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80040ec:	0a0b      	lsrs	r3, r1, #8
 80040ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f0:	3101      	adds	r1, #1
 80040f2:	6838      	ldr	r0, [r7, #0]
 80040f4:	4401      	add	r1, r0
 80040f6:	b2d3      	uxtb	r3, r2
 80040f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 80040fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	0c02      	lsrs	r2, r0, #16
 8004108:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800410c:	0c0b      	lsrs	r3, r1, #16
 800410e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004110:	3102      	adds	r1, #2
 8004112:	6838      	ldr	r0, [r7, #0]
 8004114:	4401      	add	r1, r0
 8004116:	b2d3      	uxtb	r3, r2
 8004118:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 800411a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	0e02      	lsrs	r2, r0, #24
 8004128:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800412c:	0e0b      	lsrs	r3, r1, #24
 800412e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004130:	3103      	adds	r1, #3
 8004132:	6838      	ldr	r0, [r7, #0]
 8004134:	4401      	add	r1, r0
 8004136:	b2d3      	uxtb	r3, r2
 8004138:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 800413a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	000a      	movs	r2, r1
 8004148:	2300      	movs	r3, #0
 800414a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800414c:	3104      	adds	r1, #4
 800414e:	6838      	ldr	r0, [r7, #0]
 8004150:	4401      	add	r1, r0
 8004152:	b2d3      	uxtb	r3, r2
 8004154:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8004156:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	0a0a      	lsrs	r2, r1, #8
 8004164:	2300      	movs	r3, #0
 8004166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004168:	3105      	adds	r1, #5
 800416a:	6838      	ldr	r0, [r7, #0]
 800416c:	4401      	add	r1, r0
 800416e:	b2d3      	uxtb	r3, r2
 8004170:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8004172:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	0c0a      	lsrs	r2, r1, #16
 8004180:	2300      	movs	r3, #0
 8004182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004184:	3106      	adds	r1, #6
 8004186:	6838      	ldr	r0, [r7, #0]
 8004188:	4401      	add	r1, r0
 800418a:	b2d3      	uxtb	r3, r2
 800418c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 800418e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	0e0a      	lsrs	r2, r1, #24
 800419c:	2300      	movs	r3, #0
 800419e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041a0:	3107      	adds	r1, #7
 80041a2:	6838      	ldr	r0, [r7, #0]
 80041a4:	4401      	add	r1, r0
 80041a6:	b2d3      	uxtb	r3, r2
 80041a8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	3308      	adds	r3, #8
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	3301      	adds	r3, #1
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b6:	e77d      	b.n	80040b4 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	4413      	add	r3, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	f7fe fa69 	bl	800269c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80041ca:	4602      	mov	r2, r0
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	4413      	add	r3, r2
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80041d2:	2300      	movs	r3, #0
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d87e      	bhi.n	80042da <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	3315      	adds	r3, #21
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4413      	add	r3, r2
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 80041ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f4:	6838      	ldr	r0, [r7, #0]
 80041f6:	4401      	add	r1, r0
 80041f8:	b2d3      	uxtb	r3, r2
 80041fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 80041fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	0a02      	lsrs	r2, r0, #8
 800420a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800420e:	0a0b      	lsrs	r3, r1, #8
 8004210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004212:	3101      	adds	r1, #1
 8004214:	6838      	ldr	r0, [r7, #0]
 8004216:	4401      	add	r1, r0
 8004218:	b2d3      	uxtb	r3, r2
 800421a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 800421c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	0c02      	lsrs	r2, r0, #16
 800422a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800422e:	0c0b      	lsrs	r3, r1, #16
 8004230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004232:	3102      	adds	r1, #2
 8004234:	6838      	ldr	r0, [r7, #0]
 8004236:	4401      	add	r1, r0
 8004238:	b2d3      	uxtb	r3, r2
 800423a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 800423c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	0e02      	lsrs	r2, r0, #24
 800424a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800424e:	0e0b      	lsrs	r3, r1, #24
 8004250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004252:	3103      	adds	r1, #3
 8004254:	6838      	ldr	r0, [r7, #0]
 8004256:	4401      	add	r1, r0
 8004258:	b2d3      	uxtb	r3, r2
 800425a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 800425c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	000a      	movs	r2, r1
 800426a:	2300      	movs	r3, #0
 800426c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800426e:	3104      	adds	r1, #4
 8004270:	6838      	ldr	r0, [r7, #0]
 8004272:	4401      	add	r1, r0
 8004274:	b2d3      	uxtb	r3, r2
 8004276:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8004278:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	0a0a      	lsrs	r2, r1, #8
 8004286:	2300      	movs	r3, #0
 8004288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800428a:	3105      	adds	r1, #5
 800428c:	6838      	ldr	r0, [r7, #0]
 800428e:	4401      	add	r1, r0
 8004290:	b2d3      	uxtb	r3, r2
 8004292:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8004294:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	0c0a      	lsrs	r2, r1, #16
 80042a2:	2300      	movs	r3, #0
 80042a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a6:	3106      	adds	r1, #6
 80042a8:	6838      	ldr	r0, [r7, #0]
 80042aa:	4401      	add	r1, r0
 80042ac:	b2d3      	uxtb	r3, r2
 80042ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 80042b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	0e0a      	lsrs	r2, r1, #24
 80042be:	2300      	movs	r3, #0
 80042c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c2:	3107      	adds	r1, #7
 80042c4:	6838      	ldr	r0, [r7, #0]
 80042c6:	4401      	add	r1, r0
 80042c8:	b2d3      	uxtb	r3, r2
 80042ca:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	3308      	adds	r3, #8
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	3301      	adds	r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
 80042d8:	e77d      	b.n	80041d6 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	f7fe f9d8 	bl	800269c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	4413      	add	r3, r2
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80042f4:	2300      	movs	r3, #0
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d87e      	bhi.n	80043fc <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	3322      	adds	r3, #34	; 0x22
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8004310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004316:	6838      	ldr	r0, [r7, #0]
 8004318:	4401      	add	r1, r0
 800431a:	b2d3      	uxtb	r3, r2
 800431c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 800431e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	0a02      	lsrs	r2, r0, #8
 800432c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004330:	0a0b      	lsrs	r3, r1, #8
 8004332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004334:	3101      	adds	r1, #1
 8004336:	6838      	ldr	r0, [r7, #0]
 8004338:	4401      	add	r1, r0
 800433a:	b2d3      	uxtb	r3, r2
 800433c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 800433e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	0c02      	lsrs	r2, r0, #16
 800434c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004350:	0c0b      	lsrs	r3, r1, #16
 8004352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004354:	3102      	adds	r1, #2
 8004356:	6838      	ldr	r0, [r7, #0]
 8004358:	4401      	add	r1, r0
 800435a:	b2d3      	uxtb	r3, r2
 800435c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 800435e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	0e02      	lsrs	r2, r0, #24
 800436c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004370:	0e0b      	lsrs	r3, r1, #24
 8004372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004374:	3103      	adds	r1, #3
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	4401      	add	r1, r0
 800437a:	b2d3      	uxtb	r3, r2
 800437c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 800437e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	000a      	movs	r2, r1
 800438c:	2300      	movs	r3, #0
 800438e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004390:	3104      	adds	r1, #4
 8004392:	6838      	ldr	r0, [r7, #0]
 8004394:	4401      	add	r1, r0
 8004396:	b2d3      	uxtb	r3, r2
 8004398:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 800439a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	0a0a      	lsrs	r2, r1, #8
 80043a8:	2300      	movs	r3, #0
 80043aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ac:	3105      	adds	r1, #5
 80043ae:	6838      	ldr	r0, [r7, #0]
 80043b0:	4401      	add	r1, r0
 80043b2:	b2d3      	uxtb	r3, r2
 80043b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 80043b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	0c0a      	lsrs	r2, r1, #16
 80043c4:	2300      	movs	r3, #0
 80043c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c8:	3106      	adds	r1, #6
 80043ca:	6838      	ldr	r0, [r7, #0]
 80043cc:	4401      	add	r1, r0
 80043ce:	b2d3      	uxtb	r3, r2
 80043d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 80043d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	0e0a      	lsrs	r2, r1, #24
 80043e0:	2300      	movs	r3, #0
 80043e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e4:	3107      	adds	r1, #7
 80043e6:	6838      	ldr	r0, [r7, #0]
 80043e8:	4401      	add	r1, r0
 80043ea:	b2d3      	uxtb	r3, r2
 80043ec:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	3308      	adds	r3, #8
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	3301      	adds	r3, #1
 80043f8:	623b      	str	r3, [r7, #32]
 80043fa:	e77d      	b.n	80042f8 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80043fe:	4618      	mov	r0, r3
 8004400:	3730      	adds	r7, #48	; 0x30
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004406:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800440a:	b0be      	sub	sp, #248	; 0xf8
 800440c:	af00      	add	r7, sp, #0
 800440e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8004412:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->header.deserialize(inbuffer + offset);
 800441c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004420:	1d18      	adds	r0, r3, #4
 8004422:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800442a:	4413      	add	r3, r2
 800442c:	4619      	mov	r1, r3
 800442e:	f7fe fedd 	bl	80031ec <_ZN8std_msgs6Header11deserializeEPh>
 8004432:	4602      	mov	r2, r0
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	4413      	add	r3, r2
 800443a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->orientation.deserialize(inbuffer + offset);
 800443e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004442:	f103 0018 	add.w	r0, r3, #24
 8004446:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800444a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800444e:	4413      	add	r3, r2
 8004450:	4619      	mov	r1, r3
 8004452:	f7ff f9bf 	bl	80037d4 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004456:	4602      	mov	r2, r0
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445c:	4413      	add	r3, r2
 800445e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004462:	2300      	movs	r3, #0
 8004464:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004468:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800446c:	2b08      	cmp	r3, #8
 800446e:	f200 8100 	bhi.w	8004672 <_ZN11sensor_msgs3Imu11deserializeEPh+0x26c>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800447e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004482:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	ea40 0402 	orr.w	r4, r0, r2
 8004498:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800449c:	430b      	orrs	r3, r1
 800449e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044a2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80044a6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80044aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044b8:	4413      	add	r3, r2
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	0219      	lsls	r1, r3, #8
 80044cc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80044d0:	0210      	lsls	r0, r2, #8
 80044d2:	ea44 0300 	orr.w	r3, r4, r0
 80044d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044da:	ea45 0301 	orr.w	r3, r5, r1
 80044de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80044e2:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80044e6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	1c9a      	adds	r2, r3, #2
 80044f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044f8:	4413      	add	r3, r2
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	0419      	lsls	r1, r3, #16
 800450c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004510:	0410      	lsls	r0, r2, #16
 8004512:	ea44 0300 	orr.w	r3, r4, r0
 8004516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800451a:	ea45 0301 	orr.w	r3, r5, r1
 800451e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004522:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004526:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800452a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	1cda      	adds	r2, r3, #3
 8004534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004538:	4413      	add	r3, r2
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004546:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800454a:	ea40 0308 	orr.w	r3, r0, r8
 800454e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004552:	ea41 0309 	orr.w	r3, r1, r9
 8004556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800455a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800455e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004562:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456a:	1d1a      	adds	r2, r3, #4
 800456c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004570:	4413      	add	r3, r2
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	f04f 0000 	mov.w	r0, #0
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	0011      	movs	r1, r2
 8004584:	2000      	movs	r0, #0
 8004586:	ea44 0300 	orr.w	r3, r4, r0
 800458a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800458e:	ea45 0301 	orr.w	r3, r5, r1
 8004592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004596:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800459a:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800459e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	1d5a      	adds	r2, r3, #5
 80045a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045ac:	4413      	add	r3, r2
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	f04f 0000 	mov.w	r0, #0
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	0211      	lsls	r1, r2, #8
 80045c0:	2000      	movs	r0, #0
 80045c2:	ea44 0300 	orr.w	r3, r4, r0
 80045c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045ca:	ea45 0301 	orr.w	r3, r5, r1
 80045ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045d2:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80045d6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80045da:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	1d9a      	adds	r2, r3, #6
 80045e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045e8:	4413      	add	r3, r2
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	0411      	lsls	r1, r2, #16
 80045fc:	2000      	movs	r0, #0
 80045fe:	ea44 0300 	orr.w	r3, r4, r0
 8004602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004606:	ea45 0301 	orr.w	r3, r5, r1
 800460a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800460e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8004612:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004616:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	1dda      	adds	r2, r3, #7
 8004620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004624:	4413      	add	r3, r2
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	f04f 0000 	mov.w	r0, #0
 8004632:	f04f 0100 	mov.w	r1, #0
 8004636:	0611      	lsls	r1, r2, #24
 8004638:	2000      	movs	r0, #0
 800463a:	ea44 0a00 	orr.w	sl, r4, r0
 800463e:	ea45 0b01 	orr.w	fp, r5, r1
 8004642:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004646:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800464a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800464e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004652:	3308      	adds	r3, #8
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	3308      	adds	r3, #8
 8004662:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004666:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800466a:	3301      	adds	r3, #1
 800466c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004670:	e6fa      	b.n	8004468 <_ZN11sensor_msgs3Imu11deserializeEPh+0x62>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004676:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800467a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800467e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004682:	4413      	add	r3, r2
 8004684:	4619      	mov	r1, r3
 8004686:	f7fe f97c 	bl	8002982 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800468a:	4602      	mov	r2, r0
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	4413      	add	r3, r2
 8004692:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800469c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	f200 80fc 	bhi.w	800489e <_ZN11sensor_msgs3Imu11deserializeEPh+0x498>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046b2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80046b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80046ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046be:	4413      	add	r3, r2
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	ea40 0402 	orr.w	r4, r0, r2
 80046cc:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80046d0:	430b      	orrs	r3, r1
 80046d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80046d6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80046da:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80046de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	f04f 0000 	mov.w	r0, #0
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	0219      	lsls	r1, r3, #8
 8004700:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004704:	0210      	lsls	r0, r2, #8
 8004706:	ea44 0300 	orr.w	r3, r4, r0
 800470a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800470e:	ea45 0301 	orr.w	r3, r5, r1
 8004712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004716:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800471a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800471e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004726:	1c9a      	adds	r2, r3, #2
 8004728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800472c:	4413      	add	r3, r2
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	f04f 0000 	mov.w	r0, #0
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	0419      	lsls	r1, r3, #16
 8004740:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004744:	0410      	lsls	r0, r2, #16
 8004746:	ea44 0300 	orr.w	r3, r4, r0
 800474a:	67bb      	str	r3, [r7, #120]	; 0x78
 800474c:	ea45 0301 	orr.w	r3, r5, r1
 8004750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004752:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004756:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800475a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	1cda      	adds	r2, r3, #3
 8004764:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004768:	4413      	add	r3, r2
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b2da      	uxtb	r2, r3
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	0a14      	lsrs	r4, r2, #8
 8004774:	677c      	str	r4, [r7, #116]	; 0x74
 8004776:	0613      	lsls	r3, r2, #24
 8004778:	673b      	str	r3, [r7, #112]	; 0x70
 800477a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800477e:	4623      	mov	r3, r4
 8004780:	4303      	orrs	r3, r0
 8004782:	66bb      	str	r3, [r7, #104]	; 0x68
 8004784:	462b      	mov	r3, r5
 8004786:	430b      	orrs	r3, r1
 8004788:	66fb      	str	r3, [r7, #108]	; 0x6c
 800478a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800478e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004792:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479a:	1d1a      	adds	r2, r3, #4
 800479c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047a0:	4413      	add	r3, r2
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	f04f 0000 	mov.w	r0, #0
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	0011      	movs	r1, r2
 80047b4:	2000      	movs	r0, #0
 80047b6:	ea44 0300 	orr.w	r3, r4, r0
 80047ba:	663b      	str	r3, [r7, #96]	; 0x60
 80047bc:	ea45 0301 	orr.w	r3, r5, r1
 80047c0:	667b      	str	r3, [r7, #100]	; 0x64
 80047c2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80047c6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80047ca:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	1d5a      	adds	r2, r3, #5
 80047d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047d8:	4413      	add	r3, r2
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f04f 0100 	mov.w	r1, #0
 80047ea:	0211      	lsls	r1, r2, #8
 80047ec:	2000      	movs	r0, #0
 80047ee:	ea44 0300 	orr.w	r3, r4, r0
 80047f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f4:	ea45 0301 	orr.w	r3, r5, r1
 80047f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047fa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80047fe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004802:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	1d9a      	adds	r2, r3, #6
 800480c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004810:	4413      	add	r3, r2
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	f04f 0000 	mov.w	r0, #0
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	0411      	lsls	r1, r2, #16
 8004824:	2000      	movs	r0, #0
 8004826:	ea44 0300 	orr.w	r3, r4, r0
 800482a:	653b      	str	r3, [r7, #80]	; 0x50
 800482c:	ea45 0301 	orr.w	r3, r5, r1
 8004830:	657b      	str	r3, [r7, #84]	; 0x54
 8004832:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004836:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800483a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004842:	1dda      	adds	r2, r3, #7
 8004844:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004848:	4413      	add	r3, r2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	0611      	lsls	r1, r2, #24
 800485c:	2000      	movs	r0, #0
 800485e:	ea44 0300 	orr.w	r3, r4, r0
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
 8004864:	ea45 0301 	orr.w	r3, r5, r1
 8004868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800486a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800486e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8004872:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004876:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800487a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800487e:	3315      	adds	r3, #21
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	3308      	adds	r3, #8
 800488e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004892:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004896:	3301      	adds	r3, #1
 8004898:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800489c:	e6fe      	b.n	800469c <_ZN11sensor_msgs3Imu11deserializeEPh+0x296>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 800489e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048a2:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80048a6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80048aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048ae:	4413      	add	r3, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f7fe f866 	bl	8002982 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80048b6:	4602      	mov	r2, r0
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	4413      	add	r3, r2
 80048be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 80048c2:	2300      	movs	r3, #0
 80048c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	f200 80f8 	bhi.w	8004ac2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x6bc>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80048de:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80048e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80048e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048ea:	4413      	add	r3, r2
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	ea40 0402 	orr.w	r4, r0, r2
 80048f8:	643c      	str	r4, [r7, #64]	; 0x40
 80048fa:	430b      	orrs	r3, r1
 80048fc:	647b      	str	r3, [r7, #68]	; 0x44
 80048fe:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004902:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004906:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004914:	4413      	add	r3, r2
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	f04f 0000 	mov.w	r0, #0
 8004922:	f04f 0100 	mov.w	r1, #0
 8004926:	0219      	lsls	r1, r3, #8
 8004928:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800492c:	0210      	lsls	r0, r2, #8
 800492e:	ea44 0300 	orr.w	r3, r4, r0
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
 8004934:	ea45 0301 	orr.w	r3, r5, r1
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800493a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800493e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004942:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004950:	4413      	add	r3, r2
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b2da      	uxtb	r2, r3
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	f04f 0000 	mov.w	r0, #0
 800495e:	f04f 0100 	mov.w	r1, #0
 8004962:	0419      	lsls	r1, r3, #16
 8004964:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004968:	0410      	lsls	r0, r2, #16
 800496a:	ea44 0300 	orr.w	r3, r4, r0
 800496e:	633b      	str	r3, [r7, #48]	; 0x30
 8004970:	ea45 0301 	orr.w	r3, r5, r1
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
 8004976:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800497a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800497e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	1cda      	adds	r2, r3, #3
 8004988:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800498c:	4413      	add	r3, r2
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	0a14      	lsrs	r4, r2, #8
 8004998:	62fc      	str	r4, [r7, #44]	; 0x2c
 800499a:	0613      	lsls	r3, r2, #24
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
 800499e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80049a2:	4623      	mov	r3, r4
 80049a4:	4303      	orrs	r3, r0
 80049a6:	623b      	str	r3, [r7, #32]
 80049a8:	462b      	mov	r3, r5
 80049aa:	430b      	orrs	r3, r1
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
 80049ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80049b2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80049b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c4:	4413      	add	r3, r2
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	f04f 0000 	mov.w	r0, #0
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	0011      	movs	r1, r2
 80049d8:	2000      	movs	r0, #0
 80049da:	ea44 0300 	orr.w	r3, r4, r0
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	ea45 0301 	orr.w	r3, r5, r1
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80049ea:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80049ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f6:	1d5a      	adds	r2, r3, #5
 80049f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	f04f 0000 	mov.w	r0, #0
 8004a0a:	f04f 0100 	mov.w	r1, #0
 8004a0e:	0211      	lsls	r1, r2, #8
 8004a10:	2000      	movs	r0, #0
 8004a12:	ea44 0300 	orr.w	r3, r4, r0
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	ea45 0301 	orr.w	r3, r5, r1
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004a22:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004a26:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	1d9a      	adds	r2, r3, #6
 8004a30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a34:	4413      	add	r3, r2
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	f04f 0000 	mov.w	r0, #0
 8004a42:	f04f 0100 	mov.w	r1, #0
 8004a46:	0411      	lsls	r1, r2, #16
 8004a48:	2000      	movs	r0, #0
 8004a4a:	ea44 0300 	orr.w	r3, r4, r0
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	ea45 0301 	orr.w	r3, r5, r1
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004a5a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004a5e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	1dda      	adds	r2, r3, #7
 8004a68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a6c:	4413      	add	r3, r2
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	0611      	lsls	r1, r2, #24
 8004a80:	2000      	movs	r0, #0
 8004a82:	ea44 0300 	orr.w	r3, r4, r0
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	ea45 0301 	orr.w	r3, r5, r1
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004a92:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8004a96:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a9a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004a9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aa2:	3322      	adds	r3, #34	; 0x22
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aba:	3301      	adds	r3, #1
 8004abc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ac0:	e702      	b.n	80048c8 <_ZN11sensor_msgs3Imu11deserializeEPh+0x4c2>
      }
     return offset;
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    }
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	37f8      	adds	r7, #248	; 0xf8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ad0 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	0800eed0 	.word	0x0800eed0

08004aec <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	0800eee0 	.word	0x0800eee0

08004b08 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	0800f06c 	.word	0x0800f06c

08004b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ffe8 	bl	8004b08 <_ZN3ros15NodeHandleBase_C1Ev>
 8004b38:	4a36      	ldr	r2, [pc, #216]	; (8004c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd fbd0 	bl	80022e8 <_ZN13STM32HardwareC1Ev>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b72:	2100      	movs	r1, #0
 8004b74:	4618      	mov	r0, r3
 8004b76:	f005 fc21 	bl	800a3bc <memset>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f005 fc18 	bl	800a3bc <memset>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004b92:	2264      	movs	r2, #100	; 0x64
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f005 fc10 	bl	800a3bc <memset>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8004ba2:	2264      	movs	r2, #100	; 0x64
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f005 fc08 	bl	800a3bc <memset>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd f85a 	bl	8001cbc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	0800efb0 	.word	0x0800efb0

08004c18 <HAL_UART_TxCpltCallback>:
//Subscriber and Publisher Velocity
geometry_msgs::Twist raw_vel_msg;
ros::Publisher raw_vel_pub("raw_vel",&raw_vel_msg);
ros::Subscriber<geometry_msgs::Twist> sub_vel("cmd_vel", messageCb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8004c20:	4805      	ldr	r0, [pc, #20]	; (8004c38 <HAL_UART_TxCpltCallback+0x20>)
 8004c22:	f000 fa4d 	bl	80050c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fd fbc3 	bl	80023b4 <_ZN13STM32Hardware5flushEv>
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	200002f4 	.word	0x200002f4

08004c3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8004c44:	4832      	ldr	r0, [pc, #200]	; (8004d10 <HAL_UART_RxCpltCallback+0xd4>)
 8004c46:	f000 fa3b 	bl	80050c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fd fb72 	bl	8002336 <_ZN13STM32Hardware10reset_rbufEv>
  if(huart->Instance == USART3)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2f      	ldr	r2, [pc, #188]	; (8004d14 <HAL_UART_RxCpltCallback+0xd8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d150      	bne.n	8004cfe <HAL_UART_RxCpltCallback+0xc2>
  	{
  		if(pData != 'A')
 8004c5c:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b41      	cmp	r3, #65	; 0x41
 8004c62:	d01e      	beq.n	8004ca2 <HAL_UART_RxCpltCallback+0x66>
  		{
  			if(pData != 'B')
 8004c64:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b42      	cmp	r3, #66	; 0x42
 8004c6a:	d01a      	beq.n	8004ca2 <HAL_UART_RxCpltCallback+0x66>
  			{
  				if((pData >= 46 && pData <= 57) || pData == 32 || pData == 45)
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b2d      	cmp	r3, #45	; 0x2d
 8004c72:	d903      	bls.n	8004c7c <HAL_UART_RxCpltCallback+0x40>
 8004c74:	4b28      	ldr	r3, [pc, #160]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b39      	cmp	r3, #57	; 0x39
 8004c7a:	d907      	bls.n	8004c8c <HAL_UART_RxCpltCallback+0x50>
 8004c7c:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d003      	beq.n	8004c8c <HAL_UART_RxCpltCallback+0x50>
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b2d      	cmp	r3, #45	; 0x2d
 8004c8a:	d10a      	bne.n	8004ca2 <HAL_UART_RxCpltCallback+0x66>
  				{
  					dataTX[i] = pData;
 8004c8c:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <HAL_UART_RxCpltCallback+0xe0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004c92:	7811      	ldrb	r1, [r2, #0]
 8004c94:	4a22      	ldr	r2, [pc, #136]	; (8004d20 <HAL_UART_RxCpltCallback+0xe4>)
 8004c96:	54d1      	strb	r1, [r2, r3]
  					i++;
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <HAL_UART_RxCpltCallback+0xe0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <HAL_UART_RxCpltCallback+0xe0>)
 8004ca0:	6013      	str	r3, [r2, #0]
  				}
  			}
  		}

  		if(pData == 'B')
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b42      	cmp	r3, #66	; 0x42
 8004ca8:	d129      	bne.n	8004cfe <HAL_UART_RxCpltCallback+0xc2>
  		{
  			i = 0;
 8004caa:	4b1c      	ldr	r3, [pc, #112]	; (8004d1c <HAL_UART_RxCpltCallback+0xe0>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
  			char *ptr;
  			ptr = strtok(dataTX," ");
 8004cb0:	491c      	ldr	r1, [pc, #112]	; (8004d24 <HAL_UART_RxCpltCallback+0xe8>)
 8004cb2:	481b      	ldr	r0, [pc, #108]	; (8004d20 <HAL_UART_RxCpltCallback+0xe4>)
 8004cb4:	f007 f8b0 	bl	800be18 <strtok>
 8004cb8:	60f8      	str	r0, [r7, #12]
  			while(ptr != NULL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01e      	beq.n	8004cfe <HAL_UART_RxCpltCallback+0xc2>
  			{
  				num[j] = atof(ptr);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f005 fb3f 	bl	800a344 <atof>
 8004cc6:	ec51 0b10 	vmov	r0, r1, d0
 8004cca:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <HAL_UART_RxCpltCallback+0xec>)
 8004ccc:	681c      	ldr	r4, [r3, #0]
 8004cce:	f7fb ff8b 	bl	8000be8 <__aeabi_d2f>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4915      	ldr	r1, [pc, #84]	; (8004d2c <HAL_UART_RxCpltCallback+0xf0>)
 8004cd6:	00a3      	lsls	r3, r4, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	601a      	str	r2, [r3, #0]
  				ptr = strtok(NULL," ");
 8004cdc:	4911      	ldr	r1, [pc, #68]	; (8004d24 <HAL_UART_RxCpltCallback+0xe8>)
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f007 f89a 	bl	800be18 <strtok>
 8004ce4:	60f8      	str	r0, [r7, #12]
  				j++;
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <HAL_UART_RxCpltCallback+0xec>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <HAL_UART_RxCpltCallback+0xec>)
 8004cee:	6013      	str	r3, [r2, #0]
  				if(j == 10)
 8004cf0:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <HAL_UART_RxCpltCallback+0xec>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b0a      	cmp	r3, #10
 8004cf6:	d1e0      	bne.n	8004cba <HAL_UART_RxCpltCallback+0x7e>
  				{
  					j = 0;
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_UART_RxCpltCallback+0xec>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
  					break;
  				}
  			}
  		}
  	}
  	HAL_UART_Receive_IT(&huart3, &pData, 1);
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4905      	ldr	r1, [pc, #20]	; (8004d18 <HAL_UART_RxCpltCallback+0xdc>)
 8004d02:	480b      	ldr	r0, [pc, #44]	; (8004d30 <HAL_UART_RxCpltCallback+0xf4>)
 8004d04:	f004 f9b9 	bl	800907a <HAL_UART_Receive_IT>
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd90      	pop	{r4, r7, pc}
 8004d10:	200002f4 	.word	0x200002f4
 8004d14:	40004800 	.word	0x40004800
 8004d18:	20000268 	.word	0x20000268
 8004d1c:	200002d4 	.word	0x200002d4
 8004d20:	2000026c 	.word	0x2000026c
 8004d24:	0800ef04 	.word	0x0800ef04
 8004d28:	200002d8 	.word	0x200002d8
 8004d2c:	200002ac 	.word	0x200002ac
 8004d30:	20000f44 	.word	0x20000f44

08004d34 <setup>:

void setup(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  nh.initNode();
 8004d38:	480a      	ldr	r0, [pc, #40]	; (8004d64 <setup+0x30>)
 8004d3a:	f000 f9cd 	bl	80050d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(sub_vel);
 8004d3e:	490a      	ldr	r1, [pc, #40]	; (8004d68 <setup+0x34>)
 8004d40:	4808      	ldr	r0, [pc, #32]	; (8004d64 <setup+0x30>)
 8004d42:	f000 f9e6 	bl	8005112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.advertise(raw_vel_pub);
 8004d46:	4909      	ldr	r1, [pc, #36]	; (8004d6c <setup+0x38>)
 8004d48:	4806      	ldr	r0, [pc, #24]	; (8004d64 <setup+0x30>)
 8004d4a:	f000 fa0d 	bl	8005168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(chatter);
 8004d4e:	4908      	ldr	r1, [pc, #32]	; (8004d70 <setup+0x3c>)
 8004d50:	4804      	ldr	r0, [pc, #16]	; (8004d64 <setup+0x30>)
 8004d52:	f000 fa09 	bl	8005168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_imu);
 8004d56:	4907      	ldr	r1, [pc, #28]	; (8004d74 <setup+0x40>)
 8004d58:	4802      	ldr	r0, [pc, #8]	; (8004d64 <setup+0x30>)
 8004d5a:	f000 fa05 	bl	8005168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	200002f4 	.word	0x200002f4
 8004d68:	20000e18 	.word	0x20000e18
 8004d6c:	20000e00 	.word	0x20000e00
 8004d70:	20000d90 	.word	0x20000d90
 8004d74:	20000da4 	.word	0x20000da4

08004d78 <_Z9messageCbRKN13geometry_msgs5TwistE>:

	nh.spinOnce();
}

void messageCb( const geometry_msgs::Twist& cmd_msg)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
	vxRE = cmd_msg.linear.x; //rad/s
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d86:	490e      	ldr	r1, [pc, #56]	; (8004dc0 <_Z9messageCbRKN13geometry_msgs5TwistE+0x48>)
 8004d88:	e9c1 2300 	strd	r2, r3, [r1]
	wzRE = cmd_msg.angular.z; //rad/s
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004d92:	490c      	ldr	r1, [pc, #48]	; (8004dc4 <_Z9messageCbRKN13geometry_msgs5TwistE+0x4c>)
 8004d94:	e9c1 2300 	strd	r2, r3, [r1]
	convert_vel_linear_and_angular_to_vel_linear_2_wheel(vxRE,wzRE);
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <_Z9messageCbRKN13geometry_msgs5TwistE+0x48>)
 8004d9a:	ed93 7b00 	vldr	d7, [r3]
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <_Z9messageCbRKN13geometry_msgs5TwistE+0x4c>)
 8004da0:	ed93 6b00 	vldr	d6, [r3]
 8004da4:	eeb0 1a46 	vmov.f32	s2, s12
 8004da8:	eef0 1a66 	vmov.f32	s3, s13
 8004dac:	eeb0 0a47 	vmov.f32	s0, s14
 8004db0:	eef0 0a67 	vmov.f32	s1, s15
 8004db4:	f000 f808 	bl	8004dc8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd>
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200002e0 	.word	0x200002e0
 8004dc4:	200002e8 	.word	0x200002e8

08004dc8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd>:

void convert_vel_linear_and_angular_to_vel_linear_2_wheel(double Vx, double Wz)
{
 8004dc8:	b5b0      	push	{r4, r5, r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	ed87 0b02 	vstr	d0, [r7, #8]
 8004dd2:	ed87 1b00 	vstr	d1, [r7]
	g_vel_angular_right = (((2*Vx + Wz*LENGTH_BETWEEN_2_WHEEL)/(2*WHEEL_RADIUS))/WHEEL_RADIUS)/haiPI;  //vòng/giây
 8004dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	f7fb fa55 	bl	800028c <__adddf3>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4614      	mov	r4, r2
 8004de8:	461d      	mov	r5, r3
 8004dea:	a335      	add	r3, pc, #212	; (adr r3, 8004ec0 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0xf8>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df4:	f7fb fc00 	bl	80005f8 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7fb fa44 	bl	800028c <__adddf3>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	a32e      	add	r3, pc, #184	; (adr r3, 8004ec8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0x100>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	f7fb fd1b 	bl	800084c <__aeabi_ddiv>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	a32c      	add	r3, pc, #176	; (adr r3, 8004ed0 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0x108>)
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f7fb fd12 	bl	800084c <__aeabi_ddiv>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	a329      	add	r3, pc, #164	; (adr r3, 8004ed8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0x110>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f7fb fd09 	bl	800084c <__aeabi_ddiv>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4928      	ldr	r1, [pc, #160]	; (8004ee0 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0x118>)
 8004e40:	e9c1 2300 	strd	r2, r3, [r1]
	g_vel_angular_left = (((2*Vx - Wz*LENGTH_BETWEEN_2_WHEEL)/(2*WHEEL_RADIUS))/WHEEL_RADIUS)/haiPI;   //vòng/giây
 8004e44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	f7fb fa1e 	bl	800028c <__adddf3>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	a319      	add	r3, pc, #100	; (adr r3, 8004ec0 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0xf8>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e62:	f7fb fbc9 	bl	80005f8 <__aeabi_dmul>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7fb fa0b 	bl	8000288 <__aeabi_dsub>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	a313      	add	r3, pc, #76	; (adr r3, 8004ec8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0x100>)
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f7fb fce4 	bl	800084c <__aeabi_ddiv>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	a310      	add	r3, pc, #64	; (adr r3, 8004ed0 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0x108>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f7fb fcdb 	bl	800084c <__aeabi_ddiv>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	a30e      	add	r3, pc, #56	; (adr r3, 8004ed8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0x110>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f7fb fcd2 	bl	800084c <__aeabi_ddiv>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	490d      	ldr	r1, [pc, #52]	; (8004ee4 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0x11c>)
 8004eae:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	f3af 8000 	nop.w
 8004ec0:	4dd2f1aa 	.word	0x4dd2f1aa
 8004ec4:	3fd81062 	.word	0x3fd81062
 8004ec8:	851eb852 	.word	0x851eb852
 8004ecc:	3fb851eb 	.word	0x3fb851eb
 8004ed0:	851eb852 	.word	0x851eb852
 8004ed4:	3fa851eb 	.word	0x3fa851eb
 8004ed8:	54411744 	.word	0x54411744
 8004edc:	401921fb 	.word	0x401921fb
 8004ee0:	20000260 	.word	0x20000260
 8004ee4:	20000258 	.word	0x20000258

08004ee8 <HAL_GPIO_EXTI_Callback>:
	vx = (WHEEL_RADIUS/2)*(g_vel_angular_right + g_vel_angular_left)*haiPI*WHEEL_RADIUS; //rad/s
	wz = (WHEEL_RADIUS/2)*(g_vel_angular_right - g_vel_angular_left)*haiPI*WHEEL_RADIUS; //rad/s
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10)
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d11b      	bne.n	8004f32 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		HAL_Delay(20);
 8004efa:	2014      	movs	r0, #20
 8004efc:	f001 fc58 	bl	80067b0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 8004f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f04:	482c      	ldr	r0, [pc, #176]	; (8004fb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004f06:	f002 fb27 	bl	8007558 <HAL_GPIO_ReadPin>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d04a      	beq.n	8004fb0 <HAL_GPIO_EXTI_Callback+0xc8>
		{
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8004f1a:	2140      	movs	r1, #64	; 0x40
 8004f1c:	4826      	ldr	r0, [pc, #152]	; (8004fb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004f1e:	f002 fb4c 	bl	80075ba <HAL_GPIO_TogglePin>
			  str_msg.data = button1;
 8004f22:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8004f24:	4a26      	ldr	r2, [pc, #152]	; (8004fc0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8004f26:	605a      	str	r2, [r3, #4]
			  chatter.publish(&str_msg);
 8004f28:	4924      	ldr	r1, [pc, #144]	; (8004fbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8004f2a:	4826      	ldr	r0, [pc, #152]	; (8004fc4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8004f2c:	f7fd f9a9 	bl	8002282 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
			  str_msg.data = button3;
			  chatter.publish(&str_msg);
		}
	}
}
 8004f30:	e03e      	b.n	8004fb0 <HAL_GPIO_EXTI_Callback+0xc8>
	else if(GPIO_Pin == GPIO_PIN_11)
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f38:	d11b      	bne.n	8004f72 <HAL_GPIO_EXTI_Callback+0x8a>
		HAL_Delay(20);
 8004f3a:	2014      	movs	r0, #20
 8004f3c:	f001 fc38 	bl	80067b0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)
 8004f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f44:	481c      	ldr	r0, [pc, #112]	; (8004fb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004f46:	f002 fb07 	bl	8007558 <HAL_GPIO_ReadPin>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d02a      	beq.n	8004fb0 <HAL_GPIO_EXTI_Callback+0xc8>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8004f5a:	2140      	movs	r1, #64	; 0x40
 8004f5c:	4816      	ldr	r0, [pc, #88]	; (8004fb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004f5e:	f002 fb2c 	bl	80075ba <HAL_GPIO_TogglePin>
			  str_msg.data = button2;
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8004f64:	4a18      	ldr	r2, [pc, #96]	; (8004fc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004f66:	605a      	str	r2, [r3, #4]
			  chatter.publish(&str_msg);
 8004f68:	4914      	ldr	r1, [pc, #80]	; (8004fbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8004f6a:	4816      	ldr	r0, [pc, #88]	; (8004fc4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8004f6c:	f7fd f989 	bl	8002282 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8004f70:	e01e      	b.n	8004fb0 <HAL_GPIO_EXTI_Callback+0xc8>
	else if(GPIO_Pin == GPIO_PIN_12)
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f78:	d11a      	bne.n	8004fb0 <HAL_GPIO_EXTI_Callback+0xc8>
		HAL_Delay(20);
 8004f7a:	2014      	movs	r0, #20
 8004f7c:	f001 fc18 	bl	80067b0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0)
 8004f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f84:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004f86:	f002 fae7 	bl	8007558 <HAL_GPIO_ReadPin>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_GPIO_EXTI_Callback+0xc8>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8004f9a:	2140      	movs	r1, #64	; 0x40
 8004f9c:	4806      	ldr	r0, [pc, #24]	; (8004fb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8004f9e:	f002 fb0c 	bl	80075ba <HAL_GPIO_TogglePin>
			  str_msg.data = button3;
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8004fa4:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8004fa6:	605a      	str	r2, [r3, #4]
			  chatter.publish(&str_msg);
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <HAL_GPIO_EXTI_Callback+0xd4>)
 8004faa:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8004fac:	f7fd f969 	bl	8002282 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40020000 	.word	0x40020000
 8004fbc:	20000d88 	.word	0x20000d88
 8004fc0:	20000000 	.word	0x20000000
 8004fc4:	20000d90 	.word	0x20000d90
 8004fc8:	2000000c 	.word	0x2000000c
 8004fcc:	20000018 	.word	0x20000018

08004fd0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d80d      	bhi.n	8005000 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	fa22 f103 	lsr.w	r1, r2, r3
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	b2ca      	uxtb	r2, r1
 8004ff6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e7ee      	b.n	8004fde <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b03      	cmp	r3, #3
 8005024:	d811      	bhi.n	800504a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	440a      	add	r2, r1
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	4611      	mov	r1, r2
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	00d2      	lsls	r2, r2, #3
 8005038:	fa01 f202 	lsl.w	r2, r1, r2
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3301      	adds	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	e7ea      	b.n	8005020 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	0800f054 	.word	0x0800f054

08005078 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ffe5 	bl	8005058 <_ZN3ros11Subscriber_C1Ev>
 800508e:	4a0b      	ldr	r2, [pc, #44]	; (80050bc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3310      	adds	r3, #16
 8005098:	4618      	mov	r0, r3
 800509a:	f7fd ff6b 	bl	8002f74 <_ZN13geometry_msgs5TwistC1Ev>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	659a      	str	r2, [r3, #88]	; 0x58
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	609a      	str	r2, [r3, #8]
  };
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	0800ef98 	.word	0x0800ef98

080050c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
  }
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fd f91b 	bl	8002320 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b18      	cmp	r3, #24
 8005124:	dc19      	bgt.n	800515a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10d      	bne.n	8005152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	605a      	str	r2, [r3, #4]
        return true;
 800514e:	2301      	movs	r3, #1
 8005150:	e004      	b.n	800515c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3301      	adds	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e7e2      	b.n	8005120 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800515a:	2300      	movs	r3, #0
  }
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b18      	cmp	r3, #24
 800517a:	dc1e      	bgt.n	80051ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d111      	bne.n	80051b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	60da      	str	r2, [r3, #12]
        return true;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e004      	b.n	80051bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3301      	adds	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e7dd      	b.n	8005176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80051ba:	2300      	movs	r3, #0
  }
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fd f991 	bl	80024fc <_ZN13STM32Hardware4timeEv>
 80051da:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d903      	bls.n	80051f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800521a:	2b00      	cmp	r3, #0
 800521c:	d014      	beq.n	8005248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	4618      	mov	r0, r3
 8005224:	f7fd f96a 	bl	80024fc <_ZN13STM32Hardware4timeEv>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad2      	subs	r2, r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005234:	429a      	cmp	r2, r3
 8005236:	bf8c      	ite	hi
 8005238:	2301      	movhi	r3, #1
 800523a:	2300      	movls	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8005242:	f06f 0301 	mvn.w	r3, #1
 8005246:	e194      	b.n	8005572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f7fd f883 	bl	8002358 <_ZN13STM32Hardware4readEv>
 8005252:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f2c0 8174 	blt.w	8005544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	441a      	add	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005272:	2b07      	cmp	r3, #7
 8005274:	d11e      	bne.n	80052b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	b2d1      	uxtb	r1, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	460a      	mov	r2, r1
 800528e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005298:	1e5a      	subs	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1b4      	bne.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2208      	movs	r2, #8
 80052ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80052b2:	e7af      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d128      	bne.n	8005310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2bff      	cmp	r3, #255	; 0xff
 80052c2:	d10d      	bne.n	80052e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f103 0214 	add.w	r2, r3, #20
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80052de:	e799      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fd f909 	bl	80024fc <_ZN13STM32Hardware4timeEv>
 80052ea:	4602      	mov	r2, r0
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bf8c      	ite	hi
 80052f8:	2301      	movhi	r3, #1
 80052fa:	2300      	movls	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d088      	beq.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800530a:	f06f 0301 	mvn.w	r3, #1
 800530e:	e130      	b.n	8005572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005316:	2b01      	cmp	r3, #1
 8005318:	d118      	bne.n	800534c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2bfe      	cmp	r3, #254	; 0xfe
 800531e:	d107      	bne.n	8005330 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800532e:	e771      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800533e:	2b00      	cmp	r3, #0
 8005340:	f47f af68 	bne.w	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f918 	bl	800557a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800534a:	e763      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005352:	2b02      	cmp	r3, #2
 8005354:	d113      	bne.n	800537e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800537c:	e74a      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005384:	2b03      	cmp	r3, #3
 8005386:	d110      	bne.n	80053aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80053a8:	e734      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d116      	bne.n	80053e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80053ba:	425a      	negs	r2, r3
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	bf58      	it	pl
 80053c2:	4253      	negpl	r3, r2
 80053c4:	2bff      	cmp	r3, #255	; 0xff
 80053c6:	d107      	bne.n	80053d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80053d6:	e71d      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80053e0:	e718      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80053e8:	2b05      	cmp	r3, #5
 80053ea:	d10f      	bne.n	800540c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800540a:	e703      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005412:	2b06      	cmp	r3, #6
 8005414:	d117      	bne.n	8005446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	441a      	add	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2207      	movs	r2, #7
 800542c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005436:	2b00      	cmp	r3, #0
 8005438:	f47f aeec 	bne.w	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2208      	movs	r2, #8
 8005440:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005444:	e6e6      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800544c:	2b08      	cmp	r3, #8
 800544e:	f47f aee1 	bne.w	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005460:	425a      	negs	r2, r3
 8005462:	b2db      	uxtb	r3, r3
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	bf58      	it	pl
 8005468:	4253      	negpl	r3, r2
 800546a:	2bff      	cmp	r3, #255	; 0xff
 800546c:	f47f aed2 	bne.w	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d110      	bne.n	800549c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f87d 	bl	800557a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f898 	bl	80055b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8005496:	f04f 33ff 	mov.w	r3, #4294967295
 800549a:	e06a      	b.n	8005572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80054a2:	2b0a      	cmp	r3, #10
 80054a4:	d107      	bne.n	80054b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f960 	bl	8005774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80054b4:	e6ae      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80054bc:	2b06      	cmp	r3, #6
 80054be:	d10e      	bne.n	80054de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f7fc fd33 	bl	8001f3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80054dc:	e69a      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80054e4:	2b0b      	cmp	r3, #11
 80054e6:	d104      	bne.n	80054f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80054f0:	e690      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80054f8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f43f ae84 	beq.w	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005512:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f202 2222 	addw	r2, r2, #546	; 0x222
 800551c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005526:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800553e:	4611      	mov	r1, r2
 8005540:	4798      	blx	r3
    while (true)
 8005542:	e667      	b.n	8005214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8005544:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00f      	beq.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800555e:	4293      	cmp	r3, r2
 8005560:	d906      	bls.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f809 	bl	800557a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8005570:	2300      	movs	r3, #0
  }
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	4618      	mov	r0, r3
 8005588:	f7fc f834 	bl	80015f4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f107 020c 	add.w	r2, r7, #12
 8005596:	210a      	movs	r1, #10
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
    rt_time = hardware_.time();
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fc ffab 	bl	80024fc <_ZN13STM32Hardware4timeEv>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80055ae:	bf00      	nop
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80055b6:	b590      	push	{r4, r7, lr}
 80055b8:	b08b      	sub	sp, #44	; 0x2c
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80055be:	f107 030c 	add.w	r3, r7, #12
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fc f906 	bl	80017d4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80055c8:	2300      	movs	r3, #0
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	2b18      	cmp	r3, #24
 80055d0:	dc63      	bgt.n	800569a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d056      	beq.n	8005692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	6859      	ldr	r1, [r3, #4]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4608      	mov	r0, r1
 8005632:	4798      	blx	r3
 8005634:	4603      	mov	r3, r0
 8005636:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	6859      	ldr	r1, [r3, #4]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4608      	mov	r0, r1
 8005660:	4798      	blx	r3
 8005662:	4603      	mov	r3, r0
 8005664:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800566a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681c      	ldr	r4, [r3, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	f7fc fe12 	bl	80022aa <_ZN3ros9Publisher15getEndpointTypeEv>
 8005686:	4601      	mov	r1, r0
 8005688:	f107 030c 	add.w	r3, r7, #12
 800568c:	461a      	mov	r2, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	3301      	adds	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	e798      	b.n	80055cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	2b18      	cmp	r3, #24
 80056a2:	dc5f      	bgt.n	8005764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80056ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d053      	beq.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	f202 2222 	addw	r2, r2, #546	; 0x222
 80056de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80056ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4798      	blx	r3
 80056f8:	4603      	mov	r3, r0
 80056fa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005700:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4608      	mov	r0, r1
 800571c:	4798      	blx	r3
 800571e:	4603      	mov	r3, r0
 8005720:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005726:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681c      	ldr	r4, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005732:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005736:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3304      	adds	r3, #4
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4608      	mov	r0, r1
 800574e:	4798      	blx	r3
 8005750:	4601      	mov	r1, r0
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	461a      	mov	r2, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	3301      	adds	r3, #1
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
 8005762:	e79c      	b.n	800569e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800576c:	bf00      	nop
 800576e:	372c      	adds	r7, #44	; 0x2c
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	4618      	mov	r0, r3
 8005784:	f7fb ff36 	bl	80015f4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f7fc feb5 	bl	80024fc <_ZN13STM32Hardware4timeEv>
 8005792:	4602      	mov	r2, r0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800579e:	f107 0308 	add.w	r3, r7, #8
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fb ff95 	bl	80016d4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4915      	ldr	r1, [pc, #84]	; (8005804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80057b0:	fba1 1303 	umull	r1, r3, r1, r3
 80057b4:	099b      	lsrs	r3, r3, #6
 80057b6:	4413      	add	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80057ba:	6939      	ldr	r1, [r7, #16]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80057c0:	fba3 0302 	umull	r0, r3, r3, r2
 80057c4:	099b      	lsrs	r3, r3, #6
 80057c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057ca:	fb00 f303 	mul.w	r3, r0, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	4a0d      	ldr	r2, [pc, #52]	; (8005808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	440b      	add	r3, r1
 80057d8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8a4 	bl	8005930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fc fe85 	bl	80024fc <_ZN13STM32Hardware4timeEv>
 80057f2:	4602      	mov	r2, r0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	10624dd3 	.word	0x10624dd3
 8005808:	000f4240 	.word	0x000f4240

0800580c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b63      	cmp	r3, #99	; 0x63
 800581c:	dd09      	ble.n	8005832 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005824:	f083 0301 	eor.w	r3, r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800582e:	2300      	movs	r3, #0
 8005830:	e077      	b.n	8005922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800583e:	3207      	adds	r2, #7
 8005840:	4611      	mov	r1, r2
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
 8005846:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	22ff      	movs	r2, #255	; 0xff
 800584c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	22fe      	movs	r2, #254	; 0xfe
 8005854:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	b2da      	uxtb	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	b29b      	uxth	r3, r3
 8005866:	121b      	asrs	r3, r3, #8
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800587c:	4413      	add	r3, r2
 800587e:	b2db      	uxtb	r3, r3
 8005880:	43db      	mvns	r3, r3
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	b21b      	sxth	r3, r3
 8005898:	121b      	asrs	r3, r3, #8
 800589a:	b2da      	uxtb	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80058a6:	2305      	movs	r3, #5
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	3306      	adds	r3, #6
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	dc0d      	bgt.n	80058d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	4413      	add	r3, r2
 80058ba:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	e7ec      	b.n	80058aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	3307      	adds	r3, #7
 80058d4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	425a      	negs	r2, r3
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	bf58      	it	pl
 80058e0:	4253      	negpl	r3, r2
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	1c59      	adds	r1, r3, #1
 80058e8:	6179      	str	r1, [r7, #20]
 80058ea:	43d2      	mvns	r2, r2
 80058ec:	b2d1      	uxtb	r1, r2
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	460a      	mov	r2, r1
 80058f4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058fe:	dc0a      	bgt.n	8005916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1d18      	adds	r0, r3, #4
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4619      	mov	r1, r3
 800590e:	f7fc fdaf 	bl	8002470 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	e005      	b.n	8005922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005916:	4905      	ldr	r1, [pc, #20]	; (800592c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f849 	bl	80059b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	0800ef14 	.word	0x0800ef14

08005930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3304      	adds	r3, #4
 800593e:	4618      	mov	r0, r3
 8005940:	f7fc fddc 	bl	80024fc <_ZN13STM32Hardware4timeEv>
 8005944:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4915      	ldr	r1, [pc, #84]	; (80059a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800594e:	fba1 1303 	umull	r1, r3, r1, r3
 8005952:	099b      	lsrs	r3, r3, #6
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	1e5a      	subs	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8005966:	fba3 0302 	umull	r0, r3, r3, r2
 800596a:	099b      	lsrs	r3, r3, #6
 800596c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005970:	fb00 f303 	mul.w	r3, r0, r3
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	4a0c      	ldr	r2, [pc, #48]	; (80059a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8005978:	fb02 f303 	mul.w	r3, r2, r3
 800597c:	1aca      	subs	r2, r1, r3
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8005980:	4413      	add	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f000 fe42 	bl	8006620 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	10624dd3 	.word	0x10624dd3
 80059a8:	000f4240 	.word	0x000f4240
 80059ac:	3b9aca00 	.word	0x3b9aca00

080059b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	2103      	movs	r1, #3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f804 	bl	80059cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	460b      	mov	r3, r1
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80059da:	f107 0314 	add.w	r3, r7, #20
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fc f8bc 	bl	8001b5c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80059e4:	7afb      	ldrb	r3, [r7, #11]
 80059e6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f107 0214 	add.w	r2, r7, #20
 80059f6:	2107      	movs	r1, #7
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	4798      	blx	r3
  }
 80059fc:	bf00      	nop
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <_Z41__static_initialization_and_destruction_0ii>:
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d12e      	bne.n	8005a72 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d129      	bne.n	8005a72 <_Z41__static_initialization_and_destruction_0ii+0x6e>
int countTick = HAL_GetTick();
 8005a1e:	f000 febb 	bl	8006798 <HAL_GetTick>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461a      	mov	r2, r3
 8005a26:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8005a28:	601a      	str	r2, [r3, #0]
ros::NodeHandle nh;
 8005a2a:	4815      	ldr	r0, [pc, #84]	; (8005a80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005a2c:	f7ff f87c 	bl	8004b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
sensor_msgs::Imu imu;
 8005a30:	4814      	ldr	r0, [pc, #80]	; (8005a84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005a32:	f7fe fac9 	bl	8003fc8 <_ZN11sensor_msgs3ImuC1Ev>
std_msgs::String str_msg;
 8005a36:	4814      	ldr	r0, [pc, #80]	; (8005a88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005a38:	f7fc fd6c 	bl	8002514 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005a40:	4912      	ldr	r1, [pc, #72]	; (8005a8c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005a42:	4813      	ldr	r0, [pc, #76]	; (8005a90 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005a44:	f7fc fc06 	bl	8002254 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_imu("imu/data", &imu);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005a4c:	4911      	ldr	r1, [pc, #68]	; (8005a94 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005a4e:	4812      	ldr	r0, [pc, #72]	; (8005a98 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005a50:	f7fc fc00 	bl	8002254 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::Twist raw_vel_msg;
 8005a54:	4811      	ldr	r0, [pc, #68]	; (8005a9c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005a56:	f7fd fa8d 	bl	8002f74 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher raw_vel_pub("raw_vel",&raw_vel_msg);
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4a0f      	ldr	r2, [pc, #60]	; (8005a9c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005a5e:	4910      	ldr	r1, [pc, #64]	; (8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005a60:	4810      	ldr	r0, [pc, #64]	; (8005aa4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005a62:	f7fc fbf7 	bl	8002254 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub_vel("cmd_vel", messageCb);
 8005a66:	2301      	movs	r3, #1
 8005a68:	4a0f      	ldr	r2, [pc, #60]	; (8005aa8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8005a6a:	4910      	ldr	r1, [pc, #64]	; (8005aac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8005a6c:	4810      	ldr	r0, [pc, #64]	; (8005ab0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005a6e:	f7ff fb03 	bl	8005078 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	200002f0 	.word	0x200002f0
 8005a80:	200002f4 	.word	0x200002f4
 8005a84:	20000c30 	.word	0x20000c30
 8005a88:	20000d88 	.word	0x20000d88
 8005a8c:	0800ef50 	.word	0x0800ef50
 8005a90:	20000d90 	.word	0x20000d90
 8005a94:	0800ef58 	.word	0x0800ef58
 8005a98:	20000da4 	.word	0x20000da4
 8005a9c:	20000db8 	.word	0x20000db8
 8005aa0:	0800ef64 	.word	0x0800ef64
 8005aa4:	20000e00 	.word	0x20000e00
 8005aa8:	08004d79 	.word	0x08004d79
 8005aac:	0800ef6c 	.word	0x0800ef6c
 8005ab0:	20000e18 	.word	0x20000e18

08005ab4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3310      	adds	r3, #16
 8005ac2:	6839      	ldr	r1, [r7, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fd fa97 	bl	8002ff8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	3210      	adds	r2, #16
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	4798      	blx	r3
  }
 8005ad6:	bf00      	nop
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3310      	adds	r3, #16
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd fa9e 	bl	8003044 <_ZN13geometry_msgs5Twist7getTypeEv>
 8005b08:	4603      	mov	r3, r0
  }
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3310      	adds	r3, #16
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fd fa9e 	bl	8003060 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8005b24:	4603      	mov	r3, r0
  }
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
    return configured_;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <_GLOBAL__sub_I_Vx>:
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b50:	2001      	movs	r0, #1
 8005b52:	f7ff ff57 	bl	8005a04 <_Z41__static_initialization_and_destruction_0ii>
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	4a0f      	ldr	r2, [pc, #60]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b76:	607b      	str	r3, [r7, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b88:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <HAL_TIM_Base_MspInit+0x80>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d116      	bne.n	8005be8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <HAL_TIM_Base_MspInit+0x84>)
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <HAL_TIM_Base_MspInit+0x84>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bca:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <HAL_TIM_Base_MspInit+0x84>)
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2100      	movs	r1, #0
 8005bda:	2018      	movs	r0, #24
 8005bdc:	f000 fee7 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005be0:	2018      	movs	r0, #24
 8005be2:	f000 ff00 	bl	80069e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8005be6:	e01a      	b.n	8005c1e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM9)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <HAL_TIM_Base_MspInit+0x88>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d115      	bne.n	8005c1e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <HAL_TIM_Base_MspInit+0x84>)
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <HAL_TIM_Base_MspInit+0x84>)
 8005bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c00:	6453      	str	r3, [r2, #68]	; 0x44
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <HAL_TIM_Base_MspInit+0x84>)
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0a:	60bb      	str	r3, [r7, #8]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2100      	movs	r1, #0
 8005c12:	2018      	movs	r0, #24
 8005c14:	f000 fecb 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005c18:	2018      	movs	r0, #24
 8005c1a:	f000 fee4 	bl	80069e6 <HAL_NVIC_EnableIRQ>
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	40014000 	.word	0x40014000

08005c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a22      	ldr	r2, [pc, #136]	; (8005cdc <HAL_TIM_MspPostInit+0xa8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d13d      	bne.n	8005cd2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <HAL_TIM_MspPostInit+0xac>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	4a20      	ldr	r2, [pc, #128]	; (8005ce0 <HAL_TIM_MspPostInit+0xac>)
 8005c60:	f043 0310 	orr.w	r3, r3, #16
 8005c64:	6313      	str	r3, [r2, #48]	; 0x30
 8005c66:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <HAL_TIM_MspPostInit+0xac>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <HAL_TIM_MspPostInit+0xac>)
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_TIM_MspPostInit+0xac>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6313      	str	r3, [r2, #48]	; 0x30
 8005c82:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <HAL_TIM_MspPostInit+0xac>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c94:	2302      	movs	r3, #2
 8005c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4619      	mov	r1, r3
 8005caa:	480e      	ldr	r0, [pc, #56]	; (8005ce4 <HAL_TIM_MspPostInit+0xb0>)
 8005cac:	f001 fab8 	bl	8007220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc6:	f107 0314 	add.w	r3, r7, #20
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4806      	ldr	r0, [pc, #24]	; (8005ce8 <HAL_TIM_MspPostInit+0xb4>)
 8005cce:	f001 faa7 	bl	8007220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005cd2:	bf00      	nop
 8005cd4:	3728      	adds	r7, #40	; 0x28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40020000 	.word	0x40020000

08005cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf4:	f107 031c 	add.w	r3, r7, #28
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	609a      	str	r2, [r3, #8]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a69      	ldr	r2, [pc, #420]	; (8005eb0 <HAL_UART_MspInit+0x1c4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f040 8092 	bne.w	8005e34 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	4b67      	ldr	r3, [pc, #412]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	4a66      	ldr	r2, [pc, #408]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8005d20:	4b64      	ldr	r3, [pc, #400]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	4b60      	ldr	r3, [pc, #384]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	4a5f      	ldr	r2, [pc, #380]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d3c:	4b5d      	ldr	r3, [pc, #372]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d48:	230c      	movs	r3, #12
 8005d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d54:	2303      	movs	r3, #3
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d58:	2307      	movs	r3, #7
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5c:	f107 031c 	add.w	r3, r7, #28
 8005d60:	4619      	mov	r1, r3
 8005d62:	4855      	ldr	r0, [pc, #340]	; (8005eb8 <HAL_UART_MspInit+0x1cc>)
 8005d64:	f001 fa5c 	bl	8007220 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005d68:	4b54      	ldr	r3, [pc, #336]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005d6a:	4a55      	ldr	r2, [pc, #340]	; (8005ec0 <HAL_UART_MspInit+0x1d4>)
 8005d6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005d6e:	4b53      	ldr	r3, [pc, #332]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005d70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d74:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d76:	4b51      	ldr	r3, [pc, #324]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d7c:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d82:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d88:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d8a:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d90:	4b4a      	ldr	r3, [pc, #296]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005d96:	4b49      	ldr	r3, [pc, #292]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d9e:	4b47      	ldr	r3, [pc, #284]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005da4:	4b45      	ldr	r3, [pc, #276]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005daa:	4844      	ldr	r0, [pc, #272]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005dac:	f000 fe36 	bl	8006a1c <HAL_DMA_Init>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005db6:	f7fb fbf7 	bl	80015a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8005dc0:	4a3e      	ldr	r2, [pc, #248]	; (8005ebc <HAL_UART_MspInit+0x1d0>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005dc6:	4b3f      	ldr	r3, [pc, #252]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005dc8:	4a3f      	ldr	r2, [pc, #252]	; (8005ec8 <HAL_UART_MspInit+0x1dc>)
 8005dca:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005dcc:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005dce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005dd2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005dd6:	2240      	movs	r2, #64	; 0x40
 8005dd8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dda:	4b3a      	ldr	r3, [pc, #232]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005de0:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005de6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dee:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005df4:	4b33      	ldr	r3, [pc, #204]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005dfa:	4b32      	ldr	r3, [pc, #200]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e00:	4b30      	ldr	r3, [pc, #192]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005e06:	482f      	ldr	r0, [pc, #188]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005e08:	f000 fe08 	bl	8006a1c <HAL_DMA_Init>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005e12:	f7fb fbc9 	bl	80015a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2a      	ldr	r2, [pc, #168]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8005e1c:	4a29      	ldr	r2, [pc, #164]	; (8005ec4 <HAL_UART_MspInit+0x1d8>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005e22:	2200      	movs	r2, #0
 8005e24:	2100      	movs	r1, #0
 8005e26:	2026      	movs	r0, #38	; 0x26
 8005e28:	f000 fdc1 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e2c:	2026      	movs	r0, #38	; 0x26
 8005e2e:	f000 fdda 	bl	80069e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005e32:	e039      	b.n	8005ea8 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <HAL_UART_MspInit+0x1e0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d134      	bne.n	8005ea8 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	4b1c      	ldr	r3, [pc, #112]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e4e:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	6313      	str	r3, [r2, #48]	; 0x30
 8005e6a:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <HAL_UART_MspInit+0x1c8>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005e76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e84:	2303      	movs	r3, #3
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005e88:	2307      	movs	r3, #7
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e8c:	f107 031c 	add.w	r3, r7, #28
 8005e90:	4619      	mov	r1, r3
 8005e92:	480f      	ldr	r0, [pc, #60]	; (8005ed0 <HAL_UART_MspInit+0x1e4>)
 8005e94:	f001 f9c4 	bl	8007220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	2027      	movs	r0, #39	; 0x27
 8005e9e:	f000 fd86 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005ea2:	2027      	movs	r0, #39	; 0x27
 8005ea4:	f000 fd9f 	bl	80069e6 <HAL_NVIC_EnableIRQ>
}
 8005ea8:	bf00      	nop
 8005eaa:	3730      	adds	r7, #48	; 0x30
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40004400 	.word	0x40004400
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	40020000 	.word	0x40020000
 8005ebc:	20000ee4 	.word	0x20000ee4
 8005ec0:	40026088 	.word	0x40026088
 8005ec4:	20000f88 	.word	0x20000f88
 8005ec8:	400260a0 	.word	0x400260a0
 8005ecc:	40004800 	.word	0x40004800
 8005ed0:	40020400 	.word	0x40020400

08005ed4 <triTuyeDoi>:
extern DMA_HandleTypeDef hdma_usart2_tx;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
/* USER CODE BEGIN EV */
int triTuyeDoi(int a)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	if(a < 0)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	da02      	bge.n	8005ee8 <triTuyeDoi+0x14>
		a = -a;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	607b      	str	r3, [r7, #4]
	else
		a = a;
	return a;
 8005ee8:	687b      	ldr	r3, [r7, #4]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <PID_control_DC1>:
{
		return (int)c-48;
}

void PID_control_DC1(double speed_des1_rps)
{
 8005ef8:	b5b0      	push	{r4, r5, r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	ed87 0b00 	vstr	d0, [r7]
	Speed_des1_rps = triTuyeDoi((speed_des1_rps*330*0.025));
 8005f02:	a374      	add	r3, pc, #464	; (adr r3, 80060d4 <PID_control_DC1+0x1dc>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f0c:	f7fa fb74 	bl	80005f8 <__aeabi_dmul>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4610      	mov	r0, r2
 8005f16:	4619      	mov	r1, r3
 8005f18:	a35b      	add	r3, pc, #364	; (adr r3, 8006088 <PID_control_DC1+0x190>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fb6b 	bl	80005f8 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f7fa fe15 	bl	8000b58 <__aeabi_d2iz>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff ffcf 	bl	8005ed4 <triTuyeDoi>
 8005f36:	4603      	mov	r3, r0
 8005f38:	4a55      	ldr	r2, [pc, #340]	; (8006090 <PID_control_DC1+0x198>)
 8005f3a:	6013      	str	r3, [r2, #0]
	rSpeed1 = pluse1 - pluse_pre1;
 8005f3c:	4b55      	ldr	r3, [pc, #340]	; (8006094 <PID_control_DC1+0x19c>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b55      	ldr	r3, [pc, #340]	; (8006098 <PID_control_DC1+0x1a0>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	4a55      	ldr	r2, [pc, #340]	; (800609c <PID_control_DC1+0x1a4>)
 8005f48:	6013      	str	r3, [r2, #0]
	pluse_pre1 = pluse1;
 8005f4a:	4b52      	ldr	r3, [pc, #328]	; (8006094 <PID_control_DC1+0x19c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a52      	ldr	r2, [pc, #328]	; (8006098 <PID_control_DC1+0x1a0>)
 8005f50:	6013      	str	r3, [r2, #0]
	Err1 = Speed_des1_rps - triTuyeDoi(rSpeed1);
 8005f52:	4b4f      	ldr	r3, [pc, #316]	; (8006090 <PID_control_DC1+0x198>)
 8005f54:	681c      	ldr	r4, [r3, #0]
 8005f56:	4b51      	ldr	r3, [pc, #324]	; (800609c <PID_control_DC1+0x1a4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ffba 	bl	8005ed4 <triTuyeDoi>
 8005f60:	4603      	mov	r3, r0
 8005f62:	1ae3      	subs	r3, r4, r3
 8005f64:	4a4e      	ldr	r2, [pc, #312]	; (80060a0 <PID_control_DC1+0x1a8>)
 8005f66:	6013      	str	r3, [r2, #0]

	pPart1 = (float)(Kp1*(Err1));
 8005f68:	4b4d      	ldr	r3, [pc, #308]	; (80060a0 <PID_control_DC1+0x1a8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f74:	4b4b      	ldr	r3, [pc, #300]	; (80060a4 <PID_control_DC1+0x1ac>)
 8005f76:	edd3 7a00 	vldr	s15, [r3]
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	4b4a      	ldr	r3, [pc, #296]	; (80060a8 <PID_control_DC1+0x1b0>)
 8005f80:	edc3 7a00 	vstr	s15, [r3]
	dPart1 = (float)(Kd1*(Err1 - pre_Err1)*inv_sampling_Time);
 8005f84:	4b46      	ldr	r3, [pc, #280]	; (80060a0 <PID_control_DC1+0x1a8>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b48      	ldr	r3, [pc, #288]	; (80060ac <PID_control_DC1+0x1b4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f96:	4b46      	ldr	r3, [pc, #280]	; (80060b0 <PID_control_DC1+0x1b8>)
 8005f98:	edd3 7a00 	vldr	s15, [r3]
 8005f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80060b4 <PID_control_DC1+0x1bc>
 8005fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fa8:	4b43      	ldr	r3, [pc, #268]	; (80060b8 <PID_control_DC1+0x1c0>)
 8005faa:	edc3 7a00 	vstr	s15, [r3]
	iPart1 += (float)(Ki1*sampling_Time*Err1);
 8005fae:	4b43      	ldr	r3, [pc, #268]	; (80060bc <PID_control_DC1+0x1c4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa fac8 	bl	8000548 <__aeabi_f2d>
 8005fb8:	a333      	add	r3, pc, #204	; (adr r3, 8006088 <PID_control_DC1+0x190>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa fb1b 	bl	80005f8 <__aeabi_dmul>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4614      	mov	r4, r2
 8005fc8:	461d      	mov	r5, r3
 8005fca:	4b35      	ldr	r3, [pc, #212]	; (80060a0 <PID_control_DC1+0x1a8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fa faa8 	bl	8000524 <__aeabi_i2d>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4620      	mov	r0, r4
 8005fda:	4629      	mov	r1, r5
 8005fdc:	f7fa fb0c 	bl	80005f8 <__aeabi_dmul>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	f7fa fdfe 	bl	8000be8 <__aeabi_d2f>
 8005fec:	ee07 0a10 	vmov	s14, r0
 8005ff0:	4b33      	ldr	r3, [pc, #204]	; (80060c0 <PID_control_DC1+0x1c8>)
 8005ff2:	edd3 7a00 	vldr	s15, [r3]
 8005ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ffa:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <PID_control_DC1+0x1c8>)
 8005ffc:	edc3 7a00 	vstr	s15, [r3]
	Output1 += (int)(pPart1 + dPart1 + iPart1);
 8006000:	4b29      	ldr	r3, [pc, #164]	; (80060a8 <PID_control_DC1+0x1b0>)
 8006002:	ed93 7a00 	vldr	s14, [r3]
 8006006:	4b2c      	ldr	r3, [pc, #176]	; (80060b8 <PID_control_DC1+0x1c0>)
 8006008:	edd3 7a00 	vldr	s15, [r3]
 800600c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006010:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <PID_control_DC1+0x1c8>)
 8006012:	edd3 7a00 	vldr	s15, [r3]
 8006016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800601a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800601e:	ee17 2a90 	vmov	r2, s15
 8006022:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <PID_control_DC1+0x1cc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4413      	add	r3, r2
 8006028:	4a26      	ldr	r2, [pc, #152]	; (80060c4 <PID_control_DC1+0x1cc>)
 800602a:	6013      	str	r3, [r2, #0]

	if(Output1 > 4000)
 800602c:	4b25      	ldr	r3, [pc, #148]	; (80060c4 <PID_control_DC1+0x1cc>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006034:	dd03      	ble.n	800603e <PID_control_DC1+0x146>
		Output1 = 4000-1;
 8006036:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <PID_control_DC1+0x1cc>)
 8006038:	f640 729f 	movw	r2, #3999	; 0xf9f
 800603c:	601a      	str	r2, [r3, #0]
	if(Output1 <= 0)
 800603e:	4b21      	ldr	r3, [pc, #132]	; (80060c4 <PID_control_DC1+0x1cc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	dc02      	bgt.n	800604c <PID_control_DC1+0x154>
		Output1 = 1;
 8006046:	4b1f      	ldr	r3, [pc, #124]	; (80060c4 <PID_control_DC1+0x1cc>)
 8006048:	2201      	movs	r2, #1
 800604a:	601a      	str	r2, [r3, #0]

	PWM1 = Output1;
 800604c:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <PID_control_DC1+0x1cc>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <PID_control_DC1+0x1d0>)
 8006052:	6013      	str	r3, [r2, #0]
	pre_Err1 = Err1;
 8006054:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <PID_control_DC1+0x1a8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a14      	ldr	r2, [pc, #80]	; (80060ac <PID_control_DC1+0x1b4>)
 800605a:	6013      	str	r3, [r2, #0]
	w1  = (rSpeed1)/(0.025*330);
 800605c:	4b0f      	ldr	r3, [pc, #60]	; (800609c <PID_control_DC1+0x1a4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fa fa5f 	bl	8000524 <__aeabi_i2d>
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	4b18      	ldr	r3, [pc, #96]	; (80060cc <PID_control_DC1+0x1d4>)
 800606c:	f7fa fbee 	bl	800084c <__aeabi_ddiv>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4916      	ldr	r1, [pc, #88]	; (80060d0 <PID_control_DC1+0x1d8>)
 8006076:	e9c1 2300 	strd	r2, r3, [r1]
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bdb0      	pop	{r4, r5, r7, pc}
 8006082:	bf00      	nop
 8006084:	f3af 8000 	nop.w
 8006088:	9999999a 	.word	0x9999999a
 800608c:	3f999999 	.word	0x3f999999
 8006090:	20000ea4 	.word	0x20000ea4
 8006094:	20000e7c 	.word	0x20000e7c
 8006098:	20000e80 	.word	0x20000e80
 800609c:	20000e84 	.word	0x20000e84
 80060a0:	20000e88 	.word	0x20000e88
 80060a4:	20000024 	.word	0x20000024
 80060a8:	20000e94 	.word	0x20000e94
 80060ac:	20000e8c 	.word	0x20000e8c
 80060b0:	20000028 	.word	0x20000028
 80060b4:	42200000 	.word	0x42200000
 80060b8:	20000e98 	.word	0x20000e98
 80060bc:	20000e90 	.word	0x20000e90
 80060c0:	20000e9c 	.word	0x20000e9c
 80060c4:	20000ea0 	.word	0x20000ea0
 80060c8:	20000ed0 	.word	0x20000ed0
 80060cc:	40208000 	.word	0x40208000
 80060d0:	20000240 	.word	0x20000240
 80060d4:	00000000 	.word	0x00000000
 80060d8:	4074a000 	.word	0x4074a000
 80060dc:	00000000 	.word	0x00000000

080060e0 <PID_control_DC2>:

void PID_control_DC2(double speed_des2_rps)
{
 80060e0:	b5b0      	push	{r4, r5, r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	ed87 0b00 	vstr	d0, [r7]
	Speed_des2_rps = triTuyeDoi((speed_des2_rps*330*0.025));
 80060ea:	a374      	add	r3, pc, #464	; (adr r3, 80062bc <PID_control_DC2+0x1dc>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060f4:	f7fa fa80 	bl	80005f8 <__aeabi_dmul>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4610      	mov	r0, r2
 80060fe:	4619      	mov	r1, r3
 8006100:	a35b      	add	r3, pc, #364	; (adr r3, 8006270 <PID_control_DC2+0x190>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fa77 	bl	80005f8 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4610      	mov	r0, r2
 8006110:	4619      	mov	r1, r3
 8006112:	f7fa fd21 	bl	8000b58 <__aeabi_d2iz>
 8006116:	4603      	mov	r3, r0
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fedb 	bl	8005ed4 <triTuyeDoi>
 800611e:	4603      	mov	r3, r0
 8006120:	4a55      	ldr	r2, [pc, #340]	; (8006278 <PID_control_DC2+0x198>)
 8006122:	6013      	str	r3, [r2, #0]
	rSpeed2 = pluse2 - pluse_pre2;
 8006124:	4b55      	ldr	r3, [pc, #340]	; (800627c <PID_control_DC2+0x19c>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4b55      	ldr	r3, [pc, #340]	; (8006280 <PID_control_DC2+0x1a0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	4a55      	ldr	r2, [pc, #340]	; (8006284 <PID_control_DC2+0x1a4>)
 8006130:	6013      	str	r3, [r2, #0]
	pluse_pre2 = pluse2;
 8006132:	4b52      	ldr	r3, [pc, #328]	; (800627c <PID_control_DC2+0x19c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a52      	ldr	r2, [pc, #328]	; (8006280 <PID_control_DC2+0x1a0>)
 8006138:	6013      	str	r3, [r2, #0]
	Err2 = Speed_des2_rps - triTuyeDoi(rSpeed2);
 800613a:	4b4f      	ldr	r3, [pc, #316]	; (8006278 <PID_control_DC2+0x198>)
 800613c:	681c      	ldr	r4, [r3, #0]
 800613e:	4b51      	ldr	r3, [pc, #324]	; (8006284 <PID_control_DC2+0x1a4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fec6 	bl	8005ed4 <triTuyeDoi>
 8006148:	4603      	mov	r3, r0
 800614a:	1ae3      	subs	r3, r4, r3
 800614c:	4a4e      	ldr	r2, [pc, #312]	; (8006288 <PID_control_DC2+0x1a8>)
 800614e:	6013      	str	r3, [r2, #0]

	pPart2 = (float)(Kp2*(Err2));
 8006150:	4b4d      	ldr	r3, [pc, #308]	; (8006288 <PID_control_DC2+0x1a8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800615c:	4b4b      	ldr	r3, [pc, #300]	; (800628c <PID_control_DC2+0x1ac>)
 800615e:	edd3 7a00 	vldr	s15, [r3]
 8006162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006166:	4b4a      	ldr	r3, [pc, #296]	; (8006290 <PID_control_DC2+0x1b0>)
 8006168:	edc3 7a00 	vstr	s15, [r3]
	dPart2 = (float)(Kd2*(Err2 - pre_Err2)*inv_sampling_Time);
 800616c:	4b46      	ldr	r3, [pc, #280]	; (8006288 <PID_control_DC2+0x1a8>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b48      	ldr	r3, [pc, #288]	; (8006294 <PID_control_DC2+0x1b4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800617e:	4b46      	ldr	r3, [pc, #280]	; (8006298 <PID_control_DC2+0x1b8>)
 8006180:	edd3 7a00 	vldr	s15, [r3]
 8006184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006188:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800629c <PID_control_DC2+0x1bc>
 800618c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006190:	4b43      	ldr	r3, [pc, #268]	; (80062a0 <PID_control_DC2+0x1c0>)
 8006192:	edc3 7a00 	vstr	s15, [r3]
	iPart2 += (float)(Ki2*sampling_Time*Err2);
 8006196:	4b43      	ldr	r3, [pc, #268]	; (80062a4 <PID_control_DC2+0x1c4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa f9d4 	bl	8000548 <__aeabi_f2d>
 80061a0:	a333      	add	r3, pc, #204	; (adr r3, 8006270 <PID_control_DC2+0x190>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa fa27 	bl	80005f8 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4614      	mov	r4, r2
 80061b0:	461d      	mov	r5, r3
 80061b2:	4b35      	ldr	r3, [pc, #212]	; (8006288 <PID_control_DC2+0x1a8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f9b4 	bl	8000524 <__aeabi_i2d>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4620      	mov	r0, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7fa fa18 	bl	80005f8 <__aeabi_dmul>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4610      	mov	r0, r2
 80061ce:	4619      	mov	r1, r3
 80061d0:	f7fa fd0a 	bl	8000be8 <__aeabi_d2f>
 80061d4:	ee07 0a10 	vmov	s14, r0
 80061d8:	4b33      	ldr	r3, [pc, #204]	; (80062a8 <PID_control_DC2+0x1c8>)
 80061da:	edd3 7a00 	vldr	s15, [r3]
 80061de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e2:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <PID_control_DC2+0x1c8>)
 80061e4:	edc3 7a00 	vstr	s15, [r3]
	Output2 += (int)(pPart2 + dPart2 + iPart2);
 80061e8:	4b29      	ldr	r3, [pc, #164]	; (8006290 <PID_control_DC2+0x1b0>)
 80061ea:	ed93 7a00 	vldr	s14, [r3]
 80061ee:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <PID_control_DC2+0x1c0>)
 80061f0:	edd3 7a00 	vldr	s15, [r3]
 80061f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061f8:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <PID_control_DC2+0x1c8>)
 80061fa:	edd3 7a00 	vldr	s15, [r3]
 80061fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006206:	ee17 2a90 	vmov	r2, s15
 800620a:	4b28      	ldr	r3, [pc, #160]	; (80062ac <PID_control_DC2+0x1cc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4413      	add	r3, r2
 8006210:	4a26      	ldr	r2, [pc, #152]	; (80062ac <PID_control_DC2+0x1cc>)
 8006212:	6013      	str	r3, [r2, #0]

	if(Output2 > 4000)
 8006214:	4b25      	ldr	r3, [pc, #148]	; (80062ac <PID_control_DC2+0x1cc>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800621c:	dd03      	ble.n	8006226 <PID_control_DC2+0x146>
		Output2 = 4000-1;
 800621e:	4b23      	ldr	r3, [pc, #140]	; (80062ac <PID_control_DC2+0x1cc>)
 8006220:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006224:	601a      	str	r2, [r3, #0]
	if(Output2 <= 0)
 8006226:	4b21      	ldr	r3, [pc, #132]	; (80062ac <PID_control_DC2+0x1cc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	dc02      	bgt.n	8006234 <PID_control_DC2+0x154>
		Output2 = 1;
 800622e:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <PID_control_DC2+0x1cc>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]

	PWM2 = Output2;
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <PID_control_DC2+0x1cc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <PID_control_DC2+0x1d0>)
 800623a:	6013      	str	r3, [r2, #0]
	pre_Err2 = Err2;
 800623c:	4b12      	ldr	r3, [pc, #72]	; (8006288 <PID_control_DC2+0x1a8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <PID_control_DC2+0x1b4>)
 8006242:	6013      	str	r3, [r2, #0]

	w2  = (rSpeed2)/(0.025*330);
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <PID_control_DC2+0x1a4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f7fa f96b 	bl	8000524 <__aeabi_i2d>
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <PID_control_DC2+0x1d4>)
 8006254:	f7fa fafa 	bl	800084c <__aeabi_ddiv>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4916      	ldr	r1, [pc, #88]	; (80062b8 <PID_control_DC2+0x1d8>)
 800625e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bdb0      	pop	{r4, r5, r7, pc}
 800626a:	bf00      	nop
 800626c:	f3af 8000 	nop.w
 8006270:	9999999a 	.word	0x9999999a
 8006274:	3f999999 	.word	0x3f999999
 8006278:	20000ecc 	.word	0x20000ecc
 800627c:	20000ea8 	.word	0x20000ea8
 8006280:	20000eac 	.word	0x20000eac
 8006284:	20000eb0 	.word	0x20000eb0
 8006288:	20000eb4 	.word	0x20000eb4
 800628c:	2000002c 	.word	0x2000002c
 8006290:	20000ebc 	.word	0x20000ebc
 8006294:	20000eb8 	.word	0x20000eb8
 8006298:	20000034 	.word	0x20000034
 800629c:	42200000 	.word	0x42200000
 80062a0:	20000ec0 	.word	0x20000ec0
 80062a4:	20000030 	.word	0x20000030
 80062a8:	20000ec4 	.word	0x20000ec4
 80062ac:	20000ec8 	.word	0x20000ec8
 80062b0:	20000ed4 	.word	0x20000ed4
 80062b4:	40208000 	.word	0x40208000
 80062b8:	20000248 	.word	0x20000248
 80062bc:	00000000 	.word	0x00000000
 80062c0:	4074a000 	.word	0x4074a000

080062c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062c8:	e7fe      	b.n	80062c8 <NMI_Handler+0x4>

080062ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062ca:	b480      	push	{r7}
 80062cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062ce:	e7fe      	b.n	80062ce <HardFault_Handler+0x4>

080062d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062d4:	e7fe      	b.n	80062d4 <MemManage_Handler+0x4>

080062d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062d6:	b480      	push	{r7}
 80062d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062da:	e7fe      	b.n	80062da <BusFault_Handler+0x4>

080062dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062e0:	e7fe      	b.n	80062e0 <UsageFault_Handler+0x4>

080062e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062e6:	bf00      	nop
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062f4:	bf00      	nop
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006302:	bf00      	nop
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006310:	f000 fa2e 	bl	8006770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006314:	bf00      	nop
 8006316:	bd80      	pop	{r7, pc}

08006318 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800631c:	2002      	movs	r0, #2
 800631e:	f001 f967 	bl	80075f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 0)
 8006322:	2101      	movs	r1, #1
 8006324:	480c      	ldr	r0, [pc, #48]	; (8006358 <EXTI1_IRQHandler+0x40>)
 8006326:	f001 f917 	bl	8007558 <HAL_GPIO_ReadPin>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <EXTI1_IRQHandler+0x24>
	{
		pluse1++;
 8006330:	4b0a      	ldr	r3, [pc, #40]	; (800635c <EXTI1_IRQHandler+0x44>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3301      	adds	r3, #1
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <EXTI1_IRQHandler+0x44>)
 8006338:	6013      	str	r3, [r2, #0]
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 1)
	{
		pluse1--;
	}
  /* USER CODE END EXTI1_IRQn 1 */
}
 800633a:	e00b      	b.n	8006354 <EXTI1_IRQHandler+0x3c>
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 1)
 800633c:	2101      	movs	r1, #1
 800633e:	4806      	ldr	r0, [pc, #24]	; (8006358 <EXTI1_IRQHandler+0x40>)
 8006340:	f001 f90a 	bl	8007558 <HAL_GPIO_ReadPin>
 8006344:	4603      	mov	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d104      	bne.n	8006354 <EXTI1_IRQHandler+0x3c>
		pluse1--;
 800634a:	4b04      	ldr	r3, [pc, #16]	; (800635c <EXTI1_IRQHandler+0x44>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3b01      	subs	r3, #1
 8006350:	4a02      	ldr	r2, [pc, #8]	; (800635c <EXTI1_IRQHandler+0x44>)
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40020800 	.word	0x40020800
 800635c:	20000e7c 	.word	0x20000e7c

08006360 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006364:	4802      	ldr	r0, [pc, #8]	; (8006370 <DMA1_Stream5_IRQHandler+0x10>)
 8006366:	f000 fcf1 	bl	8006d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000ee4 	.word	0x20000ee4

08006374 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006378:	4802      	ldr	r0, [pc, #8]	; (8006384 <DMA1_Stream6_IRQHandler+0x10>)
 800637a:	f000 fce7 	bl	8006d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000f88 	.word	0x20000f88

08006388 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800638c:	2040      	movs	r0, #64	; 0x40
 800638e:	f001 f92f 	bl	80075f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 0)
 8006392:	2180      	movs	r1, #128	; 0x80
 8006394:	480c      	ldr	r0, [pc, #48]	; (80063c8 <EXTI9_5_IRQHandler+0x40>)
 8006396:	f001 f8df 	bl	8007558 <HAL_GPIO_ReadPin>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d105      	bne.n	80063ac <EXTI9_5_IRQHandler+0x24>
  {
	  pluse2--;
 80063a0:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <EXTI9_5_IRQHandler+0x44>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	4a09      	ldr	r2, [pc, #36]	; (80063cc <EXTI9_5_IRQHandler+0x44>)
 80063a8:	6013      	str	r3, [r2, #0]
  else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 1)
  {
	  pluse2++;
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80063aa:	e00b      	b.n	80063c4 <EXTI9_5_IRQHandler+0x3c>
  else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 1)
 80063ac:	2180      	movs	r1, #128	; 0x80
 80063ae:	4806      	ldr	r0, [pc, #24]	; (80063c8 <EXTI9_5_IRQHandler+0x40>)
 80063b0:	f001 f8d2 	bl	8007558 <HAL_GPIO_ReadPin>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d104      	bne.n	80063c4 <EXTI9_5_IRQHandler+0x3c>
	  pluse2++;
 80063ba:	4b04      	ldr	r3, [pc, #16]	; (80063cc <EXTI9_5_IRQHandler+0x44>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	4a02      	ldr	r2, [pc, #8]	; (80063cc <EXTI9_5_IRQHandler+0x44>)
 80063c2:	6013      	str	r3, [r2, #0]
}
 80063c4:	bf00      	nop
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40020800 	.word	0x40020800
 80063cc:	20000ea8 	.word	0x20000ea8

080063d0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80063d4:	480f      	ldr	r0, [pc, #60]	; (8006414 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80063d6:	f001 ff4d 	bl	8008274 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80063da:	480f      	ldr	r0, [pc, #60]	; (8006418 <TIM1_BRK_TIM9_IRQHandler+0x48>)
 80063dc:	f001 ff4a 	bl	8008274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
	PID_control_DC1(g_vel_angular_right);
 80063e0:	4b0e      	ldr	r3, [pc, #56]	; (800641c <TIM1_BRK_TIM9_IRQHandler+0x4c>)
 80063e2:	ed93 7b00 	vldr	d7, [r3]
 80063e6:	eeb0 0a47 	vmov.f32	s0, s14
 80063ea:	eef0 0a67 	vmov.f32	s1, s15
 80063ee:	f7ff fd83 	bl	8005ef8 <PID_control_DC1>
	PID_control_DC2(g_vel_angular_left);
 80063f2:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <TIM1_BRK_TIM9_IRQHandler+0x50>)
 80063f4:	ed93 7b00 	vldr	d7, [r3]
 80063f8:	eeb0 0a47 	vmov.f32	s0, s14
 80063fc:	eef0 0a67 	vmov.f32	s1, s15
 8006400:	f7ff fe6e 	bl	80060e0 <PID_control_DC2>
	count++;
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <TIM1_BRK_TIM9_IRQHandler+0x54>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a06      	ldr	r2, [pc, #24]	; (8006424 <TIM1_BRK_TIM9_IRQHandler+0x54>)
 800640c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000fe8 	.word	0x20000fe8
 8006418:	20001030 	.word	0x20001030
 800641c:	20000260 	.word	0x20000260
 8006420:	20000258 	.word	0x20000258
 8006424:	20000e78 	.word	0x20000e78

08006428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800642c:	4802      	ldr	r0, [pc, #8]	; (8006438 <USART2_IRQHandler+0x10>)
 800642e:	f002 ff03 	bl	8009238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20001078 	.word	0x20001078

0800643c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006440:	4802      	ldr	r0, [pc, #8]	; (800644c <USART3_IRQHandler+0x10>)
 8006442:	f002 fef9 	bl	8009238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006446:	bf00      	nop
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000f44 	.word	0x20000f44

08006450 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006454:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006458:	f001 f8ca 	bl	80075f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800645c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006460:	f001 f8c6 	bl	80075f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8006464:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006468:	f001 f8c2 	bl	80075f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800646c:	bf00      	nop
 800646e:	bd80      	pop	{r7, pc}

08006470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
	return 1;
 8006474:	2301      	movs	r3, #1
}
 8006476:	4618      	mov	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <_kill>:

int _kill(int pid, int sig)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800648a:	f003 ff5f 	bl	800a34c <__errno>
 800648e:	4603      	mov	r3, r0
 8006490:	2216      	movs	r2, #22
 8006492:	601a      	str	r2, [r3, #0]
	return -1;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <_exit>:

void _exit (int status)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80064a8:	f04f 31ff 	mov.w	r1, #4294967295
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff ffe7 	bl	8006480 <_kill>
	while (1) {}		/* Make sure we hang here */
 80064b2:	e7fe      	b.n	80064b2 <_exit+0x12>

080064b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e00a      	b.n	80064dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80064c6:	f3af 8000 	nop.w
 80064ca:	4601      	mov	r1, r0
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	60ba      	str	r2, [r7, #8]
 80064d2:	b2ca      	uxtb	r2, r1
 80064d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	3301      	adds	r3, #1
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	dbf0      	blt.n	80064c6 <_read+0x12>
	}

return len;
 80064e4:	687b      	ldr	r3, [r7, #4]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e009      	b.n	8006514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	60ba      	str	r2, [r7, #8]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	3301      	adds	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	dbf1      	blt.n	8006500 <_write+0x12>
	}
	return len;
 800651c:	687b      	ldr	r3, [r7, #4]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <_close>:

int _close(int file)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
	return -1;
 800652e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800654e:	605a      	str	r2, [r3, #4]
	return 0;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <_isatty>:

int _isatty(int file)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
	return 1;
 8006566:	2301      	movs	r3, #1
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
	return 0;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006598:	4a14      	ldr	r2, [pc, #80]	; (80065ec <_sbrk+0x5c>)
 800659a:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <_sbrk+0x60>)
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065a4:	4b13      	ldr	r3, [pc, #76]	; (80065f4 <_sbrk+0x64>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065ac:	4b11      	ldr	r3, [pc, #68]	; (80065f4 <_sbrk+0x64>)
 80065ae:	4a12      	ldr	r2, [pc, #72]	; (80065f8 <_sbrk+0x68>)
 80065b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065b2:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <_sbrk+0x64>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d207      	bcs.n	80065d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065c0:	f003 fec4 	bl	800a34c <__errno>
 80065c4:	4603      	mov	r3, r0
 80065c6:	220c      	movs	r2, #12
 80065c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
 80065ce:	e009      	b.n	80065e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065d0:	4b08      	ldr	r3, [pc, #32]	; (80065f4 <_sbrk+0x64>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065d6:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <_sbrk+0x64>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	4a05      	ldr	r2, [pc, #20]	; (80065f4 <_sbrk+0x64>)
 80065e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20020000 	.word	0x20020000
 80065f0:	00000400 	.word	0x00000400
 80065f4:	20000ed8 	.word	0x20000ed8
 80065f8:	200010d0 	.word	0x200010d0

080065fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <SystemInit+0x20>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006606:	4a05      	ldr	r2, [pc, #20]	; (800661c <SystemInit+0x20>)
 8006608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800660c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006610:	bf00      	nop
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000ed00 	.word	0xe000ed00

08006620 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	0a5a      	lsrs	r2, r3, #9
 8006630:	490f      	ldr	r1, [pc, #60]	; (8006670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006632:	fba1 1202 	umull	r1, r2, r1, r2
 8006636:	09d2      	lsrs	r2, r2, #7
 8006638:	490e      	ldr	r1, [pc, #56]	; (8006674 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800663a:	fb01 f202 	mul.w	r2, r1, r2
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	0a5b      	lsrs	r3, r3, #9
 8006648:	4a09      	ldr	r2, [pc, #36]	; (8006670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	09db      	lsrs	r3, r3, #7
 8006650:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	441a      	add	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	00044b83 	.word	0x00044b83
 8006674:	3b9aca00 	.word	0x3b9aca00

08006678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800667c:	480d      	ldr	r0, [pc, #52]	; (80066b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800667e:	490e      	ldr	r1, [pc, #56]	; (80066b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006680:	4a0e      	ldr	r2, [pc, #56]	; (80066bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006684:	e002      	b.n	800668c <LoopCopyDataInit>

08006686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800668a:	3304      	adds	r3, #4

0800668c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800668c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800668e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006690:	d3f9      	bcc.n	8006686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006692:	4a0b      	ldr	r2, [pc, #44]	; (80066c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006694:	4c0b      	ldr	r4, [pc, #44]	; (80066c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006698:	e001      	b.n	800669e <LoopFillZerobss>

0800669a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800669a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800669c:	3204      	adds	r2, #4

0800669e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800669e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066a0:	d3fb      	bcc.n	800669a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80066a2:	f7ff ffab 	bl	80065fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066a6:	f003 fe57 	bl	800a358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066aa:	f7fa fcbb 	bl	8001024 <main>
  bx  lr    
 80066ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80066b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80066b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066b8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80066bc:	0800f634 	.word	0x0800f634
  ldr r2, =_sbss
 80066c0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80066c4:	200010d0 	.word	0x200010d0

080066c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066c8:	e7fe      	b.n	80066c8 <ADC_IRQHandler>
	...

080066cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066d0:	4b0e      	ldr	r3, [pc, #56]	; (800670c <HAL_Init+0x40>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a0d      	ldr	r2, [pc, #52]	; (800670c <HAL_Init+0x40>)
 80066d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <HAL_Init+0x40>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a0a      	ldr	r2, [pc, #40]	; (800670c <HAL_Init+0x40>)
 80066e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066e8:	4b08      	ldr	r3, [pc, #32]	; (800670c <HAL_Init+0x40>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a07      	ldr	r2, [pc, #28]	; (800670c <HAL_Init+0x40>)
 80066ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066f4:	2003      	movs	r0, #3
 80066f6:	f000 f94f 	bl	8006998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066fa:	2000      	movs	r0, #0
 80066fc:	f000 f808 	bl	8006710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006700:	f7ff fa2a 	bl	8005b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	40023c00 	.word	0x40023c00

08006710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006718:	4b12      	ldr	r3, [pc, #72]	; (8006764 <HAL_InitTick+0x54>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <HAL_InitTick+0x58>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006726:	fbb3 f3f1 	udiv	r3, r3, r1
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f967 	bl	8006a02 <HAL_SYSTICK_Config>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e00e      	b.n	800675c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b0f      	cmp	r3, #15
 8006742:	d80a      	bhi.n	800675a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006744:	2200      	movs	r2, #0
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	f000 f92f 	bl	80069ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006750:	4a06      	ldr	r2, [pc, #24]	; (800676c <HAL_InitTick+0x5c>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e000      	b.n	800675c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	20000038 	.word	0x20000038
 8006768:	20000040 	.word	0x20000040
 800676c:	2000003c 	.word	0x2000003c

08006770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006774:	4b06      	ldr	r3, [pc, #24]	; (8006790 <HAL_IncTick+0x20>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	461a      	mov	r2, r3
 800677a:	4b06      	ldr	r3, [pc, #24]	; (8006794 <HAL_IncTick+0x24>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4413      	add	r3, r2
 8006780:	4a04      	ldr	r2, [pc, #16]	; (8006794 <HAL_IncTick+0x24>)
 8006782:	6013      	str	r3, [r2, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000040 	.word	0x20000040
 8006794:	200010bc 	.word	0x200010bc

08006798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  return uwTick;
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <HAL_GetTick+0x14>)
 800679e:	681b      	ldr	r3, [r3, #0]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	200010bc 	.word	0x200010bc

080067b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067b8:	f7ff ffee 	bl	8006798 <HAL_GetTick>
 80067bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d005      	beq.n	80067d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067ca:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <HAL_Delay+0x44>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067d6:	bf00      	nop
 80067d8:	f7ff ffde 	bl	8006798 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d8f7      	bhi.n	80067d8 <HAL_Delay+0x28>
  {
  }
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000040 	.word	0x20000040

080067f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <__NVIC_SetPriorityGrouping+0x44>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006814:	4013      	ands	r3, r2
 8006816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800682a:	4a04      	ldr	r2, [pc, #16]	; (800683c <__NVIC_SetPriorityGrouping+0x44>)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	60d3      	str	r3, [r2, #12]
}
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000ed00 	.word	0xe000ed00

08006840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <__NVIC_GetPriorityGrouping+0x18>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	f003 0307 	and.w	r3, r3, #7
}
 800684e:	4618      	mov	r0, r3
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	e000ed00 	.word	0xe000ed00

0800685c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800686a:	2b00      	cmp	r3, #0
 800686c:	db0b      	blt.n	8006886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	f003 021f 	and.w	r2, r3, #31
 8006874:	4907      	ldr	r1, [pc, #28]	; (8006894 <__NVIC_EnableIRQ+0x38>)
 8006876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	2001      	movs	r0, #1
 800687e:	fa00 f202 	lsl.w	r2, r0, r2
 8006882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	e000e100 	.word	0xe000e100

08006898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	db0a      	blt.n	80068c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	490c      	ldr	r1, [pc, #48]	; (80068e4 <__NVIC_SetPriority+0x4c>)
 80068b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b6:	0112      	lsls	r2, r2, #4
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	440b      	add	r3, r1
 80068bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068c0:	e00a      	b.n	80068d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	4908      	ldr	r1, [pc, #32]	; (80068e8 <__NVIC_SetPriority+0x50>)
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	3b04      	subs	r3, #4
 80068d0:	0112      	lsls	r2, r2, #4
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	440b      	add	r3, r1
 80068d6:	761a      	strb	r2, [r3, #24]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	e000e100 	.word	0xe000e100
 80068e8:	e000ed00 	.word	0xe000ed00

080068ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	; 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f1c3 0307 	rsb	r3, r3, #7
 8006906:	2b04      	cmp	r3, #4
 8006908:	bf28      	it	cs
 800690a:	2304      	movcs	r3, #4
 800690c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3304      	adds	r3, #4
 8006912:	2b06      	cmp	r3, #6
 8006914:	d902      	bls.n	800691c <NVIC_EncodePriority+0x30>
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	3b03      	subs	r3, #3
 800691a:	e000      	b.n	800691e <NVIC_EncodePriority+0x32>
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006920:	f04f 32ff 	mov.w	r2, #4294967295
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43da      	mvns	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	401a      	ands	r2, r3
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006934:	f04f 31ff 	mov.w	r1, #4294967295
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	fa01 f303 	lsl.w	r3, r1, r3
 800693e:	43d9      	mvns	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006944:	4313      	orrs	r3, r2
         );
}
 8006946:	4618      	mov	r0, r3
 8006948:	3724      	adds	r7, #36	; 0x24
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3b01      	subs	r3, #1
 8006960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006964:	d301      	bcc.n	800696a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006966:	2301      	movs	r3, #1
 8006968:	e00f      	b.n	800698a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800696a:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <SysTick_Config+0x40>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3b01      	subs	r3, #1
 8006970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006972:	210f      	movs	r1, #15
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	f7ff ff8e 	bl	8006898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <SysTick_Config+0x40>)
 800697e:	2200      	movs	r2, #0
 8006980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006982:	4b04      	ldr	r3, [pc, #16]	; (8006994 <SysTick_Config+0x40>)
 8006984:	2207      	movs	r2, #7
 8006986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	e000e010 	.word	0xe000e010

08006998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ff29 	bl	80067f8 <__NVIC_SetPriorityGrouping>
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	4603      	mov	r3, r0
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069c0:	f7ff ff3e 	bl	8006840 <__NVIC_GetPriorityGrouping>
 80069c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	6978      	ldr	r0, [r7, #20]
 80069cc:	f7ff ff8e 	bl	80068ec <NVIC_EncodePriority>
 80069d0:	4602      	mov	r2, r0
 80069d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d6:	4611      	mov	r1, r2
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff5d 	bl	8006898 <__NVIC_SetPriority>
}
 80069de:	bf00      	nop
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	4603      	mov	r3, r0
 80069ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff ff31 	bl	800685c <__NVIC_EnableIRQ>
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff ffa2 	bl	8006954 <SysTick_Config>
 8006a10:	4603      	mov	r3, r0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a28:	f7ff feb6 	bl	8006798 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e099      	b.n	8006b6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0201 	bic.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a58:	e00f      	b.n	8006a7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a5a:	f7ff fe9d 	bl	8006798 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b05      	cmp	r3, #5
 8006a66:	d908      	bls.n	8006a7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2203      	movs	r2, #3
 8006a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e078      	b.n	8006b6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e8      	bne.n	8006a5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4b38      	ldr	r3, [pc, #224]	; (8006b74 <HAL_DMA_Init+0x158>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d107      	bne.n	8006ae4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006adc:	4313      	orrs	r3, r2
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0307 	bic.w	r3, r3, #7
 8006afa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d117      	bne.n	8006b3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00e      	beq.n	8006b3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fb01 	bl	8007128 <DMA_CheckFifoParam>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2240      	movs	r2, #64	; 0x40
 8006b30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e016      	b.n	8006b6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fab8 	bl	80070bc <DMA_CalcBaseAndBitshift>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b54:	223f      	movs	r2, #63	; 0x3f
 8006b56:	409a      	lsls	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	f010803f 	.word	0xf010803f

08006b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <HAL_DMA_Start_IT+0x26>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e040      	b.n	8006c20 <HAL_DMA_Start_IT+0xa8>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d12f      	bne.n	8006c12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fa4a 	bl	8007060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd0:	223f      	movs	r2, #63	; 0x3f
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0216 	orr.w	r2, r2, #22
 8006be6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0208 	orr.w	r2, r2, #8
 8006bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e005      	b.n	8006c1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c36:	f7ff fdaf 	bl	8006798 <HAL_GetTick>
 8006c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d008      	beq.n	8006c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2280      	movs	r2, #128	; 0x80
 8006c4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e052      	b.n	8006d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0216 	bic.w	r2, r2, #22
 8006c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695a      	ldr	r2, [r3, #20]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <HAL_DMA_Abort+0x62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d007      	beq.n	8006c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0208 	bic.w	r2, r2, #8
 8006c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006caa:	e013      	b.n	8006cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cac:	f7ff fd74 	bl	8006798 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b05      	cmp	r3, #5
 8006cb8:	d90c      	bls.n	8006cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e015      	b.n	8006d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e4      	bne.n	8006cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce6:	223f      	movs	r2, #63	; 0x3f
 8006ce8:	409a      	lsls	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d004      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2280      	movs	r2, #128	; 0x80
 8006d20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e00c      	b.n	8006d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2205      	movs	r2, #5
 8006d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d58:	4b92      	ldr	r3, [pc, #584]	; (8006fa4 <HAL_DMA_IRQHandler+0x258>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a92      	ldr	r2, [pc, #584]	; (8006fa8 <HAL_DMA_IRQHandler+0x25c>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	0a9b      	lsrs	r3, r3, #10
 8006d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	2208      	movs	r2, #8
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01a      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d013      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0204 	bic.w	r2, r2, #4
 8006d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da4:	2208      	movs	r2, #8
 8006da6:	409a      	lsls	r2, r3
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	f043 0201 	orr.w	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d012      	beq.n	8006dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dda:	2201      	movs	r2, #1
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	f043 0202 	orr.w	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df2:	2204      	movs	r2, #4
 8006df4:	409a      	lsls	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d012      	beq.n	8006e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e10:	2204      	movs	r2, #4
 8006e12:	409a      	lsls	r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1c:	f043 0204 	orr.w	r2, r3, #4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e28:	2210      	movs	r2, #16
 8006e2a:	409a      	lsls	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d043      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d03c      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	2210      	movs	r2, #16
 8006e48:	409a      	lsls	r2, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d018      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d108      	bne.n	8006e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d024      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
 8006e7a:	e01f      	b.n	8006ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01b      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
 8006e8c:	e016      	b.n	8006ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0208 	bic.w	r2, r2, #8
 8006eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 808e 	beq.w	8006fea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8086 	beq.w	8006fea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	409a      	lsls	r2, r3
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d136      	bne.n	8006f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0216 	bic.w	r2, r2, #22
 8006f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <HAL_DMA_IRQHandler+0x1da>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0208 	bic.w	r2, r2, #8
 8006f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3a:	223f      	movs	r2, #63	; 0x3f
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d07d      	beq.n	8007056 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
        }
        return;
 8006f62:	e078      	b.n	8007056 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01c      	beq.n	8006fac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d108      	bne.n	8006f92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d030      	beq.n	8006fea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	e02b      	b.n	8006fea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d027      	beq.n	8006fea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
 8006fa2:	e022      	b.n	8006fea <HAL_DMA_IRQHandler+0x29e>
 8006fa4:	20000038 	.word	0x20000038
 8006fa8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10f      	bne.n	8006fda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0210 	bic.w	r2, r2, #16
 8006fc8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d032      	beq.n	8007058 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d022      	beq.n	8007044 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2205      	movs	r2, #5
 8007002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0201 	bic.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3301      	adds	r3, #1
 800701a:	60bb      	str	r3, [r7, #8]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	429a      	cmp	r2, r3
 8007020:	d307      	bcc.n	8007032 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f2      	bne.n	8007016 <HAL_DMA_IRQHandler+0x2ca>
 8007030:	e000      	b.n	8007034 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007032:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
 8007054:	e000      	b.n	8007058 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007056:	bf00      	nop
    }
  }
}
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop

08007060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800707c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d108      	bne.n	80070a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800709e:	e007      	b.n	80070b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]
}
 80070b0:	bf00      	nop
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	3b10      	subs	r3, #16
 80070cc:	4a14      	ldr	r2, [pc, #80]	; (8007120 <DMA_CalcBaseAndBitshift+0x64>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	091b      	lsrs	r3, r3, #4
 80070d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070d6:	4a13      	ldr	r2, [pc, #76]	; (8007124 <DMA_CalcBaseAndBitshift+0x68>)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d909      	bls.n	80070fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	659a      	str	r2, [r3, #88]	; 0x58
 80070fc:	e007      	b.n	800710e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	aaaaaaab 	.word	0xaaaaaaab
 8007124:	0800f108 	.word	0x0800f108

08007128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d11f      	bne.n	8007182 <DMA_CheckFifoParam+0x5a>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d856      	bhi.n	80071f6 <DMA_CheckFifoParam+0xce>
 8007148:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <DMA_CheckFifoParam+0x28>)
 800714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714e:	bf00      	nop
 8007150:	08007161 	.word	0x08007161
 8007154:	08007173 	.word	0x08007173
 8007158:	08007161 	.word	0x08007161
 800715c:	080071f7 	.word	0x080071f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d046      	beq.n	80071fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007170:	e043      	b.n	80071fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800717a:	d140      	bne.n	80071fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007180:	e03d      	b.n	80071fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800718a:	d121      	bne.n	80071d0 <DMA_CheckFifoParam+0xa8>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b03      	cmp	r3, #3
 8007190:	d837      	bhi.n	8007202 <DMA_CheckFifoParam+0xda>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <DMA_CheckFifoParam+0x70>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071a9 	.word	0x080071a9
 800719c:	080071af 	.word	0x080071af
 80071a0:	080071a9 	.word	0x080071a9
 80071a4:	080071c1 	.word	0x080071c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
      break;
 80071ac:	e030      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d025      	beq.n	8007206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071be:	e022      	b.n	8007206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071c8:	d11f      	bne.n	800720a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80071ce:	e01c      	b.n	800720a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d903      	bls.n	80071de <DMA_CheckFifoParam+0xb6>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d003      	beq.n	80071e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071dc:	e018      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	e015      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00e      	beq.n	800720e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
      break;
 80071f4:	e00b      	b.n	800720e <DMA_CheckFifoParam+0xe6>
      break;
 80071f6:	bf00      	nop
 80071f8:	e00a      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 80071fa:	bf00      	nop
 80071fc:	e008      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 80071fe:	bf00      	nop
 8007200:	e006      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 8007202:	bf00      	nop
 8007204:	e004      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 8007206:	bf00      	nop
 8007208:	e002      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;   
 800720a:	bf00      	nop
 800720c:	e000      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 800720e:	bf00      	nop
    }
  } 
  
  return status; 
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop

08007220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007220:	b480      	push	{r7}
 8007222:	b089      	sub	sp, #36	; 0x24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007232:	2300      	movs	r3, #0
 8007234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007236:	2300      	movs	r3, #0
 8007238:	61fb      	str	r3, [r7, #28]
 800723a:	e16b      	b.n	8007514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800723c:	2201      	movs	r2, #1
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	fa02 f303 	lsl.w	r3, r2, r3
 8007244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4013      	ands	r3, r2
 800724e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	429a      	cmp	r2, r3
 8007256:	f040 815a 	bne.w	800750e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	2b01      	cmp	r3, #1
 8007264:	d005      	beq.n	8007272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800726e:	2b02      	cmp	r3, #2
 8007270:	d130      	bne.n	80072d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	2203      	movs	r2, #3
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	43db      	mvns	r3, r3
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	4013      	ands	r3, r2
 8007288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	4313      	orrs	r3, r2
 800729a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072a8:	2201      	movs	r2, #1
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	43db      	mvns	r3, r3
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	4013      	ands	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	091b      	lsrs	r3, r3, #4
 80072be:	f003 0201 	and.w	r2, r3, #1
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d017      	beq.n	8007310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	2203      	movs	r2, #3
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	43db      	mvns	r3, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	4013      	ands	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	4313      	orrs	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d123      	bne.n	8007364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	08da      	lsrs	r2, r3, #3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3208      	adds	r2, #8
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	220f      	movs	r2, #15
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	43db      	mvns	r3, r3
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	4013      	ands	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	4313      	orrs	r3, r2
 8007354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	08da      	lsrs	r2, r3, #3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3208      	adds	r2, #8
 800735e:	69b9      	ldr	r1, [r7, #24]
 8007360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	2203      	movs	r2, #3
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	43db      	mvns	r3, r3
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	4013      	ands	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f003 0203 	and.w	r2, r3, #3
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	4313      	orrs	r3, r2
 8007390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80b4 	beq.w	800750e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	4b60      	ldr	r3, [pc, #384]	; (800752c <HAL_GPIO_Init+0x30c>)
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	4a5f      	ldr	r2, [pc, #380]	; (800752c <HAL_GPIO_Init+0x30c>)
 80073b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073b4:	6453      	str	r3, [r2, #68]	; 0x44
 80073b6:	4b5d      	ldr	r3, [pc, #372]	; (800752c <HAL_GPIO_Init+0x30c>)
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073c2:	4a5b      	ldr	r2, [pc, #364]	; (8007530 <HAL_GPIO_Init+0x310>)
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	089b      	lsrs	r3, r3, #2
 80073c8:	3302      	adds	r3, #2
 80073ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	220f      	movs	r2, #15
 80073da:	fa02 f303 	lsl.w	r3, r2, r3
 80073de:	43db      	mvns	r3, r3
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	4013      	ands	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a52      	ldr	r2, [pc, #328]	; (8007534 <HAL_GPIO_Init+0x314>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d02b      	beq.n	8007446 <HAL_GPIO_Init+0x226>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a51      	ldr	r2, [pc, #324]	; (8007538 <HAL_GPIO_Init+0x318>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d025      	beq.n	8007442 <HAL_GPIO_Init+0x222>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a50      	ldr	r2, [pc, #320]	; (800753c <HAL_GPIO_Init+0x31c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01f      	beq.n	800743e <HAL_GPIO_Init+0x21e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a4f      	ldr	r2, [pc, #316]	; (8007540 <HAL_GPIO_Init+0x320>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d019      	beq.n	800743a <HAL_GPIO_Init+0x21a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a4e      	ldr	r2, [pc, #312]	; (8007544 <HAL_GPIO_Init+0x324>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d013      	beq.n	8007436 <HAL_GPIO_Init+0x216>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a4d      	ldr	r2, [pc, #308]	; (8007548 <HAL_GPIO_Init+0x328>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00d      	beq.n	8007432 <HAL_GPIO_Init+0x212>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a4c      	ldr	r2, [pc, #304]	; (800754c <HAL_GPIO_Init+0x32c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d007      	beq.n	800742e <HAL_GPIO_Init+0x20e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a4b      	ldr	r2, [pc, #300]	; (8007550 <HAL_GPIO_Init+0x330>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d101      	bne.n	800742a <HAL_GPIO_Init+0x20a>
 8007426:	2307      	movs	r3, #7
 8007428:	e00e      	b.n	8007448 <HAL_GPIO_Init+0x228>
 800742a:	2308      	movs	r3, #8
 800742c:	e00c      	b.n	8007448 <HAL_GPIO_Init+0x228>
 800742e:	2306      	movs	r3, #6
 8007430:	e00a      	b.n	8007448 <HAL_GPIO_Init+0x228>
 8007432:	2305      	movs	r3, #5
 8007434:	e008      	b.n	8007448 <HAL_GPIO_Init+0x228>
 8007436:	2304      	movs	r3, #4
 8007438:	e006      	b.n	8007448 <HAL_GPIO_Init+0x228>
 800743a:	2303      	movs	r3, #3
 800743c:	e004      	b.n	8007448 <HAL_GPIO_Init+0x228>
 800743e:	2302      	movs	r3, #2
 8007440:	e002      	b.n	8007448 <HAL_GPIO_Init+0x228>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <HAL_GPIO_Init+0x228>
 8007446:	2300      	movs	r3, #0
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	f002 0203 	and.w	r2, r2, #3
 800744e:	0092      	lsls	r2, r2, #2
 8007450:	4093      	lsls	r3, r2
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4313      	orrs	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007458:	4935      	ldr	r1, [pc, #212]	; (8007530 <HAL_GPIO_Init+0x310>)
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	089b      	lsrs	r3, r3, #2
 800745e:	3302      	adds	r3, #2
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007466:	4b3b      	ldr	r3, [pc, #236]	; (8007554 <HAL_GPIO_Init+0x334>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	43db      	mvns	r3, r3
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	4013      	ands	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800748a:	4a32      	ldr	r2, [pc, #200]	; (8007554 <HAL_GPIO_Init+0x334>)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007490:	4b30      	ldr	r3, [pc, #192]	; (8007554 <HAL_GPIO_Init+0x334>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	43db      	mvns	r3, r3
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	4013      	ands	r3, r2
 800749e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074b4:	4a27      	ldr	r2, [pc, #156]	; (8007554 <HAL_GPIO_Init+0x334>)
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074ba:	4b26      	ldr	r3, [pc, #152]	; (8007554 <HAL_GPIO_Init+0x334>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	43db      	mvns	r3, r3
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	4013      	ands	r3, r2
 80074c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074de:	4a1d      	ldr	r2, [pc, #116]	; (8007554 <HAL_GPIO_Init+0x334>)
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074e4:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <HAL_GPIO_Init+0x334>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	43db      	mvns	r3, r3
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	4013      	ands	r3, r2
 80074f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007508:	4a12      	ldr	r2, [pc, #72]	; (8007554 <HAL_GPIO_Init+0x334>)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	3301      	adds	r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2b0f      	cmp	r3, #15
 8007518:	f67f ae90 	bls.w	800723c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	3724      	adds	r7, #36	; 0x24
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40023800 	.word	0x40023800
 8007530:	40013800 	.word	0x40013800
 8007534:	40020000 	.word	0x40020000
 8007538:	40020400 	.word	0x40020400
 800753c:	40020800 	.word	0x40020800
 8007540:	40020c00 	.word	0x40020c00
 8007544:	40021000 	.word	0x40021000
 8007548:	40021400 	.word	0x40021400
 800754c:	40021800 	.word	0x40021800
 8007550:	40021c00 	.word	0x40021c00
 8007554:	40013c00 	.word	0x40013c00

08007558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	887b      	ldrh	r3, [r7, #2]
 800756a:	4013      	ands	r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
 8007574:	e001      	b.n	800757a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
 8007594:	4613      	mov	r3, r2
 8007596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007598:	787b      	ldrb	r3, [r7, #1]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800759e:	887a      	ldrh	r2, [r7, #2]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075a4:	e003      	b.n	80075ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075a6:	887b      	ldrh	r3, [r7, #2]
 80075a8:	041a      	lsls	r2, r3, #16
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	619a      	str	r2, [r3, #24]
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80075cc:	887a      	ldrh	r2, [r7, #2]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4013      	ands	r3, r2
 80075d2:	041a      	lsls	r2, r3, #16
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	43d9      	mvns	r1, r3
 80075d8:	887b      	ldrh	r3, [r7, #2]
 80075da:	400b      	ands	r3, r1
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	619a      	str	r2, [r3, #24]
}
 80075e2:	bf00      	nop
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80075fa:	4b08      	ldr	r3, [pc, #32]	; (800761c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075fc:	695a      	ldr	r2, [r3, #20]
 80075fe:	88fb      	ldrh	r3, [r7, #6]
 8007600:	4013      	ands	r3, r2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d006      	beq.n	8007614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007606:	4a05      	ldr	r2, [pc, #20]	; (800761c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd fc6a 	bl	8004ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40013c00 	.word	0x40013c00

08007620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e264      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d075      	beq.n	800772a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800763e:	4ba3      	ldr	r3, [pc, #652]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 030c 	and.w	r3, r3, #12
 8007646:	2b04      	cmp	r3, #4
 8007648:	d00c      	beq.n	8007664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800764a:	4ba0      	ldr	r3, [pc, #640]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007652:	2b08      	cmp	r3, #8
 8007654:	d112      	bne.n	800767c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007656:	4b9d      	ldr	r3, [pc, #628]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007662:	d10b      	bne.n	800767c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007664:	4b99      	ldr	r3, [pc, #612]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d05b      	beq.n	8007728 <HAL_RCC_OscConfig+0x108>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d157      	bne.n	8007728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e23f      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007684:	d106      	bne.n	8007694 <HAL_RCC_OscConfig+0x74>
 8007686:	4b91      	ldr	r3, [pc, #580]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a90      	ldr	r2, [pc, #576]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 800768c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	e01d      	b.n	80076d0 <HAL_RCC_OscConfig+0xb0>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800769c:	d10c      	bne.n	80076b8 <HAL_RCC_OscConfig+0x98>
 800769e:	4b8b      	ldr	r3, [pc, #556]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a8a      	ldr	r2, [pc, #552]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	4b88      	ldr	r3, [pc, #544]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a87      	ldr	r2, [pc, #540]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	e00b      	b.n	80076d0 <HAL_RCC_OscConfig+0xb0>
 80076b8:	4b84      	ldr	r3, [pc, #528]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a83      	ldr	r2, [pc, #524]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	4b81      	ldr	r3, [pc, #516]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a80      	ldr	r2, [pc, #512]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d013      	beq.n	8007700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d8:	f7ff f85e 	bl	8006798 <HAL_GetTick>
 80076dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076e0:	f7ff f85a 	bl	8006798 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b64      	cmp	r3, #100	; 0x64
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e204      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f2:	4b76      	ldr	r3, [pc, #472]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0xc0>
 80076fe:	e014      	b.n	800772a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007700:	f7ff f84a 	bl	8006798 <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007708:	f7ff f846 	bl	8006798 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b64      	cmp	r3, #100	; 0x64
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e1f0      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800771a:	4b6c      	ldr	r3, [pc, #432]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1f0      	bne.n	8007708 <HAL_RCC_OscConfig+0xe8>
 8007726:	e000      	b.n	800772a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d063      	beq.n	80077fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007736:	4b65      	ldr	r3, [pc, #404]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 030c 	and.w	r3, r3, #12
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007742:	4b62      	ldr	r3, [pc, #392]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800774a:	2b08      	cmp	r3, #8
 800774c:	d11c      	bne.n	8007788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800774e:	4b5f      	ldr	r3, [pc, #380]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d116      	bne.n	8007788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800775a:	4b5c      	ldr	r3, [pc, #368]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <HAL_RCC_OscConfig+0x152>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d001      	beq.n	8007772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e1c4      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007772:	4b56      	ldr	r3, [pc, #344]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4952      	ldr	r1, [pc, #328]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007782:	4313      	orrs	r3, r2
 8007784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007786:	e03a      	b.n	80077fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d020      	beq.n	80077d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007790:	4b4f      	ldr	r3, [pc, #316]	; (80078d0 <HAL_RCC_OscConfig+0x2b0>)
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007796:	f7fe ffff 	bl	8006798 <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800779e:	f7fe fffb 	bl	8006798 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e1a5      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b0:	4b46      	ldr	r3, [pc, #280]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0f0      	beq.n	800779e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077bc:	4b43      	ldr	r3, [pc, #268]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	4940      	ldr	r1, [pc, #256]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	600b      	str	r3, [r1, #0]
 80077d0:	e015      	b.n	80077fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077d2:	4b3f      	ldr	r3, [pc, #252]	; (80078d0 <HAL_RCC_OscConfig+0x2b0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d8:	f7fe ffde 	bl	8006798 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077e0:	f7fe ffda 	bl	8006798 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e184      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077f2:	4b36      	ldr	r3, [pc, #216]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f0      	bne.n	80077e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d030      	beq.n	800786c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d016      	beq.n	8007840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007812:	4b30      	ldr	r3, [pc, #192]	; (80078d4 <HAL_RCC_OscConfig+0x2b4>)
 8007814:	2201      	movs	r2, #1
 8007816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007818:	f7fe ffbe 	bl	8006798 <HAL_GetTick>
 800781c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800781e:	e008      	b.n	8007832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007820:	f7fe ffba 	bl	8006798 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e164      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007832:	4b26      	ldr	r3, [pc, #152]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f0      	beq.n	8007820 <HAL_RCC_OscConfig+0x200>
 800783e:	e015      	b.n	800786c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007840:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <HAL_RCC_OscConfig+0x2b4>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007846:	f7fe ffa7 	bl	8006798 <HAL_GetTick>
 800784a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800784c:	e008      	b.n	8007860 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800784e:	f7fe ffa3 	bl	8006798 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e14d      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007860:	4b1a      	ldr	r3, [pc, #104]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f0      	bne.n	800784e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 80a0 	beq.w	80079ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800787a:	2300      	movs	r3, #0
 800787c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10f      	bne.n	80078aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	4a0e      	ldr	r2, [pc, #56]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 8007894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007898:	6413      	str	r3, [r2, #64]	; 0x40
 800789a:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <HAL_RCC_OscConfig+0x2ac>)
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a2:	60bb      	str	r3, [r7, #8]
 80078a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078a6:	2301      	movs	r3, #1
 80078a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078aa:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <HAL_RCC_OscConfig+0x2b8>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d121      	bne.n	80078fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078b6:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <HAL_RCC_OscConfig+0x2b8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a07      	ldr	r2, [pc, #28]	; (80078d8 <HAL_RCC_OscConfig+0x2b8>)
 80078bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078c2:	f7fe ff69 	bl	8006798 <HAL_GetTick>
 80078c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078c8:	e011      	b.n	80078ee <HAL_RCC_OscConfig+0x2ce>
 80078ca:	bf00      	nop
 80078cc:	40023800 	.word	0x40023800
 80078d0:	42470000 	.word	0x42470000
 80078d4:	42470e80 	.word	0x42470e80
 80078d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078dc:	f7fe ff5c 	bl	8006798 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e106      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ee:	4b85      	ldr	r3, [pc, #532]	; (8007b04 <HAL_RCC_OscConfig+0x4e4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d106      	bne.n	8007910 <HAL_RCC_OscConfig+0x2f0>
 8007902:	4b81      	ldr	r3, [pc, #516]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	4a80      	ldr	r2, [pc, #512]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007908:	f043 0301 	orr.w	r3, r3, #1
 800790c:	6713      	str	r3, [r2, #112]	; 0x70
 800790e:	e01c      	b.n	800794a <HAL_RCC_OscConfig+0x32a>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2b05      	cmp	r3, #5
 8007916:	d10c      	bne.n	8007932 <HAL_RCC_OscConfig+0x312>
 8007918:	4b7b      	ldr	r3, [pc, #492]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 800791a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791c:	4a7a      	ldr	r2, [pc, #488]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 800791e:	f043 0304 	orr.w	r3, r3, #4
 8007922:	6713      	str	r3, [r2, #112]	; 0x70
 8007924:	4b78      	ldr	r3, [pc, #480]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007928:	4a77      	ldr	r2, [pc, #476]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	6713      	str	r3, [r2, #112]	; 0x70
 8007930:	e00b      	b.n	800794a <HAL_RCC_OscConfig+0x32a>
 8007932:	4b75      	ldr	r3, [pc, #468]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007936:	4a74      	ldr	r2, [pc, #464]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007938:	f023 0301 	bic.w	r3, r3, #1
 800793c:	6713      	str	r3, [r2, #112]	; 0x70
 800793e:	4b72      	ldr	r3, [pc, #456]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	4a71      	ldr	r2, [pc, #452]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007944:	f023 0304 	bic.w	r3, r3, #4
 8007948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d015      	beq.n	800797e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007952:	f7fe ff21 	bl	8006798 <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007958:	e00a      	b.n	8007970 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800795a:	f7fe ff1d 	bl	8006798 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	f241 3288 	movw	r2, #5000	; 0x1388
 8007968:	4293      	cmp	r3, r2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e0c5      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007970:	4b65      	ldr	r3, [pc, #404]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0ee      	beq.n	800795a <HAL_RCC_OscConfig+0x33a>
 800797c:	e014      	b.n	80079a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800797e:	f7fe ff0b 	bl	8006798 <HAL_GetTick>
 8007982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007984:	e00a      	b.n	800799c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007986:	f7fe ff07 	bl	8006798 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	f241 3288 	movw	r2, #5000	; 0x1388
 8007994:	4293      	cmp	r3, r2
 8007996:	d901      	bls.n	800799c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e0af      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800799c:	4b5a      	ldr	r3, [pc, #360]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 800799e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1ee      	bne.n	8007986 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d105      	bne.n	80079ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ae:	4b56      	ldr	r3, [pc, #344]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	4a55      	ldr	r2, [pc, #340]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 80079b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 809b 	beq.w	8007afa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079c4:	4b50      	ldr	r3, [pc, #320]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 030c 	and.w	r3, r3, #12
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d05c      	beq.n	8007a8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d141      	bne.n	8007a5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d8:	4b4c      	ldr	r3, [pc, #304]	; (8007b0c <HAL_RCC_OscConfig+0x4ec>)
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079de:	f7fe fedb 	bl	8006798 <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e6:	f7fe fed7 	bl	8006798 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e081      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f8:	4b43      	ldr	r3, [pc, #268]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f0      	bne.n	80079e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69da      	ldr	r2, [r3, #28]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	019b      	lsls	r3, r3, #6
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	041b      	lsls	r3, r3, #16
 8007a20:	431a      	orrs	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	061b      	lsls	r3, r3, #24
 8007a28:	4937      	ldr	r1, [pc, #220]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a2e:	4b37      	ldr	r3, [pc, #220]	; (8007b0c <HAL_RCC_OscConfig+0x4ec>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a34:	f7fe feb0 	bl	8006798 <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a3c:	f7fe feac 	bl	8006798 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e056      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a4e:	4b2e      	ldr	r3, [pc, #184]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0f0      	beq.n	8007a3c <HAL_RCC_OscConfig+0x41c>
 8007a5a:	e04e      	b.n	8007afa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5c:	4b2b      	ldr	r3, [pc, #172]	; (8007b0c <HAL_RCC_OscConfig+0x4ec>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a62:	f7fe fe99 	bl	8006798 <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a68:	e008      	b.n	8007a7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a6a:	f7fe fe95 	bl	8006798 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e03f      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a7c:	4b22      	ldr	r3, [pc, #136]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f0      	bne.n	8007a6a <HAL_RCC_OscConfig+0x44a>
 8007a88:	e037      	b.n	8007afa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e032      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a96:	4b1c      	ldr	r3, [pc, #112]	; (8007b08 <HAL_RCC_OscConfig+0x4e8>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d028      	beq.n	8007af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d121      	bne.n	8007af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d11a      	bne.n	8007af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007acc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d111      	bne.n	8007af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	085b      	lsrs	r3, r3, #1
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d107      	bne.n	8007af6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d001      	beq.n	8007afa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	40007000 	.word	0x40007000
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	42470060 	.word	0x42470060

08007b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0cc      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b24:	4b68      	ldr	r3, [pc, #416]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d90c      	bls.n	8007b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b32:	4b65      	ldr	r3, [pc, #404]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b3a:	4b63      	ldr	r3, [pc, #396]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d001      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e0b8      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d020      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b64:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	4a58      	ldr	r2, [pc, #352]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b7c:	4b53      	ldr	r3, [pc, #332]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4a52      	ldr	r2, [pc, #328]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b88:	4b50      	ldr	r3, [pc, #320]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	494d      	ldr	r1, [pc, #308]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d044      	beq.n	8007c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d107      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bae:	4b47      	ldr	r3, [pc, #284]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d119      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e07f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d003      	beq.n	8007bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d107      	bne.n	8007bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bce:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e06f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bde:	4b3b      	ldr	r3, [pc, #236]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e067      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bee:	4b37      	ldr	r3, [pc, #220]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f023 0203 	bic.w	r2, r3, #3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	4934      	ldr	r1, [pc, #208]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c00:	f7fe fdca 	bl	8006798 <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c06:	e00a      	b.n	8007c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c08:	f7fe fdc6 	bl	8006798 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e04f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c1e:	4b2b      	ldr	r3, [pc, #172]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f003 020c 	and.w	r2, r3, #12
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d1eb      	bne.n	8007c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c30:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d20c      	bcs.n	8007c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3e:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c46:	4b20      	ldr	r3, [pc, #128]	; (8007cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d001      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e032      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4916      	ldr	r1, [pc, #88]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c82:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	490e      	ldr	r1, [pc, #56]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c96:	f000 f821 	bl	8007cdc <HAL_RCC_GetSysClockFreq>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	490a      	ldr	r1, [pc, #40]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007ca8:	5ccb      	ldrb	r3, [r1, r3]
 8007caa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cae:	4a09      	ldr	r2, [pc, #36]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fd2a 	bl	8006710 <HAL_InitTick>

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40023c00 	.word	0x40023c00
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	0800f0f0 	.word	0x0800f0f0
 8007cd4:	20000038 	.word	0x20000038
 8007cd8:	2000003c 	.word	0x2000003c

08007cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cdc:	b5b0      	push	{r4, r5, r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	6079      	str	r1, [r7, #4]
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	60f9      	str	r1, [r7, #12]
 8007cea:	2100      	movs	r1, #0
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007cee:	2100      	movs	r1, #0
 8007cf0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cf2:	4952      	ldr	r1, [pc, #328]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8007cf4:	6889      	ldr	r1, [r1, #8]
 8007cf6:	f001 010c 	and.w	r1, r1, #12
 8007cfa:	2908      	cmp	r1, #8
 8007cfc:	d00d      	beq.n	8007d1a <HAL_RCC_GetSysClockFreq+0x3e>
 8007cfe:	2908      	cmp	r1, #8
 8007d00:	f200 8094 	bhi.w	8007e2c <HAL_RCC_GetSysClockFreq+0x150>
 8007d04:	2900      	cmp	r1, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_RCC_GetSysClockFreq+0x32>
 8007d08:	2904      	cmp	r1, #4
 8007d0a:	d003      	beq.n	8007d14 <HAL_RCC_GetSysClockFreq+0x38>
 8007d0c:	e08e      	b.n	8007e2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d0e:	4b4c      	ldr	r3, [pc, #304]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x164>)
 8007d10:	60bb      	str	r3, [r7, #8]
       break;
 8007d12:	e08e      	b.n	8007e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d14:	4b4b      	ldr	r3, [pc, #300]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d16:	60bb      	str	r3, [r7, #8]
      break;
 8007d18:	e08b      	b.n	8007e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d1a:	4948      	ldr	r1, [pc, #288]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d1c:	6849      	ldr	r1, [r1, #4]
 8007d1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007d22:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d24:	4945      	ldr	r1, [pc, #276]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d26:	6849      	ldr	r1, [r1, #4]
 8007d28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d024      	beq.n	8007d7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d30:	4942      	ldr	r1, [pc, #264]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d32:	6849      	ldr	r1, [r1, #4]
 8007d34:	0989      	lsrs	r1, r1, #6
 8007d36:	4608      	mov	r0, r1
 8007d38:	f04f 0100 	mov.w	r1, #0
 8007d3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007d40:	f04f 0500 	mov.w	r5, #0
 8007d44:	ea00 0204 	and.w	r2, r0, r4
 8007d48:	ea01 0305 	and.w	r3, r1, r5
 8007d4c:	493d      	ldr	r1, [pc, #244]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d4e:	fb01 f003 	mul.w	r0, r1, r3
 8007d52:	2100      	movs	r1, #0
 8007d54:	fb01 f102 	mul.w	r1, r1, r2
 8007d58:	1844      	adds	r4, r0, r1
 8007d5a:	493a      	ldr	r1, [pc, #232]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d5c:	fba2 0101 	umull	r0, r1, r2, r1
 8007d60:	1863      	adds	r3, r4, r1
 8007d62:	4619      	mov	r1, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	f7f8 ff8c 	bl	8000c88 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4613      	mov	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e04a      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d7a:	4b30      	ldr	r3, [pc, #192]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	099b      	lsrs	r3, r3, #6
 8007d80:	461a      	mov	r2, r3
 8007d82:	f04f 0300 	mov.w	r3, #0
 8007d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d8a:	f04f 0100 	mov.w	r1, #0
 8007d8e:	ea02 0400 	and.w	r4, r2, r0
 8007d92:	ea03 0501 	and.w	r5, r3, r1
 8007d96:	4620      	mov	r0, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	014b      	lsls	r3, r1, #5
 8007da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007da8:	0142      	lsls	r2, r0, #5
 8007daa:	4610      	mov	r0, r2
 8007dac:	4619      	mov	r1, r3
 8007dae:	1b00      	subs	r0, r0, r4
 8007db0:	eb61 0105 	sbc.w	r1, r1, r5
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	018b      	lsls	r3, r1, #6
 8007dbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dc2:	0182      	lsls	r2, r0, #6
 8007dc4:	1a12      	subs	r2, r2, r0
 8007dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8007dca:	f04f 0000 	mov.w	r0, #0
 8007dce:	f04f 0100 	mov.w	r1, #0
 8007dd2:	00d9      	lsls	r1, r3, #3
 8007dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dd8:	00d0      	lsls	r0, r2, #3
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	1912      	adds	r2, r2, r4
 8007de0:	eb45 0303 	adc.w	r3, r5, r3
 8007de4:	f04f 0000 	mov.w	r0, #0
 8007de8:	f04f 0100 	mov.w	r1, #0
 8007dec:	0299      	lsls	r1, r3, #10
 8007dee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007df2:	0290      	lsls	r0, r2, #10
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	f7f8 ff40 	bl	8000c88 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e28:	60bb      	str	r3, [r7, #8]
      break;
 8007e2a:	e002      	b.n	8007e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x164>)
 8007e2e:	60bb      	str	r3, [r7, #8]
      break;
 8007e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e32:	68bb      	ldr	r3, [r7, #8]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e3c:	40023800 	.word	0x40023800
 8007e40:	00f42400 	.word	0x00f42400
 8007e44:	017d7840 	.word	0x017d7840

08007e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20000038 	.word	0x20000038

08007e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e64:	f7ff fff0 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	0a9b      	lsrs	r3, r3, #10
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	4903      	ldr	r1, [pc, #12]	; (8007e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e76:	5ccb      	ldrb	r3, [r1, r3]
 8007e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	40023800 	.word	0x40023800
 8007e84:	0800f100 	.word	0x0800f100

08007e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e8c:	f7ff ffdc 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	0b5b      	lsrs	r3, r3, #13
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	4903      	ldr	r1, [pc, #12]	; (8007eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	0800f100 	.word	0x0800f100

08007eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e041      	b.n	8007f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fd fe66 	bl	8005ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f000 fc84 	bl	80087fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d001      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e04e      	b.n	8008006 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0201 	orr.w	r2, r2, #1
 8007f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a23      	ldr	r2, [pc, #140]	; (8008014 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f92:	d01d      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1f      	ldr	r2, [pc, #124]	; (8008018 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1e      	ldr	r2, [pc, #120]	; (800801c <HAL_TIM_Base_Start_IT+0xcc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a19      	ldr	r2, [pc, #100]	; (8008028 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a18      	ldr	r2, [pc, #96]	; (800802c <HAL_TIM_Base_Start_IT+0xdc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d111      	bne.n	8007ff4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d010      	beq.n	8008004 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff2:	e007      	b.n	8008004 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40010000 	.word	0x40010000
 8008018:	40000400 	.word	0x40000400
 800801c:	40000800 	.word	0x40000800
 8008020:	40000c00 	.word	0x40000c00
 8008024:	40010400 	.word	0x40010400
 8008028:	40014000 	.word	0x40014000
 800802c:	40001800 	.word	0x40001800

08008030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e041      	b.n	80080c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d106      	bne.n	800805c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f839 	bl	80080ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f000 fbc4 	bl	80087fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
	...

080080e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d109      	bne.n	8008108 <HAL_TIM_PWM_Start+0x24>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	bf14      	ite	ne
 8008100:	2301      	movne	r3, #1
 8008102:	2300      	moveq	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	e022      	b.n	800814e <HAL_TIM_PWM_Start+0x6a>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b04      	cmp	r3, #4
 800810c:	d109      	bne.n	8008122 <HAL_TIM_PWM_Start+0x3e>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b01      	cmp	r3, #1
 8008118:	bf14      	ite	ne
 800811a:	2301      	movne	r3, #1
 800811c:	2300      	moveq	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	e015      	b.n	800814e <HAL_TIM_PWM_Start+0x6a>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b08      	cmp	r3, #8
 8008126:	d109      	bne.n	800813c <HAL_TIM_PWM_Start+0x58>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	bf14      	ite	ne
 8008134:	2301      	movne	r3, #1
 8008136:	2300      	moveq	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	e008      	b.n	800814e <HAL_TIM_PWM_Start+0x6a>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b01      	cmp	r3, #1
 8008146:	bf14      	ite	ne
 8008148:	2301      	movne	r3, #1
 800814a:	2300      	moveq	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e07c      	b.n	8008250 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <HAL_TIM_PWM_Start+0x82>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008164:	e013      	b.n	800818e <HAL_TIM_PWM_Start+0xaa>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b04      	cmp	r3, #4
 800816a:	d104      	bne.n	8008176 <HAL_TIM_PWM_Start+0x92>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008174:	e00b      	b.n	800818e <HAL_TIM_PWM_Start+0xaa>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b08      	cmp	r3, #8
 800817a:	d104      	bne.n	8008186 <HAL_TIM_PWM_Start+0xa2>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008184:	e003      	b.n	800818e <HAL_TIM_PWM_Start+0xaa>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2202      	movs	r2, #2
 800818a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2201      	movs	r2, #1
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fe1a 	bl	8008dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a2d      	ldr	r2, [pc, #180]	; (8008258 <HAL_TIM_PWM_Start+0x174>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d004      	beq.n	80081b0 <HAL_TIM_PWM_Start+0xcc>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a2c      	ldr	r2, [pc, #176]	; (800825c <HAL_TIM_PWM_Start+0x178>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d101      	bne.n	80081b4 <HAL_TIM_PWM_Start+0xd0>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e000      	b.n	80081b6 <HAL_TIM_PWM_Start+0xd2>
 80081b4:	2300      	movs	r3, #0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a22      	ldr	r2, [pc, #136]	; (8008258 <HAL_TIM_PWM_Start+0x174>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d022      	beq.n	800821a <HAL_TIM_PWM_Start+0x136>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081dc:	d01d      	beq.n	800821a <HAL_TIM_PWM_Start+0x136>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1f      	ldr	r2, [pc, #124]	; (8008260 <HAL_TIM_PWM_Start+0x17c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d018      	beq.n	800821a <HAL_TIM_PWM_Start+0x136>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a1d      	ldr	r2, [pc, #116]	; (8008264 <HAL_TIM_PWM_Start+0x180>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d013      	beq.n	800821a <HAL_TIM_PWM_Start+0x136>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a1c      	ldr	r2, [pc, #112]	; (8008268 <HAL_TIM_PWM_Start+0x184>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00e      	beq.n	800821a <HAL_TIM_PWM_Start+0x136>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a16      	ldr	r2, [pc, #88]	; (800825c <HAL_TIM_PWM_Start+0x178>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d009      	beq.n	800821a <HAL_TIM_PWM_Start+0x136>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a18      	ldr	r2, [pc, #96]	; (800826c <HAL_TIM_PWM_Start+0x188>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d004      	beq.n	800821a <HAL_TIM_PWM_Start+0x136>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a16      	ldr	r2, [pc, #88]	; (8008270 <HAL_TIM_PWM_Start+0x18c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d111      	bne.n	800823e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b06      	cmp	r3, #6
 800822a:	d010      	beq.n	800824e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0201 	orr.w	r2, r2, #1
 800823a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823c:	e007      	b.n	800824e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f042 0201 	orr.w	r2, r2, #1
 800824c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	40010000 	.word	0x40010000
 800825c:	40010400 	.word	0x40010400
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800
 8008268:	40000c00 	.word	0x40000c00
 800826c:	40014000 	.word	0x40014000
 8008270:	40001800 	.word	0x40001800

08008274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b02      	cmp	r3, #2
 8008288:	d122      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b02      	cmp	r3, #2
 8008296:	d11b      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f06f 0202 	mvn.w	r2, #2
 80082a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa81 	bl	80087be <HAL_TIM_IC_CaptureCallback>
 80082bc:	e005      	b.n	80082ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa73 	bl	80087aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fa84 	bl	80087d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d122      	bne.n	8008324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d11b      	bne.n	8008324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0204 	mvn.w	r2, #4
 80082f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2202      	movs	r2, #2
 80082fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa57 	bl	80087be <HAL_TIM_IC_CaptureCallback>
 8008310:	e005      	b.n	800831e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa49 	bl	80087aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fa5a 	bl	80087d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b08      	cmp	r3, #8
 8008330:	d122      	bne.n	8008378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0308 	and.w	r3, r3, #8
 800833c:	2b08      	cmp	r3, #8
 800833e:	d11b      	bne.n	8008378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0208 	mvn.w	r2, #8
 8008348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2204      	movs	r2, #4
 800834e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa2d 	bl	80087be <HAL_TIM_IC_CaptureCallback>
 8008364:	e005      	b.n	8008372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa1f 	bl	80087aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fa30 	bl	80087d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	f003 0310 	and.w	r3, r3, #16
 8008382:	2b10      	cmp	r3, #16
 8008384:	d122      	bne.n	80083cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b10      	cmp	r3, #16
 8008392:	d11b      	bne.n	80083cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f06f 0210 	mvn.w	r2, #16
 800839c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2208      	movs	r2, #8
 80083a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa03 	bl	80087be <HAL_TIM_IC_CaptureCallback>
 80083b8:	e005      	b.n	80083c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f9f5 	bl	80087aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa06 	bl	80087d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d10e      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d107      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0201 	mvn.w	r2, #1
 80083f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f9cf 	bl	8008796 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008402:	2b80      	cmp	r3, #128	; 0x80
 8008404:	d10e      	bne.n	8008424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008410:	2b80      	cmp	r3, #128	; 0x80
 8008412:	d107      	bne.n	8008424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800841c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fdd4 	bl	8008fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842e:	2b40      	cmp	r3, #64	; 0x40
 8008430:	d10e      	bne.n	8008450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	d107      	bne.n	8008450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9cb 	bl	80087e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b20      	cmp	r3, #32
 800845c:	d10e      	bne.n	800847c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f003 0320 	and.w	r3, r3, #32
 8008468:	2b20      	cmp	r3, #32
 800846a:	d107      	bne.n	800847c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0220 	mvn.w	r2, #32
 8008474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fd9e 	bl	8008fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800849a:	2b01      	cmp	r3, #1
 800849c:	d101      	bne.n	80084a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800849e:	2302      	movs	r3, #2
 80084a0:	e0ae      	b.n	8008600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b0c      	cmp	r3, #12
 80084ae:	f200 809f 	bhi.w	80085f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084ed 	.word	0x080084ed
 80084bc:	080085f1 	.word	0x080085f1
 80084c0:	080085f1 	.word	0x080085f1
 80084c4:	080085f1 	.word	0x080085f1
 80084c8:	0800852d 	.word	0x0800852d
 80084cc:	080085f1 	.word	0x080085f1
 80084d0:	080085f1 	.word	0x080085f1
 80084d4:	080085f1 	.word	0x080085f1
 80084d8:	0800856f 	.word	0x0800856f
 80084dc:	080085f1 	.word	0x080085f1
 80084e0:	080085f1 	.word	0x080085f1
 80084e4:	080085f1 	.word	0x080085f1
 80084e8:	080085af 	.word	0x080085af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fa22 	bl	800893c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f042 0208 	orr.w	r2, r2, #8
 8008506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 0204 	bic.w	r2, r2, #4
 8008516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6999      	ldr	r1, [r3, #24]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691a      	ldr	r2, [r3, #16]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	619a      	str	r2, [r3, #24]
      break;
 800852a:	e064      	b.n	80085f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fa72 	bl	8008a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6999      	ldr	r1, [r3, #24]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	021a      	lsls	r2, r3, #8
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	619a      	str	r2, [r3, #24]
      break;
 800856c:	e043      	b.n	80085f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fac7 	bl	8008b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f042 0208 	orr.w	r2, r2, #8
 8008588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0204 	bic.w	r2, r2, #4
 8008598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69d9      	ldr	r1, [r3, #28]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	61da      	str	r2, [r3, #28]
      break;
 80085ac:	e023      	b.n	80085f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fb1b 	bl	8008bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69da      	ldr	r2, [r3, #28]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69da      	ldr	r2, [r3, #28]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69d9      	ldr	r1, [r3, #28]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	021a      	lsls	r2, r3, #8
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	61da      	str	r2, [r3, #28]
      break;
 80085ee:	e002      	b.n	80085f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	75fb      	strb	r3, [r7, #23]
      break;
 80085f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800861c:	2b01      	cmp	r3, #1
 800861e:	d101      	bne.n	8008624 <HAL_TIM_ConfigClockSource+0x1c>
 8008620:	2302      	movs	r3, #2
 8008622:	e0b4      	b.n	800878e <HAL_TIM_ConfigClockSource+0x186>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800864a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865c:	d03e      	beq.n	80086dc <HAL_TIM_ConfigClockSource+0xd4>
 800865e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008662:	f200 8087 	bhi.w	8008774 <HAL_TIM_ConfigClockSource+0x16c>
 8008666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866a:	f000 8086 	beq.w	800877a <HAL_TIM_ConfigClockSource+0x172>
 800866e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008672:	d87f      	bhi.n	8008774 <HAL_TIM_ConfigClockSource+0x16c>
 8008674:	2b70      	cmp	r3, #112	; 0x70
 8008676:	d01a      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0xa6>
 8008678:	2b70      	cmp	r3, #112	; 0x70
 800867a:	d87b      	bhi.n	8008774 <HAL_TIM_ConfigClockSource+0x16c>
 800867c:	2b60      	cmp	r3, #96	; 0x60
 800867e:	d050      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x11a>
 8008680:	2b60      	cmp	r3, #96	; 0x60
 8008682:	d877      	bhi.n	8008774 <HAL_TIM_ConfigClockSource+0x16c>
 8008684:	2b50      	cmp	r3, #80	; 0x50
 8008686:	d03c      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0xfa>
 8008688:	2b50      	cmp	r3, #80	; 0x50
 800868a:	d873      	bhi.n	8008774 <HAL_TIM_ConfigClockSource+0x16c>
 800868c:	2b40      	cmp	r3, #64	; 0x40
 800868e:	d058      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x13a>
 8008690:	2b40      	cmp	r3, #64	; 0x40
 8008692:	d86f      	bhi.n	8008774 <HAL_TIM_ConfigClockSource+0x16c>
 8008694:	2b30      	cmp	r3, #48	; 0x30
 8008696:	d064      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x15a>
 8008698:	2b30      	cmp	r3, #48	; 0x30
 800869a:	d86b      	bhi.n	8008774 <HAL_TIM_ConfigClockSource+0x16c>
 800869c:	2b20      	cmp	r3, #32
 800869e:	d060      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x15a>
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	d867      	bhi.n	8008774 <HAL_TIM_ConfigClockSource+0x16c>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d05c      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x15a>
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d05a      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x15a>
 80086ac:	e062      	b.n	8008774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6899      	ldr	r1, [r3, #8]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f000 fb67 	bl	8008d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	609a      	str	r2, [r3, #8]
      break;
 80086da:	e04f      	b.n	800877c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	6899      	ldr	r1, [r3, #8]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f000 fb50 	bl	8008d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086fe:	609a      	str	r2, [r3, #8]
      break;
 8008700:	e03c      	b.n	800877c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6859      	ldr	r1, [r3, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	461a      	mov	r2, r3
 8008710:	f000 fac4 	bl	8008c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2150      	movs	r1, #80	; 0x50
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fb1d 	bl	8008d5a <TIM_ITRx_SetConfig>
      break;
 8008720:	e02c      	b.n	800877c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	6859      	ldr	r1, [r3, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	461a      	mov	r2, r3
 8008730:	f000 fae3 	bl	8008cfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2160      	movs	r1, #96	; 0x60
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fb0d 	bl	8008d5a <TIM_ITRx_SetConfig>
      break;
 8008740:	e01c      	b.n	800877c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6859      	ldr	r1, [r3, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	461a      	mov	r2, r3
 8008750:	f000 faa4 	bl	8008c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2140      	movs	r1, #64	; 0x40
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fafd 	bl	8008d5a <TIM_ITRx_SetConfig>
      break;
 8008760:	e00c      	b.n	800877c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4619      	mov	r1, r3
 800876c:	4610      	mov	r0, r2
 800876e:	f000 faf4 	bl	8008d5a <TIM_ITRx_SetConfig>
      break;
 8008772:	e003      	b.n	800877c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	73fb      	strb	r3, [r7, #15]
      break;
 8008778:	e000      	b.n	800877c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800877a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b083      	sub	sp, #12
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a40      	ldr	r2, [pc, #256]	; (8008910 <TIM_Base_SetConfig+0x114>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d013      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881a:	d00f      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a3d      	ldr	r2, [pc, #244]	; (8008914 <TIM_Base_SetConfig+0x118>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00b      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a3c      	ldr	r2, [pc, #240]	; (8008918 <TIM_Base_SetConfig+0x11c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d007      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a3b      	ldr	r2, [pc, #236]	; (800891c <TIM_Base_SetConfig+0x120>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d003      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a3a      	ldr	r2, [pc, #232]	; (8008920 <TIM_Base_SetConfig+0x124>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d108      	bne.n	800884e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a2f      	ldr	r2, [pc, #188]	; (8008910 <TIM_Base_SetConfig+0x114>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d02b      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885c:	d027      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a2c      	ldr	r2, [pc, #176]	; (8008914 <TIM_Base_SetConfig+0x118>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d023      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a2b      	ldr	r2, [pc, #172]	; (8008918 <TIM_Base_SetConfig+0x11c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d01f      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a2a      	ldr	r2, [pc, #168]	; (800891c <TIM_Base_SetConfig+0x120>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d01b      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a29      	ldr	r2, [pc, #164]	; (8008920 <TIM_Base_SetConfig+0x124>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d017      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a28      	ldr	r2, [pc, #160]	; (8008924 <TIM_Base_SetConfig+0x128>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d013      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a27      	ldr	r2, [pc, #156]	; (8008928 <TIM_Base_SetConfig+0x12c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00f      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a26      	ldr	r2, [pc, #152]	; (800892c <TIM_Base_SetConfig+0x130>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00b      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a25      	ldr	r2, [pc, #148]	; (8008930 <TIM_Base_SetConfig+0x134>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d007      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a24      	ldr	r2, [pc, #144]	; (8008934 <TIM_Base_SetConfig+0x138>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d003      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a23      	ldr	r2, [pc, #140]	; (8008938 <TIM_Base_SetConfig+0x13c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d108      	bne.n	80088c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4313      	orrs	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a0a      	ldr	r2, [pc, #40]	; (8008910 <TIM_Base_SetConfig+0x114>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d003      	beq.n	80088f4 <TIM_Base_SetConfig+0xf8>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <TIM_Base_SetConfig+0x124>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d103      	bne.n	80088fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	615a      	str	r2, [r3, #20]
}
 8008902:	bf00      	nop
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	40010000 	.word	0x40010000
 8008914:	40000400 	.word	0x40000400
 8008918:	40000800 	.word	0x40000800
 800891c:	40000c00 	.word	0x40000c00
 8008920:	40010400 	.word	0x40010400
 8008924:	40014000 	.word	0x40014000
 8008928:	40014400 	.word	0x40014400
 800892c:	40014800 	.word	0x40014800
 8008930:	40001800 	.word	0x40001800
 8008934:	40001c00 	.word	0x40001c00
 8008938:	40002000 	.word	0x40002000

0800893c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f023 0302 	bic.w	r3, r3, #2
 8008984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	4313      	orrs	r3, r2
 800898e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a20      	ldr	r2, [pc, #128]	; (8008a14 <TIM_OC1_SetConfig+0xd8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d003      	beq.n	80089a0 <TIM_OC1_SetConfig+0x64>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a1f      	ldr	r2, [pc, #124]	; (8008a18 <TIM_OC1_SetConfig+0xdc>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d10c      	bne.n	80089ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f023 0308 	bic.w	r3, r3, #8
 80089a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 0304 	bic.w	r3, r3, #4
 80089b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a15      	ldr	r2, [pc, #84]	; (8008a14 <TIM_OC1_SetConfig+0xd8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d003      	beq.n	80089ca <TIM_OC1_SetConfig+0x8e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <TIM_OC1_SetConfig+0xdc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d111      	bne.n	80089ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	621a      	str	r2, [r3, #32]
}
 8008a08:	bf00      	nop
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	40010000 	.word	0x40010000
 8008a18:	40010400 	.word	0x40010400

08008a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f023 0210 	bic.w	r2, r3, #16
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f023 0320 	bic.w	r3, r3, #32
 8008a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a22      	ldr	r2, [pc, #136]	; (8008b00 <TIM_OC2_SetConfig+0xe4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <TIM_OC2_SetConfig+0x68>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a21      	ldr	r2, [pc, #132]	; (8008b04 <TIM_OC2_SetConfig+0xe8>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d10d      	bne.n	8008aa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a17      	ldr	r2, [pc, #92]	; (8008b00 <TIM_OC2_SetConfig+0xe4>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <TIM_OC2_SetConfig+0x94>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a16      	ldr	r2, [pc, #88]	; (8008b04 <TIM_OC2_SetConfig+0xe8>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d113      	bne.n	8008ad8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	40010000 	.word	0x40010000
 8008b04:	40010400 	.word	0x40010400

08008b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	021b      	lsls	r3, r3, #8
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a21      	ldr	r2, [pc, #132]	; (8008be8 <TIM_OC3_SetConfig+0xe0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d003      	beq.n	8008b6e <TIM_OC3_SetConfig+0x66>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a20      	ldr	r2, [pc, #128]	; (8008bec <TIM_OC3_SetConfig+0xe4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d10d      	bne.n	8008b8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a16      	ldr	r2, [pc, #88]	; (8008be8 <TIM_OC3_SetConfig+0xe0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d003      	beq.n	8008b9a <TIM_OC3_SetConfig+0x92>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a15      	ldr	r2, [pc, #84]	; (8008bec <TIM_OC3_SetConfig+0xe4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d113      	bne.n	8008bc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	621a      	str	r2, [r3, #32]
}
 8008bdc:	bf00      	nop
 8008bde:	371c      	adds	r7, #28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	40010000 	.word	0x40010000
 8008bec:	40010400 	.word	0x40010400

08008bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	031b      	lsls	r3, r3, #12
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a12      	ldr	r2, [pc, #72]	; (8008c94 <TIM_OC4_SetConfig+0xa4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d003      	beq.n	8008c58 <TIM_OC4_SetConfig+0x68>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a11      	ldr	r2, [pc, #68]	; (8008c98 <TIM_OC4_SetConfig+0xa8>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d109      	bne.n	8008c6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	019b      	lsls	r3, r3, #6
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	621a      	str	r2, [r3, #32]
}
 8008c86:	bf00      	nop
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	40010000 	.word	0x40010000
 8008c98:	40010400 	.word	0x40010400

08008c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	f023 0201 	bic.w	r2, r3, #1
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f023 030a 	bic.w	r3, r3, #10
 8008cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	621a      	str	r2, [r3, #32]
}
 8008cee:	bf00      	nop
 8008cf0:	371c      	adds	r7, #28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b087      	sub	sp, #28
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f023 0210 	bic.w	r2, r3, #16
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	031b      	lsls	r3, r3, #12
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	f043 0307 	orr.w	r3, r3, #7
 8008d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	609a      	str	r2, [r3, #8]
}
 8008d84:	bf00      	nop
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	021a      	lsls	r2, r3, #8
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	431a      	orrs	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	609a      	str	r2, [r3, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 031f 	and.w	r3, r3, #31
 8008de2:	2201      	movs	r2, #1
 8008de4:	fa02 f303 	lsl.w	r3, r2, r3
 8008de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a1a      	ldr	r2, [r3, #32]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	43db      	mvns	r3, r3
 8008df2:	401a      	ands	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1a      	ldr	r2, [r3, #32]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f003 031f 	and.w	r3, r3, #31
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	fa01 f303 	lsl.w	r3, r1, r3
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	621a      	str	r2, [r3, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d101      	bne.n	8008e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e30:	2302      	movs	r3, #2
 8008e32:	e05a      	b.n	8008eea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a21      	ldr	r2, [pc, #132]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d022      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e80:	d01d      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d018      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a1b      	ldr	r2, [pc, #108]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d013      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d00e      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d009      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a17      	ldr	r2, [pc, #92]	; (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d004      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d10c      	bne.n	8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40001800 	.word	0x40001800

08008f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e03d      	b.n	8008fac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e03f      	b.n	8009072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d106      	bne.n	800900c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fc fe70 	bl	8005cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2224      	movs	r2, #36	; 0x24
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 ffa9 	bl	8009f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	691a      	ldr	r2, [r3, #16]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	695a      	ldr	r2, [r3, #20]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2220      	movs	r2, #32
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	4613      	mov	r3, r2
 8009086:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b20      	cmp	r3, #32
 8009092:	d11d      	bne.n	80090d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <HAL_UART_Receive_IT+0x26>
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e016      	b.n	80090d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d101      	bne.n	80090b2 <HAL_UART_Receive_IT+0x38>
 80090ae:	2302      	movs	r3, #2
 80090b0:	e00f      	b.n	80090d2 <HAL_UART_Receive_IT+0x58>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80090c0:	88fb      	ldrh	r3, [r7, #6]
 80090c2:	461a      	mov	r2, r3
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 fcc1 	bl	8009a4e <UART_Start_Receive_IT>
 80090cc:	4603      	mov	r3, r0
 80090ce:	e000      	b.n	80090d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80090d0:	2302      	movs	r3, #2
  }
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08c      	sub	sp, #48	; 0x30
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d165      	bne.n	80091c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <HAL_UART_Transmit_DMA+0x26>
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e05e      	b.n	80091c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_UART_Transmit_DMA+0x38>
 8009110:	2302      	movs	r3, #2
 8009112:	e057      	b.n	80091c4 <HAL_UART_Transmit_DMA+0xe8>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	88fa      	ldrh	r2, [r7, #6]
 8009126:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	88fa      	ldrh	r2, [r7, #6]
 800912c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2221      	movs	r2, #33	; 0x21
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009140:	4a22      	ldr	r2, [pc, #136]	; (80091cc <HAL_UART_Transmit_DMA+0xf0>)
 8009142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009148:	4a21      	ldr	r2, [pc, #132]	; (80091d0 <HAL_UART_Transmit_DMA+0xf4>)
 800914a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009150:	4a20      	ldr	r2, [pc, #128]	; (80091d4 <HAL_UART_Transmit_DMA+0xf8>)
 8009152:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009158:	2200      	movs	r2, #0
 800915a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800915c:	f107 0308 	add.w	r3, r7, #8
 8009160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009168:	6819      	ldr	r1, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3304      	adds	r3, #4
 8009170:	461a      	mov	r2, r3
 8009172:	88fb      	ldrh	r3, [r7, #6]
 8009174:	f7fd fd00 	bl	8006b78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009180:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3314      	adds	r3, #20
 8009190:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	617b      	str	r3, [r7, #20]
   return(result);
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3314      	adds	r3, #20
 80091a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091aa:	627a      	str	r2, [r7, #36]	; 0x24
 80091ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	6a39      	ldr	r1, [r7, #32]
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e5      	bne.n	800918a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	e000      	b.n	80091c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80091c2:	2302      	movs	r3, #2
  }
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3730      	adds	r7, #48	; 0x30
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	080097a9 	.word	0x080097a9
 80091d0:	08009843 	.word	0x08009843
 80091d4:	080099bb 	.word	0x080099bb

080091d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d11d      	bne.n	800922e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <HAL_UART_Receive_DMA+0x26>
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e016      	b.n	8009230 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_UART_Receive_DMA+0x38>
 800920c:	2302      	movs	r3, #2
 800920e:	e00f      	b.n	8009230 <HAL_UART_Receive_DMA+0x58>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	461a      	mov	r2, r3
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 fc4d 	bl	8009ac4 <UART_Start_Receive_DMA>
 800922a:	4603      	mov	r3, r0
 800922c:	e000      	b.n	8009230 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800922e:	2302      	movs	r3, #2
  }
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b0ba      	sub	sp, #232	; 0xe8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800925e:	2300      	movs	r3, #0
 8009260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009264:	2300      	movs	r3, #0
 8009266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10f      	bne.n	800929e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800927e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <HAL_UART_IRQHandler+0x66>
 800928a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fdb5 	bl	8009e06 <UART_Receive_IT>
      return;
 800929c:	e256      	b.n	800974c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800929e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 80de 	beq.w	8009464 <HAL_UART_IRQHandler+0x22c>
 80092a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80092b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80d1 	beq.w	8009464 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80092c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <HAL_UART_IRQHandler+0xae>
 80092ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	f043 0201 	orr.w	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ea:	f003 0304 	and.w	r3, r3, #4
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00b      	beq.n	800930a <HAL_UART_IRQHandler+0xd2>
 80092f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d005      	beq.n	800930a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f043 0202 	orr.w	r2, r3, #2
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800930a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00b      	beq.n	800932e <HAL_UART_IRQHandler+0xf6>
 8009316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d005      	beq.n	800932e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	f043 0204 	orr.w	r2, r3, #4
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800932e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009332:	f003 0308 	and.w	r3, r3, #8
 8009336:	2b00      	cmp	r3, #0
 8009338:	d011      	beq.n	800935e <HAL_UART_IRQHandler+0x126>
 800933a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d105      	bne.n	8009352 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	f043 0208 	orr.w	r2, r3, #8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 81ed 	beq.w	8009742 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800936c:	f003 0320 	and.w	r3, r3, #32
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <HAL_UART_IRQHandler+0x14e>
 8009374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fd40 	bl	8009e06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009390:	2b40      	cmp	r3, #64	; 0x40
 8009392:	bf0c      	ite	eq
 8009394:	2301      	moveq	r3, #1
 8009396:	2300      	movne	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d103      	bne.n	80093b2 <HAL_UART_IRQHandler+0x17a>
 80093aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d04f      	beq.n	8009452 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fc48 	bl	8009c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c2:	2b40      	cmp	r3, #64	; 0x40
 80093c4:	d141      	bne.n	800944a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3314      	adds	r3, #20
 80093cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80093dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3314      	adds	r3, #20
 80093ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800940a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1d9      	bne.n	80093c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	2b00      	cmp	r3, #0
 8009418:	d013      	beq.n	8009442 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	4a7d      	ldr	r2, [pc, #500]	; (8009614 <HAL_UART_IRQHandler+0x3dc>)
 8009420:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	4618      	mov	r0, r3
 8009428:	f7fd fc6e 	bl	8006d08 <HAL_DMA_Abort_IT>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d016      	beq.n	8009460 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800943c:	4610      	mov	r0, r2
 800943e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009440:	e00e      	b.n	8009460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f99a 	bl	800977c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009448:	e00a      	b.n	8009460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f996 	bl	800977c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009450:	e006      	b.n	8009460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f992 	bl	800977c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800945e:	e170      	b.n	8009742 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009460:	bf00      	nop
    return;
 8009462:	e16e      	b.n	8009742 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	2b01      	cmp	r3, #1
 800946a:	f040 814a 	bne.w	8009702 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800946e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009472:	f003 0310 	and.w	r3, r3, #16
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 8143 	beq.w	8009702 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800947c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009480:	f003 0310 	and.w	r3, r3, #16
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 813c 	beq.w	8009702 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800948a:	2300      	movs	r3, #0
 800948c:	60bb      	str	r3, [r7, #8]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60bb      	str	r3, [r7, #8]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	60bb      	str	r3, [r7, #8]
 800949e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	f040 80b4 	bne.w	8009618 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 8140 	beq.w	8009746 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094ce:	429a      	cmp	r2, r3
 80094d0:	f080 8139 	bcs.w	8009746 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e6:	f000 8088 	beq.w	80095fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	330c      	adds	r3, #12
 80094f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	330c      	adds	r3, #12
 8009512:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800951a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800952e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1d9      	bne.n	80094ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3314      	adds	r3, #20
 800953c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009548:	f023 0301 	bic.w	r3, r3, #1
 800954c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3314      	adds	r3, #20
 8009556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800955a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800955e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009566:	e841 2300 	strex	r3, r2, [r1]
 800956a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800956c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1e1      	bne.n	8009536 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3314      	adds	r3, #20
 8009578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3314      	adds	r3, #20
 8009592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009596:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800959c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e3      	bne.n	8009572 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	330c      	adds	r3, #12
 80095be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ca:	f023 0310 	bic.w	r3, r3, #16
 80095ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	330c      	adds	r3, #12
 80095d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80095dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80095de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e3      	bne.n	80095b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fd fb17 	bl	8006c28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009602:	b29b      	uxth	r3, r3
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	b29b      	uxth	r3, r3
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f8c0 	bl	8009790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009610:	e099      	b.n	8009746 <HAL_UART_IRQHandler+0x50e>
 8009612:	bf00      	nop
 8009614:	08009d0f 	.word	0x08009d0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009620:	b29b      	uxth	r3, r3
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800962c:	b29b      	uxth	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 808b 	beq.w	800974a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 8086 	beq.w	800974a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	330c      	adds	r3, #12
 8009644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	330c      	adds	r3, #12
 800965e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009662:	647a      	str	r2, [r7, #68]	; 0x44
 8009664:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e3      	bne.n	800963e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3314      	adds	r3, #20
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	623b      	str	r3, [r7, #32]
   return(result);
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	f023 0301 	bic.w	r3, r3, #1
 800968c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3314      	adds	r3, #20
 8009696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800969a:	633a      	str	r2, [r7, #48]	; 0x30
 800969c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e3      	bne.n	8009676 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	e853 3f00 	ldrex	r3, [r3]
 80096ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f023 0310 	bic.w	r3, r3, #16
 80096d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	330c      	adds	r3, #12
 80096dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80096e0:	61fa      	str	r2, [r7, #28]
 80096e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e4:	69b9      	ldr	r1, [r7, #24]
 80096e6:	69fa      	ldr	r2, [r7, #28]
 80096e8:	e841 2300 	strex	r3, r2, [r1]
 80096ec:	617b      	str	r3, [r7, #20]
   return(result);
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1e3      	bne.n	80096bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f848 	bl	8009790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009700:	e023      	b.n	800974a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970a:	2b00      	cmp	r3, #0
 800970c:	d009      	beq.n	8009722 <HAL_UART_IRQHandler+0x4ea>
 800970e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fb0b 	bl	8009d36 <UART_Transmit_IT>
    return;
 8009720:	e014      	b.n	800974c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00e      	beq.n	800974c <HAL_UART_IRQHandler+0x514>
 800972e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009736:	2b00      	cmp	r3, #0
 8009738:	d008      	beq.n	800974c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fb4b 	bl	8009dd6 <UART_EndTransmit_IT>
    return;
 8009740:	e004      	b.n	800974c <HAL_UART_IRQHandler+0x514>
    return;
 8009742:	bf00      	nop
 8009744:	e002      	b.n	800974c <HAL_UART_IRQHandler+0x514>
      return;
 8009746:	bf00      	nop
 8009748:	e000      	b.n	800974c <HAL_UART_IRQHandler+0x514>
      return;
 800974a:	bf00      	nop
  }
}
 800974c:	37e8      	adds	r7, #232	; 0xe8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop

08009754 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b090      	sub	sp, #64	; 0x40
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d137      	bne.n	8009834 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80097c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c6:	2200      	movs	r2, #0
 80097c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3314      	adds	r3, #20
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	623b      	str	r3, [r7, #32]
   return(result);
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80097e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3314      	adds	r3, #20
 80097e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097ea:	633a      	str	r2, [r7, #48]	; 0x30
 80097ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e5      	bne.n	80097ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	330c      	adds	r3, #12
 8009804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	60fb      	str	r3, [r7, #12]
   return(result);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
 8009816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	330c      	adds	r3, #12
 800981c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800981e:	61fa      	str	r2, [r7, #28]
 8009820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	69b9      	ldr	r1, [r7, #24]
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	617b      	str	r3, [r7, #20]
   return(result);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009832:	e002      	b.n	800983a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009834:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009836:	f7fb f9ef 	bl	8004c18 <HAL_UART_TxCpltCallback>
}
 800983a:	bf00      	nop
 800983c:	3740      	adds	r7, #64	; 0x40
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff ff7f 	bl	8009754 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009856:	bf00      	nop
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b09c      	sub	sp, #112	; 0x70
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009876:	2b00      	cmp	r3, #0
 8009878:	d172      	bne.n	8009960 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800987a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987c:	2200      	movs	r2, #0
 800987e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	330c      	adds	r3, #12
 8009886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800988a:	e853 3f00 	ldrex	r3, [r3]
 800988e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009896:	66bb      	str	r3, [r7, #104]	; 0x68
 8009898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	330c      	adds	r3, #12
 800989e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80098a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098a8:	e841 2300 	strex	r3, r2, [r1]
 80098ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e5      	bne.n	8009880 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3314      	adds	r3, #20
 80098ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	e853 3f00 	ldrex	r3, [r3]
 80098c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c6:	f023 0301 	bic.w	r3, r3, #1
 80098ca:	667b      	str	r3, [r7, #100]	; 0x64
 80098cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3314      	adds	r3, #20
 80098d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098d4:	647a      	str	r2, [r7, #68]	; 0x44
 80098d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098dc:	e841 2300 	strex	r3, r2, [r1]
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e5      	bne.n	80098b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3314      	adds	r3, #20
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	623b      	str	r3, [r7, #32]
   return(result);
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098fe:	663b      	str	r3, [r7, #96]	; 0x60
 8009900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3314      	adds	r3, #20
 8009906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009908:	633a      	str	r2, [r7, #48]	; 0x30
 800990a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800990e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e5      	bne.n	80098e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800991c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800991e:	2220      	movs	r2, #32
 8009920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	2b01      	cmp	r3, #1
 800992a:	d119      	bne.n	8009960 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800992c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	330c      	adds	r3, #12
 8009932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	e853 3f00 	ldrex	r3, [r3]
 800993a:	60fb      	str	r3, [r7, #12]
   return(result);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f023 0310 	bic.w	r3, r3, #16
 8009942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800994c:	61fa      	str	r2, [r7, #28]
 800994e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	69b9      	ldr	r1, [r7, #24]
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	e841 2300 	strex	r3, r2, [r1]
 8009958:	617b      	str	r3, [r7, #20]
   return(result);
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e5      	bne.n	800992c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009964:	2b01      	cmp	r3, #1
 8009966:	d106      	bne.n	8009976 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800996a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800996c:	4619      	mov	r1, r3
 800996e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009970:	f7ff ff0e 	bl	8009790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009974:	e002      	b.n	800997c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009976:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009978:	f7fb f960 	bl	8004c3c <HAL_UART_RxCpltCallback>
}
 800997c:	bf00      	nop
 800997e:	3770      	adds	r7, #112	; 0x70
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009990:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009996:	2b01      	cmp	r3, #1
 8009998:	d108      	bne.n	80099ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800999e:	085b      	lsrs	r3, r3, #1
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4619      	mov	r1, r3
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f7ff fef3 	bl	8009790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099aa:	e002      	b.n	80099b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7ff fedb 	bl	8009768 <HAL_UART_RxHalfCpltCallback>
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d6:	2b80      	cmp	r3, #128	; 0x80
 80099d8:	bf0c      	ite	eq
 80099da:	2301      	moveq	r3, #1
 80099dc:	2300      	movne	r3, #0
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b21      	cmp	r3, #33	; 0x21
 80099ec:	d108      	bne.n	8009a00 <UART_DMAError+0x46>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2200      	movs	r2, #0
 80099f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80099fa:	68b8      	ldr	r0, [r7, #8]
 80099fc:	f000 f8fc 	bl	8009bf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0a:	2b40      	cmp	r3, #64	; 0x40
 8009a0c:	bf0c      	ite	eq
 8009a0e:	2301      	moveq	r3, #1
 8009a10:	2300      	movne	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b22      	cmp	r3, #34	; 0x22
 8009a20:	d108      	bne.n	8009a34 <UART_DMAError+0x7a>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009a2e:	68b8      	ldr	r0, [r7, #8]
 8009a30:	f000 f90a 	bl	8009c48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	f043 0210 	orr.w	r2, r3, #16
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a40:	68b8      	ldr	r0, [r7, #8]
 8009a42:	f7ff fe9b 	bl	800977c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a46:	bf00      	nop
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	88fa      	ldrh	r2, [r7, #6]
 8009a66:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	88fa      	ldrh	r2, [r7, #6]
 8009a6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2222      	movs	r2, #34	; 0x22
 8009a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a92:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	695a      	ldr	r2, [r3, #20]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0201 	orr.w	r2, r2, #1
 8009aa2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0220 	orr.w	r2, r2, #32
 8009ab2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
	...

08009ac4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b098      	sub	sp, #96	; 0x60
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	88fa      	ldrh	r2, [r7, #6]
 8009adc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2222      	movs	r2, #34	; 0x22
 8009ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	4a3e      	ldr	r2, [pc, #248]	; (8009bec <UART_Start_Receive_DMA+0x128>)
 8009af2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af8:	4a3d      	ldr	r2, [pc, #244]	; (8009bf0 <UART_Start_Receive_DMA+0x12c>)
 8009afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b00:	4a3c      	ldr	r2, [pc, #240]	; (8009bf4 <UART_Start_Receive_DMA+0x130>)
 8009b02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	2200      	movs	r2, #0
 8009b0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009b0c:	f107 0308 	add.w	r3, r7, #8
 8009b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	f7fd f828 	bl	8006b78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009b28:	2300      	movs	r3, #0
 8009b2a:	613b      	str	r3, [r7, #16]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	330c      	adds	r3, #12
 8009b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	330c      	adds	r3, #12
 8009b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009b68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e5      	bne.n	8009b46 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3314      	adds	r3, #20
 8009b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8c:	f043 0301 	orr.w	r3, r3, #1
 8009b90:	657b      	str	r3, [r7, #84]	; 0x54
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3314      	adds	r3, #20
 8009b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009b9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e5      	bne.n	8009b7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3314      	adds	r3, #20
 8009bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3314      	adds	r3, #20
 8009bcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bce:	627a      	str	r2, [r7, #36]	; 0x24
 8009bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6a39      	ldr	r1, [r7, #32]
 8009bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e5      	bne.n	8009bae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3760      	adds	r7, #96	; 0x60
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	0800985f 	.word	0x0800985f
 8009bf0:	08009985 	.word	0x08009985
 8009bf4:	080099bb 	.word	0x080099bb

08009bf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b089      	sub	sp, #36	; 0x24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	330c      	adds	r3, #12
 8009c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	e853 3f00 	ldrex	r3, [r3]
 8009c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c16:	61fb      	str	r3, [r7, #28]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	330c      	adds	r3, #12
 8009c1e:	69fa      	ldr	r2, [r7, #28]
 8009c20:	61ba      	str	r2, [r7, #24]
 8009c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6979      	ldr	r1, [r7, #20]
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e5      	bne.n	8009c00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009c3c:	bf00      	nop
 8009c3e:	3724      	adds	r7, #36	; 0x24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b095      	sub	sp, #84	; 0x54
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	330c      	adds	r3, #12
 8009c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5a:	e853 3f00 	ldrex	r3, [r3]
 8009c5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	330c      	adds	r3, #12
 8009c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c70:	643a      	str	r2, [r7, #64]	; 0x40
 8009c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c78:	e841 2300 	strex	r3, r2, [r1]
 8009c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e5      	bne.n	8009c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3314      	adds	r3, #20
 8009c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	e853 3f00 	ldrex	r3, [r3]
 8009c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f023 0301 	bic.w	r3, r3, #1
 8009c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3314      	adds	r3, #20
 8009ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e5      	bne.n	8009c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d119      	bne.n	8009cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	330c      	adds	r3, #12
 8009cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	e853 3f00 	ldrex	r3, [r3]
 8009cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f023 0310 	bic.w	r3, r3, #16
 8009cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	330c      	adds	r3, #12
 8009cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ce0:	61ba      	str	r2, [r7, #24]
 8009ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	6979      	ldr	r1, [r7, #20]
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	613b      	str	r3, [r7, #16]
   return(result);
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e5      	bne.n	8009cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d02:	bf00      	nop
 8009d04:	3754      	adds	r7, #84	; 0x54
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff fd27 	bl	800977c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b21      	cmp	r3, #33	; 0x21
 8009d48:	d13e      	bne.n	8009dc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d52:	d114      	bne.n	8009d7e <UART_Transmit_IT+0x48>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d110      	bne.n	8009d7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	1c9a      	adds	r2, r3, #2
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	621a      	str	r2, [r3, #32]
 8009d7c:	e008      	b.n	8009d90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	1c59      	adds	r1, r3, #1
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6211      	str	r1, [r2, #32]
 8009d88:	781a      	ldrb	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	3b01      	subs	r3, #1
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10f      	bne.n	8009dc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68da      	ldr	r2, [r3, #12]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009db2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68da      	ldr	r2, [r3, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	e000      	b.n	8009dca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009dc8:	2302      	movs	r3, #2
  }
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b082      	sub	sp, #8
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68da      	ldr	r2, [r3, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7fa ff0e 	bl	8004c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b08c      	sub	sp, #48	; 0x30
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b22      	cmp	r3, #34	; 0x22
 8009e18:	f040 80ab 	bne.w	8009f72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e24:	d117      	bne.n	8009e56 <UART_Receive_IT+0x50>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d113      	bne.n	8009e56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	1c9a      	adds	r2, r3, #2
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	629a      	str	r2, [r3, #40]	; 0x28
 8009e54:	e026      	b.n	8009ea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e68:	d007      	beq.n	8009e7a <UART_Receive_IT+0x74>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10a      	bne.n	8009e88 <UART_Receive_IT+0x82>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d106      	bne.n	8009e88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e84:	701a      	strb	r2, [r3, #0]
 8009e86:	e008      	b.n	8009e9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d15a      	bne.n	8009f6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f022 0220 	bic.w	r2, r2, #32
 8009ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	695a      	ldr	r2, [r3, #20]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f022 0201 	bic.w	r2, r2, #1
 8009ee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d135      	bne.n	8009f64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	330c      	adds	r3, #12
 8009f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	e853 3f00 	ldrex	r3, [r3]
 8009f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f023 0310 	bic.w	r3, r3, #16
 8009f14:	627b      	str	r3, [r7, #36]	; 0x24
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	330c      	adds	r3, #12
 8009f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1e:	623a      	str	r2, [r7, #32]
 8009f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f22:	69f9      	ldr	r1, [r7, #28]
 8009f24:	6a3a      	ldr	r2, [r7, #32]
 8009f26:	e841 2300 	strex	r3, r2, [r1]
 8009f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1e5      	bne.n	8009efe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0310 	and.w	r3, r3, #16
 8009f3c:	2b10      	cmp	r3, #16
 8009f3e:	d10a      	bne.n	8009f56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff fc17 	bl	8009790 <HAL_UARTEx_RxEventCallback>
 8009f62:	e002      	b.n	8009f6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7fa fe69 	bl	8004c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e002      	b.n	8009f74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e000      	b.n	8009f74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009f72:	2302      	movs	r3, #2
  }
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3730      	adds	r7, #48	; 0x30
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	b09f      	sub	sp, #124	; 0x7c
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f92:	68d9      	ldr	r1, [r3, #12]
 8009f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	ea40 0301 	orr.w	r3, r0, r1
 8009f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa0:	689a      	ldr	r2, [r3, #8]
 8009fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	431a      	orrs	r2, r3
 8009fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009fc0:	f021 010c 	bic.w	r1, r1, #12
 8009fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fca:	430b      	orrs	r3, r1
 8009fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fda:	6999      	ldr	r1, [r3, #24]
 8009fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	ea40 0301 	orr.w	r3, r0, r1
 8009fe4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4bc5      	ldr	r3, [pc, #788]	; (800a300 <UART_SetConfig+0x384>)
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d004      	beq.n	8009ffa <UART_SetConfig+0x7e>
 8009ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	4bc3      	ldr	r3, [pc, #780]	; (800a304 <UART_SetConfig+0x388>)
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d103      	bne.n	800a002 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ffa:	f7fd ff45 	bl	8007e88 <HAL_RCC_GetPCLK2Freq>
 8009ffe:	6778      	str	r0, [r7, #116]	; 0x74
 800a000:	e002      	b.n	800a008 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a002:	f7fd ff2d 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 800a006:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a010:	f040 80b6 	bne.w	800a180 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a016:	461c      	mov	r4, r3
 800a018:	f04f 0500 	mov.w	r5, #0
 800a01c:	4622      	mov	r2, r4
 800a01e:	462b      	mov	r3, r5
 800a020:	1891      	adds	r1, r2, r2
 800a022:	6439      	str	r1, [r7, #64]	; 0x40
 800a024:	415b      	adcs	r3, r3
 800a026:	647b      	str	r3, [r7, #68]	; 0x44
 800a028:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a02c:	1912      	adds	r2, r2, r4
 800a02e:	eb45 0303 	adc.w	r3, r5, r3
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f04f 0100 	mov.w	r1, #0
 800a03a:	00d9      	lsls	r1, r3, #3
 800a03c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a040:	00d0      	lsls	r0, r2, #3
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	1911      	adds	r1, r2, r4
 800a048:	6639      	str	r1, [r7, #96]	; 0x60
 800a04a:	416b      	adcs	r3, r5
 800a04c:	667b      	str	r3, [r7, #100]	; 0x64
 800a04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	461a      	mov	r2, r3
 800a054:	f04f 0300 	mov.w	r3, #0
 800a058:	1891      	adds	r1, r2, r2
 800a05a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a05c:	415b      	adcs	r3, r3
 800a05e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a064:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a068:	f7f6 fe0e 	bl	8000c88 <__aeabi_uldivmod>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4ba5      	ldr	r3, [pc, #660]	; (800a308 <UART_SetConfig+0x38c>)
 800a072:	fba3 2302 	umull	r2, r3, r3, r2
 800a076:	095b      	lsrs	r3, r3, #5
 800a078:	011e      	lsls	r6, r3, #4
 800a07a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a07c:	461c      	mov	r4, r3
 800a07e:	f04f 0500 	mov.w	r5, #0
 800a082:	4622      	mov	r2, r4
 800a084:	462b      	mov	r3, r5
 800a086:	1891      	adds	r1, r2, r2
 800a088:	6339      	str	r1, [r7, #48]	; 0x30
 800a08a:	415b      	adcs	r3, r3
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
 800a08e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a092:	1912      	adds	r2, r2, r4
 800a094:	eb45 0303 	adc.w	r3, r5, r3
 800a098:	f04f 0000 	mov.w	r0, #0
 800a09c:	f04f 0100 	mov.w	r1, #0
 800a0a0:	00d9      	lsls	r1, r3, #3
 800a0a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a0a6:	00d0      	lsls	r0, r2, #3
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	1911      	adds	r1, r2, r4
 800a0ae:	65b9      	str	r1, [r7, #88]	; 0x58
 800a0b0:	416b      	adcs	r3, r5
 800a0b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	1891      	adds	r1, r2, r2
 800a0c0:	62b9      	str	r1, [r7, #40]	; 0x28
 800a0c2:	415b      	adcs	r3, r3
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a0ce:	f7f6 fddb 	bl	8000c88 <__aeabi_uldivmod>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4b8c      	ldr	r3, [pc, #560]	; (800a308 <UART_SetConfig+0x38c>)
 800a0d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a0dc:	095b      	lsrs	r3, r3, #5
 800a0de:	2164      	movs	r1, #100	; 0x64
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	3332      	adds	r3, #50	; 0x32
 800a0ea:	4a87      	ldr	r2, [pc, #540]	; (800a308 <UART_SetConfig+0x38c>)
 800a0ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f0:	095b      	lsrs	r3, r3, #5
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a0f8:	441e      	add	r6, r3
 800a0fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f04f 0100 	mov.w	r1, #0
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	1894      	adds	r4, r2, r2
 800a108:	623c      	str	r4, [r7, #32]
 800a10a:	415b      	adcs	r3, r3
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
 800a10e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a112:	1812      	adds	r2, r2, r0
 800a114:	eb41 0303 	adc.w	r3, r1, r3
 800a118:	f04f 0400 	mov.w	r4, #0
 800a11c:	f04f 0500 	mov.w	r5, #0
 800a120:	00dd      	lsls	r5, r3, #3
 800a122:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a126:	00d4      	lsls	r4, r2, #3
 800a128:	4622      	mov	r2, r4
 800a12a:	462b      	mov	r3, r5
 800a12c:	1814      	adds	r4, r2, r0
 800a12e:	653c      	str	r4, [r7, #80]	; 0x50
 800a130:	414b      	adcs	r3, r1
 800a132:	657b      	str	r3, [r7, #84]	; 0x54
 800a134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	461a      	mov	r2, r3
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	1891      	adds	r1, r2, r2
 800a140:	61b9      	str	r1, [r7, #24]
 800a142:	415b      	adcs	r3, r3
 800a144:	61fb      	str	r3, [r7, #28]
 800a146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a14a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a14e:	f7f6 fd9b 	bl	8000c88 <__aeabi_uldivmod>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4b6c      	ldr	r3, [pc, #432]	; (800a308 <UART_SetConfig+0x38c>)
 800a158:	fba3 1302 	umull	r1, r3, r3, r2
 800a15c:	095b      	lsrs	r3, r3, #5
 800a15e:	2164      	movs	r1, #100	; 0x64
 800a160:	fb01 f303 	mul.w	r3, r1, r3
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	00db      	lsls	r3, r3, #3
 800a168:	3332      	adds	r3, #50	; 0x32
 800a16a:	4a67      	ldr	r2, [pc, #412]	; (800a308 <UART_SetConfig+0x38c>)
 800a16c:	fba2 2303 	umull	r2, r3, r2, r3
 800a170:	095b      	lsrs	r3, r3, #5
 800a172:	f003 0207 	and.w	r2, r3, #7
 800a176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4432      	add	r2, r6
 800a17c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a17e:	e0b9      	b.n	800a2f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a182:	461c      	mov	r4, r3
 800a184:	f04f 0500 	mov.w	r5, #0
 800a188:	4622      	mov	r2, r4
 800a18a:	462b      	mov	r3, r5
 800a18c:	1891      	adds	r1, r2, r2
 800a18e:	6139      	str	r1, [r7, #16]
 800a190:	415b      	adcs	r3, r3
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a198:	1912      	adds	r2, r2, r4
 800a19a:	eb45 0303 	adc.w	r3, r5, r3
 800a19e:	f04f 0000 	mov.w	r0, #0
 800a1a2:	f04f 0100 	mov.w	r1, #0
 800a1a6:	00d9      	lsls	r1, r3, #3
 800a1a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1ac:	00d0      	lsls	r0, r2, #3
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	eb12 0804 	adds.w	r8, r2, r4
 800a1b6:	eb43 0905 	adc.w	r9, r3, r5
 800a1ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f04f 0100 	mov.w	r1, #0
 800a1c4:	f04f 0200 	mov.w	r2, #0
 800a1c8:	f04f 0300 	mov.w	r3, #0
 800a1cc:	008b      	lsls	r3, r1, #2
 800a1ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a1d2:	0082      	lsls	r2, r0, #2
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 fd56 	bl	8000c88 <__aeabi_uldivmod>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4b49      	ldr	r3, [pc, #292]	; (800a308 <UART_SetConfig+0x38c>)
 800a1e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	011e      	lsls	r6, r3, #4
 800a1ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f04f 0100 	mov.w	r1, #0
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	1894      	adds	r4, r2, r2
 800a1f8:	60bc      	str	r4, [r7, #8]
 800a1fa:	415b      	adcs	r3, r3
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a202:	1812      	adds	r2, r2, r0
 800a204:	eb41 0303 	adc.w	r3, r1, r3
 800a208:	f04f 0400 	mov.w	r4, #0
 800a20c:	f04f 0500 	mov.w	r5, #0
 800a210:	00dd      	lsls	r5, r3, #3
 800a212:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a216:	00d4      	lsls	r4, r2, #3
 800a218:	4622      	mov	r2, r4
 800a21a:	462b      	mov	r3, r5
 800a21c:	1814      	adds	r4, r2, r0
 800a21e:	64bc      	str	r4, [r7, #72]	; 0x48
 800a220:	414b      	adcs	r3, r1
 800a222:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	4618      	mov	r0, r3
 800a22a:	f04f 0100 	mov.w	r1, #0
 800a22e:	f04f 0200 	mov.w	r2, #0
 800a232:	f04f 0300 	mov.w	r3, #0
 800a236:	008b      	lsls	r3, r1, #2
 800a238:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a23c:	0082      	lsls	r2, r0, #2
 800a23e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a242:	f7f6 fd21 	bl	8000c88 <__aeabi_uldivmod>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4b2f      	ldr	r3, [pc, #188]	; (800a308 <UART_SetConfig+0x38c>)
 800a24c:	fba3 1302 	umull	r1, r3, r3, r2
 800a250:	095b      	lsrs	r3, r3, #5
 800a252:	2164      	movs	r1, #100	; 0x64
 800a254:	fb01 f303 	mul.w	r3, r1, r3
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	3332      	adds	r3, #50	; 0x32
 800a25e:	4a2a      	ldr	r2, [pc, #168]	; (800a308 <UART_SetConfig+0x38c>)
 800a260:	fba2 2303 	umull	r2, r3, r2, r3
 800a264:	095b      	lsrs	r3, r3, #5
 800a266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a26a:	441e      	add	r6, r3
 800a26c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a26e:	4618      	mov	r0, r3
 800a270:	f04f 0100 	mov.w	r1, #0
 800a274:	4602      	mov	r2, r0
 800a276:	460b      	mov	r3, r1
 800a278:	1894      	adds	r4, r2, r2
 800a27a:	603c      	str	r4, [r7, #0]
 800a27c:	415b      	adcs	r3, r3
 800a27e:	607b      	str	r3, [r7, #4]
 800a280:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a284:	1812      	adds	r2, r2, r0
 800a286:	eb41 0303 	adc.w	r3, r1, r3
 800a28a:	f04f 0400 	mov.w	r4, #0
 800a28e:	f04f 0500 	mov.w	r5, #0
 800a292:	00dd      	lsls	r5, r3, #3
 800a294:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a298:	00d4      	lsls	r4, r2, #3
 800a29a:	4622      	mov	r2, r4
 800a29c:	462b      	mov	r3, r5
 800a29e:	eb12 0a00 	adds.w	sl, r2, r0
 800a2a2:	eb43 0b01 	adc.w	fp, r3, r1
 800a2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f04f 0100 	mov.w	r1, #0
 800a2b0:	f04f 0200 	mov.w	r2, #0
 800a2b4:	f04f 0300 	mov.w	r3, #0
 800a2b8:	008b      	lsls	r3, r1, #2
 800a2ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a2be:	0082      	lsls	r2, r0, #2
 800a2c0:	4650      	mov	r0, sl
 800a2c2:	4659      	mov	r1, fp
 800a2c4:	f7f6 fce0 	bl	8000c88 <__aeabi_uldivmod>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <UART_SetConfig+0x38c>)
 800a2ce:	fba3 1302 	umull	r1, r3, r3, r2
 800a2d2:	095b      	lsrs	r3, r3, #5
 800a2d4:	2164      	movs	r1, #100	; 0x64
 800a2d6:	fb01 f303 	mul.w	r3, r1, r3
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	3332      	adds	r3, #50	; 0x32
 800a2e0:	4a09      	ldr	r2, [pc, #36]	; (800a308 <UART_SetConfig+0x38c>)
 800a2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e6:	095b      	lsrs	r3, r3, #5
 800a2e8:	f003 020f 	and.w	r2, r3, #15
 800a2ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4432      	add	r2, r6
 800a2f2:	609a      	str	r2, [r3, #8]
}
 800a2f4:	bf00      	nop
 800a2f6:	377c      	adds	r7, #124	; 0x7c
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fe:	bf00      	nop
 800a300:	40011000 	.word	0x40011000
 800a304:	40011400 	.word	0x40011400
 800a308:	51eb851f 	.word	0x51eb851f

0800a30c <__cxa_pure_virtual>:
 800a30c:	b508      	push	{r3, lr}
 800a30e:	f000 f80d 	bl	800a32c <_ZSt9terminatev>

0800a312 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a312:	b508      	push	{r3, lr}
 800a314:	4780      	blx	r0
 800a316:	f000 f80e 	bl	800a336 <abort>
	...

0800a31c <_ZSt13get_terminatev>:
 800a31c:	4b02      	ldr	r3, [pc, #8]	; (800a328 <_ZSt13get_terminatev+0xc>)
 800a31e:	6818      	ldr	r0, [r3, #0]
 800a320:	f3bf 8f5b 	dmb	ish
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20000044 	.word	0x20000044

0800a32c <_ZSt9terminatev>:
 800a32c:	b508      	push	{r3, lr}
 800a32e:	f7ff fff5 	bl	800a31c <_ZSt13get_terminatev>
 800a332:	f7ff ffee 	bl	800a312 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a336 <abort>:
 800a336:	b508      	push	{r3, lr}
 800a338:	2006      	movs	r0, #6
 800a33a:	f000 fef7 	bl	800b12c <raise>
 800a33e:	2001      	movs	r0, #1
 800a340:	f7fc f8ae 	bl	80064a0 <_exit>

0800a344 <atof>:
 800a344:	2100      	movs	r1, #0
 800a346:	f001 bd5b 	b.w	800be00 <strtod>
	...

0800a34c <__errno>:
 800a34c:	4b01      	ldr	r3, [pc, #4]	; (800a354 <__errno+0x8>)
 800a34e:	6818      	ldr	r0, [r3, #0]
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000048 	.word	0x20000048

0800a358 <__libc_init_array>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	4d0d      	ldr	r5, [pc, #52]	; (800a390 <__libc_init_array+0x38>)
 800a35c:	4c0d      	ldr	r4, [pc, #52]	; (800a394 <__libc_init_array+0x3c>)
 800a35e:	1b64      	subs	r4, r4, r5
 800a360:	10a4      	asrs	r4, r4, #2
 800a362:	2600      	movs	r6, #0
 800a364:	42a6      	cmp	r6, r4
 800a366:	d109      	bne.n	800a37c <__libc_init_array+0x24>
 800a368:	4d0b      	ldr	r5, [pc, #44]	; (800a398 <__libc_init_array+0x40>)
 800a36a:	4c0c      	ldr	r4, [pc, #48]	; (800a39c <__libc_init_array+0x44>)
 800a36c:	f004 fcac 	bl	800ecc8 <_init>
 800a370:	1b64      	subs	r4, r4, r5
 800a372:	10a4      	asrs	r4, r4, #2
 800a374:	2600      	movs	r6, #0
 800a376:	42a6      	cmp	r6, r4
 800a378:	d105      	bne.n	800a386 <__libc_init_array+0x2e>
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a380:	4798      	blx	r3
 800a382:	3601      	adds	r6, #1
 800a384:	e7ee      	b.n	800a364 <__libc_init_array+0xc>
 800a386:	f855 3b04 	ldr.w	r3, [r5], #4
 800a38a:	4798      	blx	r3
 800a38c:	3601      	adds	r6, #1
 800a38e:	e7f2      	b.n	800a376 <__libc_init_array+0x1e>
 800a390:	0800f628 	.word	0x0800f628
 800a394:	0800f628 	.word	0x0800f628
 800a398:	0800f628 	.word	0x0800f628
 800a39c:	0800f630 	.word	0x0800f630

0800a3a0 <memcpy>:
 800a3a0:	440a      	add	r2, r1
 800a3a2:	4291      	cmp	r1, r2
 800a3a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3a8:	d100      	bne.n	800a3ac <memcpy+0xc>
 800a3aa:	4770      	bx	lr
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3b6:	4291      	cmp	r1, r2
 800a3b8:	d1f9      	bne.n	800a3ae <memcpy+0xe>
 800a3ba:	bd10      	pop	{r4, pc}

0800a3bc <memset>:
 800a3bc:	4402      	add	r2, r0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d100      	bne.n	800a3c6 <memset+0xa>
 800a3c4:	4770      	bx	lr
 800a3c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ca:	e7f9      	b.n	800a3c0 <memset+0x4>

0800a3cc <__cvt>:
 800a3cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d0:	ec55 4b10 	vmov	r4, r5, d0
 800a3d4:	2d00      	cmp	r5, #0
 800a3d6:	460e      	mov	r6, r1
 800a3d8:	4619      	mov	r1, r3
 800a3da:	462b      	mov	r3, r5
 800a3dc:	bfbb      	ittet	lt
 800a3de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a3e2:	461d      	movlt	r5, r3
 800a3e4:	2300      	movge	r3, #0
 800a3e6:	232d      	movlt	r3, #45	; 0x2d
 800a3e8:	700b      	strb	r3, [r1, #0]
 800a3ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a3f0:	4691      	mov	r9, r2
 800a3f2:	f023 0820 	bic.w	r8, r3, #32
 800a3f6:	bfbc      	itt	lt
 800a3f8:	4622      	movlt	r2, r4
 800a3fa:	4614      	movlt	r4, r2
 800a3fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a400:	d005      	beq.n	800a40e <__cvt+0x42>
 800a402:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a406:	d100      	bne.n	800a40a <__cvt+0x3e>
 800a408:	3601      	adds	r6, #1
 800a40a:	2102      	movs	r1, #2
 800a40c:	e000      	b.n	800a410 <__cvt+0x44>
 800a40e:	2103      	movs	r1, #3
 800a410:	ab03      	add	r3, sp, #12
 800a412:	9301      	str	r3, [sp, #4]
 800a414:	ab02      	add	r3, sp, #8
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	ec45 4b10 	vmov	d0, r4, r5
 800a41c:	4653      	mov	r3, sl
 800a41e:	4632      	mov	r2, r6
 800a420:	f001 fe86 	bl	800c130 <_dtoa_r>
 800a424:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a428:	4607      	mov	r7, r0
 800a42a:	d102      	bne.n	800a432 <__cvt+0x66>
 800a42c:	f019 0f01 	tst.w	r9, #1
 800a430:	d022      	beq.n	800a478 <__cvt+0xac>
 800a432:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a436:	eb07 0906 	add.w	r9, r7, r6
 800a43a:	d110      	bne.n	800a45e <__cvt+0x92>
 800a43c:	783b      	ldrb	r3, [r7, #0]
 800a43e:	2b30      	cmp	r3, #48	; 0x30
 800a440:	d10a      	bne.n	800a458 <__cvt+0x8c>
 800a442:	2200      	movs	r2, #0
 800a444:	2300      	movs	r3, #0
 800a446:	4620      	mov	r0, r4
 800a448:	4629      	mov	r1, r5
 800a44a:	f7f6 fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a44e:	b918      	cbnz	r0, 800a458 <__cvt+0x8c>
 800a450:	f1c6 0601 	rsb	r6, r6, #1
 800a454:	f8ca 6000 	str.w	r6, [sl]
 800a458:	f8da 3000 	ldr.w	r3, [sl]
 800a45c:	4499      	add	r9, r3
 800a45e:	2200      	movs	r2, #0
 800a460:	2300      	movs	r3, #0
 800a462:	4620      	mov	r0, r4
 800a464:	4629      	mov	r1, r5
 800a466:	f7f6 fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a46a:	b108      	cbz	r0, 800a470 <__cvt+0xa4>
 800a46c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a470:	2230      	movs	r2, #48	; 0x30
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	454b      	cmp	r3, r9
 800a476:	d307      	bcc.n	800a488 <__cvt+0xbc>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a47c:	1bdb      	subs	r3, r3, r7
 800a47e:	4638      	mov	r0, r7
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	b004      	add	sp, #16
 800a484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a488:	1c59      	adds	r1, r3, #1
 800a48a:	9103      	str	r1, [sp, #12]
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	e7f0      	b.n	800a472 <__cvt+0xa6>

0800a490 <__exponent>:
 800a490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a492:	4603      	mov	r3, r0
 800a494:	2900      	cmp	r1, #0
 800a496:	bfb8      	it	lt
 800a498:	4249      	neglt	r1, r1
 800a49a:	f803 2b02 	strb.w	r2, [r3], #2
 800a49e:	bfb4      	ite	lt
 800a4a0:	222d      	movlt	r2, #45	; 0x2d
 800a4a2:	222b      	movge	r2, #43	; 0x2b
 800a4a4:	2909      	cmp	r1, #9
 800a4a6:	7042      	strb	r2, [r0, #1]
 800a4a8:	dd2a      	ble.n	800a500 <__exponent+0x70>
 800a4aa:	f10d 0407 	add.w	r4, sp, #7
 800a4ae:	46a4      	mov	ip, r4
 800a4b0:	270a      	movs	r7, #10
 800a4b2:	46a6      	mov	lr, r4
 800a4b4:	460a      	mov	r2, r1
 800a4b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a4ba:	fb07 1516 	mls	r5, r7, r6, r1
 800a4be:	3530      	adds	r5, #48	; 0x30
 800a4c0:	2a63      	cmp	r2, #99	; 0x63
 800a4c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a4c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	dcf1      	bgt.n	800a4b2 <__exponent+0x22>
 800a4ce:	3130      	adds	r1, #48	; 0x30
 800a4d0:	f1ae 0502 	sub.w	r5, lr, #2
 800a4d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a4d8:	1c44      	adds	r4, r0, #1
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4561      	cmp	r1, ip
 800a4de:	d30a      	bcc.n	800a4f6 <__exponent+0x66>
 800a4e0:	f10d 0209 	add.w	r2, sp, #9
 800a4e4:	eba2 020e 	sub.w	r2, r2, lr
 800a4e8:	4565      	cmp	r5, ip
 800a4ea:	bf88      	it	hi
 800a4ec:	2200      	movhi	r2, #0
 800a4ee:	4413      	add	r3, r2
 800a4f0:	1a18      	subs	r0, r3, r0
 800a4f2:	b003      	add	sp, #12
 800a4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a4fe:	e7ed      	b.n	800a4dc <__exponent+0x4c>
 800a500:	2330      	movs	r3, #48	; 0x30
 800a502:	3130      	adds	r1, #48	; 0x30
 800a504:	7083      	strb	r3, [r0, #2]
 800a506:	70c1      	strb	r1, [r0, #3]
 800a508:	1d03      	adds	r3, r0, #4
 800a50a:	e7f1      	b.n	800a4f0 <__exponent+0x60>

0800a50c <_printf_float>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	ed2d 8b02 	vpush	{d8}
 800a514:	b08d      	sub	sp, #52	; 0x34
 800a516:	460c      	mov	r4, r1
 800a518:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a51c:	4616      	mov	r6, r2
 800a51e:	461f      	mov	r7, r3
 800a520:	4605      	mov	r5, r0
 800a522:	f002 ff73 	bl	800d40c <_localeconv_r>
 800a526:	f8d0 a000 	ldr.w	sl, [r0]
 800a52a:	4650      	mov	r0, sl
 800a52c:	f7f5 fe50 	bl	80001d0 <strlen>
 800a530:	2300      	movs	r3, #0
 800a532:	930a      	str	r3, [sp, #40]	; 0x28
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	f8d8 3000 	ldr.w	r3, [r8]
 800a53c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a540:	3307      	adds	r3, #7
 800a542:	f023 0307 	bic.w	r3, r3, #7
 800a546:	f103 0208 	add.w	r2, r3, #8
 800a54a:	f8c8 2000 	str.w	r2, [r8]
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a556:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a55a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a55e:	9307      	str	r3, [sp, #28]
 800a560:	f8cd 8018 	str.w	r8, [sp, #24]
 800a564:	ee08 0a10 	vmov	s16, r0
 800a568:	4b9f      	ldr	r3, [pc, #636]	; (800a7e8 <_printf_float+0x2dc>)
 800a56a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a56e:	f04f 32ff 	mov.w	r2, #4294967295
 800a572:	f7f6 fadb 	bl	8000b2c <__aeabi_dcmpun>
 800a576:	bb88      	cbnz	r0, 800a5dc <_printf_float+0xd0>
 800a578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a57c:	4b9a      	ldr	r3, [pc, #616]	; (800a7e8 <_printf_float+0x2dc>)
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295
 800a582:	f7f6 fab5 	bl	8000af0 <__aeabi_dcmple>
 800a586:	bb48      	cbnz	r0, 800a5dc <_printf_float+0xd0>
 800a588:	2200      	movs	r2, #0
 800a58a:	2300      	movs	r3, #0
 800a58c:	4640      	mov	r0, r8
 800a58e:	4649      	mov	r1, r9
 800a590:	f7f6 faa4 	bl	8000adc <__aeabi_dcmplt>
 800a594:	b110      	cbz	r0, 800a59c <_printf_float+0x90>
 800a596:	232d      	movs	r3, #45	; 0x2d
 800a598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a59c:	4b93      	ldr	r3, [pc, #588]	; (800a7ec <_printf_float+0x2e0>)
 800a59e:	4894      	ldr	r0, [pc, #592]	; (800a7f0 <_printf_float+0x2e4>)
 800a5a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5a4:	bf94      	ite	ls
 800a5a6:	4698      	movls	r8, r3
 800a5a8:	4680      	movhi	r8, r0
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	9b05      	ldr	r3, [sp, #20]
 800a5b0:	f023 0204 	bic.w	r2, r3, #4
 800a5b4:	6022      	str	r2, [r4, #0]
 800a5b6:	f04f 0900 	mov.w	r9, #0
 800a5ba:	9700      	str	r7, [sp, #0]
 800a5bc:	4633      	mov	r3, r6
 800a5be:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 f9d8 	bl	800a978 <_printf_common>
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	f040 8090 	bne.w	800a6ee <_printf_float+0x1e2>
 800a5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d2:	b00d      	add	sp, #52	; 0x34
 800a5d4:	ecbd 8b02 	vpop	{d8}
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	4642      	mov	r2, r8
 800a5de:	464b      	mov	r3, r9
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	f7f6 faa2 	bl	8000b2c <__aeabi_dcmpun>
 800a5e8:	b140      	cbz	r0, 800a5fc <_printf_float+0xf0>
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bfbc      	itt	lt
 800a5f0:	232d      	movlt	r3, #45	; 0x2d
 800a5f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5f6:	487f      	ldr	r0, [pc, #508]	; (800a7f4 <_printf_float+0x2e8>)
 800a5f8:	4b7f      	ldr	r3, [pc, #508]	; (800a7f8 <_printf_float+0x2ec>)
 800a5fa:	e7d1      	b.n	800a5a0 <_printf_float+0x94>
 800a5fc:	6863      	ldr	r3, [r4, #4]
 800a5fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a602:	9206      	str	r2, [sp, #24]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	d13f      	bne.n	800a688 <_printf_float+0x17c>
 800a608:	2306      	movs	r3, #6
 800a60a:	6063      	str	r3, [r4, #4]
 800a60c:	9b05      	ldr	r3, [sp, #20]
 800a60e:	6861      	ldr	r1, [r4, #4]
 800a610:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a614:	2300      	movs	r3, #0
 800a616:	9303      	str	r3, [sp, #12]
 800a618:	ab0a      	add	r3, sp, #40	; 0x28
 800a61a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a61e:	ab09      	add	r3, sp, #36	; 0x24
 800a620:	ec49 8b10 	vmov	d0, r8, r9
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	6022      	str	r2, [r4, #0]
 800a628:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a62c:	4628      	mov	r0, r5
 800a62e:	f7ff fecd 	bl	800a3cc <__cvt>
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a636:	2b47      	cmp	r3, #71	; 0x47
 800a638:	4680      	mov	r8, r0
 800a63a:	d108      	bne.n	800a64e <_printf_float+0x142>
 800a63c:	1cc8      	adds	r0, r1, #3
 800a63e:	db02      	blt.n	800a646 <_printf_float+0x13a>
 800a640:	6863      	ldr	r3, [r4, #4]
 800a642:	4299      	cmp	r1, r3
 800a644:	dd41      	ble.n	800a6ca <_printf_float+0x1be>
 800a646:	f1ab 0b02 	sub.w	fp, fp, #2
 800a64a:	fa5f fb8b 	uxtb.w	fp, fp
 800a64e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a652:	d820      	bhi.n	800a696 <_printf_float+0x18a>
 800a654:	3901      	subs	r1, #1
 800a656:	465a      	mov	r2, fp
 800a658:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a65c:	9109      	str	r1, [sp, #36]	; 0x24
 800a65e:	f7ff ff17 	bl	800a490 <__exponent>
 800a662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a664:	1813      	adds	r3, r2, r0
 800a666:	2a01      	cmp	r2, #1
 800a668:	4681      	mov	r9, r0
 800a66a:	6123      	str	r3, [r4, #16]
 800a66c:	dc02      	bgt.n	800a674 <_printf_float+0x168>
 800a66e:	6822      	ldr	r2, [r4, #0]
 800a670:	07d2      	lsls	r2, r2, #31
 800a672:	d501      	bpl.n	800a678 <_printf_float+0x16c>
 800a674:	3301      	adds	r3, #1
 800a676:	6123      	str	r3, [r4, #16]
 800a678:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d09c      	beq.n	800a5ba <_printf_float+0xae>
 800a680:	232d      	movs	r3, #45	; 0x2d
 800a682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a686:	e798      	b.n	800a5ba <_printf_float+0xae>
 800a688:	9a06      	ldr	r2, [sp, #24]
 800a68a:	2a47      	cmp	r2, #71	; 0x47
 800a68c:	d1be      	bne.n	800a60c <_printf_float+0x100>
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1bc      	bne.n	800a60c <_printf_float+0x100>
 800a692:	2301      	movs	r3, #1
 800a694:	e7b9      	b.n	800a60a <_printf_float+0xfe>
 800a696:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a69a:	d118      	bne.n	800a6ce <_printf_float+0x1c2>
 800a69c:	2900      	cmp	r1, #0
 800a69e:	6863      	ldr	r3, [r4, #4]
 800a6a0:	dd0b      	ble.n	800a6ba <_printf_float+0x1ae>
 800a6a2:	6121      	str	r1, [r4, #16]
 800a6a4:	b913      	cbnz	r3, 800a6ac <_printf_float+0x1a0>
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	07d0      	lsls	r0, r2, #31
 800a6aa:	d502      	bpl.n	800a6b2 <_printf_float+0x1a6>
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	440b      	add	r3, r1
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6b4:	f04f 0900 	mov.w	r9, #0
 800a6b8:	e7de      	b.n	800a678 <_printf_float+0x16c>
 800a6ba:	b913      	cbnz	r3, 800a6c2 <_printf_float+0x1b6>
 800a6bc:	6822      	ldr	r2, [r4, #0]
 800a6be:	07d2      	lsls	r2, r2, #31
 800a6c0:	d501      	bpl.n	800a6c6 <_printf_float+0x1ba>
 800a6c2:	3302      	adds	r3, #2
 800a6c4:	e7f4      	b.n	800a6b0 <_printf_float+0x1a4>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e7f2      	b.n	800a6b0 <_printf_float+0x1a4>
 800a6ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d0:	4299      	cmp	r1, r3
 800a6d2:	db05      	blt.n	800a6e0 <_printf_float+0x1d4>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	6121      	str	r1, [r4, #16]
 800a6d8:	07d8      	lsls	r0, r3, #31
 800a6da:	d5ea      	bpl.n	800a6b2 <_printf_float+0x1a6>
 800a6dc:	1c4b      	adds	r3, r1, #1
 800a6de:	e7e7      	b.n	800a6b0 <_printf_float+0x1a4>
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	bfd4      	ite	le
 800a6e4:	f1c1 0202 	rsble	r2, r1, #2
 800a6e8:	2201      	movgt	r2, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	e7e0      	b.n	800a6b0 <_printf_float+0x1a4>
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	055a      	lsls	r2, r3, #21
 800a6f2:	d407      	bmi.n	800a704 <_printf_float+0x1f8>
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	4642      	mov	r2, r8
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	d12c      	bne.n	800a75c <_printf_float+0x250>
 800a702:	e764      	b.n	800a5ce <_printf_float+0xc2>
 800a704:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a708:	f240 80e0 	bls.w	800a8cc <_printf_float+0x3c0>
 800a70c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a710:	2200      	movs	r2, #0
 800a712:	2300      	movs	r3, #0
 800a714:	f7f6 f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d034      	beq.n	800a786 <_printf_float+0x27a>
 800a71c:	4a37      	ldr	r2, [pc, #220]	; (800a7fc <_printf_float+0x2f0>)
 800a71e:	2301      	movs	r3, #1
 800a720:	4631      	mov	r1, r6
 800a722:	4628      	mov	r0, r5
 800a724:	47b8      	blx	r7
 800a726:	3001      	adds	r0, #1
 800a728:	f43f af51 	beq.w	800a5ce <_printf_float+0xc2>
 800a72c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a730:	429a      	cmp	r2, r3
 800a732:	db02      	blt.n	800a73a <_printf_float+0x22e>
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	07d8      	lsls	r0, r3, #31
 800a738:	d510      	bpl.n	800a75c <_printf_float+0x250>
 800a73a:	ee18 3a10 	vmov	r3, s16
 800a73e:	4652      	mov	r2, sl
 800a740:	4631      	mov	r1, r6
 800a742:	4628      	mov	r0, r5
 800a744:	47b8      	blx	r7
 800a746:	3001      	adds	r0, #1
 800a748:	f43f af41 	beq.w	800a5ce <_printf_float+0xc2>
 800a74c:	f04f 0800 	mov.w	r8, #0
 800a750:	f104 091a 	add.w	r9, r4, #26
 800a754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a756:	3b01      	subs	r3, #1
 800a758:	4543      	cmp	r3, r8
 800a75a:	dc09      	bgt.n	800a770 <_printf_float+0x264>
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	079b      	lsls	r3, r3, #30
 800a760:	f100 8105 	bmi.w	800a96e <_printf_float+0x462>
 800a764:	68e0      	ldr	r0, [r4, #12]
 800a766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a768:	4298      	cmp	r0, r3
 800a76a:	bfb8      	it	lt
 800a76c:	4618      	movlt	r0, r3
 800a76e:	e730      	b.n	800a5d2 <_printf_float+0xc6>
 800a770:	2301      	movs	r3, #1
 800a772:	464a      	mov	r2, r9
 800a774:	4631      	mov	r1, r6
 800a776:	4628      	mov	r0, r5
 800a778:	47b8      	blx	r7
 800a77a:	3001      	adds	r0, #1
 800a77c:	f43f af27 	beq.w	800a5ce <_printf_float+0xc2>
 800a780:	f108 0801 	add.w	r8, r8, #1
 800a784:	e7e6      	b.n	800a754 <_printf_float+0x248>
 800a786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dc39      	bgt.n	800a800 <_printf_float+0x2f4>
 800a78c:	4a1b      	ldr	r2, [pc, #108]	; (800a7fc <_printf_float+0x2f0>)
 800a78e:	2301      	movs	r3, #1
 800a790:	4631      	mov	r1, r6
 800a792:	4628      	mov	r0, r5
 800a794:	47b8      	blx	r7
 800a796:	3001      	adds	r0, #1
 800a798:	f43f af19 	beq.w	800a5ce <_printf_float+0xc2>
 800a79c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	d102      	bne.n	800a7aa <_printf_float+0x29e>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	07d9      	lsls	r1, r3, #31
 800a7a8:	d5d8      	bpl.n	800a75c <_printf_float+0x250>
 800a7aa:	ee18 3a10 	vmov	r3, s16
 800a7ae:	4652      	mov	r2, sl
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	47b8      	blx	r7
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	f43f af09 	beq.w	800a5ce <_printf_float+0xc2>
 800a7bc:	f04f 0900 	mov.w	r9, #0
 800a7c0:	f104 0a1a 	add.w	sl, r4, #26
 800a7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c6:	425b      	negs	r3, r3
 800a7c8:	454b      	cmp	r3, r9
 800a7ca:	dc01      	bgt.n	800a7d0 <_printf_float+0x2c4>
 800a7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ce:	e792      	b.n	800a6f6 <_printf_float+0x1ea>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	4652      	mov	r2, sl
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b8      	blx	r7
 800a7da:	3001      	adds	r0, #1
 800a7dc:	f43f aef7 	beq.w	800a5ce <_printf_float+0xc2>
 800a7e0:	f109 0901 	add.w	r9, r9, #1
 800a7e4:	e7ee      	b.n	800a7c4 <_printf_float+0x2b8>
 800a7e6:	bf00      	nop
 800a7e8:	7fefffff 	.word	0x7fefffff
 800a7ec:	0800f114 	.word	0x0800f114
 800a7f0:	0800f118 	.word	0x0800f118
 800a7f4:	0800f120 	.word	0x0800f120
 800a7f8:	0800f11c 	.word	0x0800f11c
 800a7fc:	0800f124 	.word	0x0800f124
 800a800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a802:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a804:	429a      	cmp	r2, r3
 800a806:	bfa8      	it	ge
 800a808:	461a      	movge	r2, r3
 800a80a:	2a00      	cmp	r2, #0
 800a80c:	4691      	mov	r9, r2
 800a80e:	dc37      	bgt.n	800a880 <_printf_float+0x374>
 800a810:	f04f 0b00 	mov.w	fp, #0
 800a814:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a818:	f104 021a 	add.w	r2, r4, #26
 800a81c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a81e:	9305      	str	r3, [sp, #20]
 800a820:	eba3 0309 	sub.w	r3, r3, r9
 800a824:	455b      	cmp	r3, fp
 800a826:	dc33      	bgt.n	800a890 <_printf_float+0x384>
 800a828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a82c:	429a      	cmp	r2, r3
 800a82e:	db3b      	blt.n	800a8a8 <_printf_float+0x39c>
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	07da      	lsls	r2, r3, #31
 800a834:	d438      	bmi.n	800a8a8 <_printf_float+0x39c>
 800a836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a838:	9b05      	ldr	r3, [sp, #20]
 800a83a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	eba2 0901 	sub.w	r9, r2, r1
 800a842:	4599      	cmp	r9, r3
 800a844:	bfa8      	it	ge
 800a846:	4699      	movge	r9, r3
 800a848:	f1b9 0f00 	cmp.w	r9, #0
 800a84c:	dc35      	bgt.n	800a8ba <_printf_float+0x3ae>
 800a84e:	f04f 0800 	mov.w	r8, #0
 800a852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a856:	f104 0a1a 	add.w	sl, r4, #26
 800a85a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	eba3 0309 	sub.w	r3, r3, r9
 800a864:	4543      	cmp	r3, r8
 800a866:	f77f af79 	ble.w	800a75c <_printf_float+0x250>
 800a86a:	2301      	movs	r3, #1
 800a86c:	4652      	mov	r2, sl
 800a86e:	4631      	mov	r1, r6
 800a870:	4628      	mov	r0, r5
 800a872:	47b8      	blx	r7
 800a874:	3001      	adds	r0, #1
 800a876:	f43f aeaa 	beq.w	800a5ce <_printf_float+0xc2>
 800a87a:	f108 0801 	add.w	r8, r8, #1
 800a87e:	e7ec      	b.n	800a85a <_printf_float+0x34e>
 800a880:	4613      	mov	r3, r2
 800a882:	4631      	mov	r1, r6
 800a884:	4642      	mov	r2, r8
 800a886:	4628      	mov	r0, r5
 800a888:	47b8      	blx	r7
 800a88a:	3001      	adds	r0, #1
 800a88c:	d1c0      	bne.n	800a810 <_printf_float+0x304>
 800a88e:	e69e      	b.n	800a5ce <_printf_float+0xc2>
 800a890:	2301      	movs	r3, #1
 800a892:	4631      	mov	r1, r6
 800a894:	4628      	mov	r0, r5
 800a896:	9205      	str	r2, [sp, #20]
 800a898:	47b8      	blx	r7
 800a89a:	3001      	adds	r0, #1
 800a89c:	f43f ae97 	beq.w	800a5ce <_printf_float+0xc2>
 800a8a0:	9a05      	ldr	r2, [sp, #20]
 800a8a2:	f10b 0b01 	add.w	fp, fp, #1
 800a8a6:	e7b9      	b.n	800a81c <_printf_float+0x310>
 800a8a8:	ee18 3a10 	vmov	r3, s16
 800a8ac:	4652      	mov	r2, sl
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	47b8      	blx	r7
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d1be      	bne.n	800a836 <_printf_float+0x32a>
 800a8b8:	e689      	b.n	800a5ce <_printf_float+0xc2>
 800a8ba:	9a05      	ldr	r2, [sp, #20]
 800a8bc:	464b      	mov	r3, r9
 800a8be:	4442      	add	r2, r8
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	47b8      	blx	r7
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d1c1      	bne.n	800a84e <_printf_float+0x342>
 800a8ca:	e680      	b.n	800a5ce <_printf_float+0xc2>
 800a8cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8ce:	2a01      	cmp	r2, #1
 800a8d0:	dc01      	bgt.n	800a8d6 <_printf_float+0x3ca>
 800a8d2:	07db      	lsls	r3, r3, #31
 800a8d4:	d538      	bpl.n	800a948 <_printf_float+0x43c>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4642      	mov	r2, r8
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4628      	mov	r0, r5
 800a8de:	47b8      	blx	r7
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	f43f ae74 	beq.w	800a5ce <_printf_float+0xc2>
 800a8e6:	ee18 3a10 	vmov	r3, s16
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f ae6b 	beq.w	800a5ce <_printf_float+0xc2>
 800a8f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2300      	movs	r3, #0
 800a900:	f7f6 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a904:	b9d8      	cbnz	r0, 800a93e <_printf_float+0x432>
 800a906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a908:	f108 0201 	add.w	r2, r8, #1
 800a90c:	3b01      	subs	r3, #1
 800a90e:	4631      	mov	r1, r6
 800a910:	4628      	mov	r0, r5
 800a912:	47b8      	blx	r7
 800a914:	3001      	adds	r0, #1
 800a916:	d10e      	bne.n	800a936 <_printf_float+0x42a>
 800a918:	e659      	b.n	800a5ce <_printf_float+0xc2>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4652      	mov	r2, sl
 800a91e:	4631      	mov	r1, r6
 800a920:	4628      	mov	r0, r5
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	f43f ae52 	beq.w	800a5ce <_printf_float+0xc2>
 800a92a:	f108 0801 	add.w	r8, r8, #1
 800a92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a930:	3b01      	subs	r3, #1
 800a932:	4543      	cmp	r3, r8
 800a934:	dcf1      	bgt.n	800a91a <_printf_float+0x40e>
 800a936:	464b      	mov	r3, r9
 800a938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a93c:	e6dc      	b.n	800a6f8 <_printf_float+0x1ec>
 800a93e:	f04f 0800 	mov.w	r8, #0
 800a942:	f104 0a1a 	add.w	sl, r4, #26
 800a946:	e7f2      	b.n	800a92e <_printf_float+0x422>
 800a948:	2301      	movs	r3, #1
 800a94a:	4642      	mov	r2, r8
 800a94c:	e7df      	b.n	800a90e <_printf_float+0x402>
 800a94e:	2301      	movs	r3, #1
 800a950:	464a      	mov	r2, r9
 800a952:	4631      	mov	r1, r6
 800a954:	4628      	mov	r0, r5
 800a956:	47b8      	blx	r7
 800a958:	3001      	adds	r0, #1
 800a95a:	f43f ae38 	beq.w	800a5ce <_printf_float+0xc2>
 800a95e:	f108 0801 	add.w	r8, r8, #1
 800a962:	68e3      	ldr	r3, [r4, #12]
 800a964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a966:	1a5b      	subs	r3, r3, r1
 800a968:	4543      	cmp	r3, r8
 800a96a:	dcf0      	bgt.n	800a94e <_printf_float+0x442>
 800a96c:	e6fa      	b.n	800a764 <_printf_float+0x258>
 800a96e:	f04f 0800 	mov.w	r8, #0
 800a972:	f104 0919 	add.w	r9, r4, #25
 800a976:	e7f4      	b.n	800a962 <_printf_float+0x456>

0800a978 <_printf_common>:
 800a978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a97c:	4616      	mov	r6, r2
 800a97e:	4699      	mov	r9, r3
 800a980:	688a      	ldr	r2, [r1, #8]
 800a982:	690b      	ldr	r3, [r1, #16]
 800a984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a988:	4293      	cmp	r3, r2
 800a98a:	bfb8      	it	lt
 800a98c:	4613      	movlt	r3, r2
 800a98e:	6033      	str	r3, [r6, #0]
 800a990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a994:	4607      	mov	r7, r0
 800a996:	460c      	mov	r4, r1
 800a998:	b10a      	cbz	r2, 800a99e <_printf_common+0x26>
 800a99a:	3301      	adds	r3, #1
 800a99c:	6033      	str	r3, [r6, #0]
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	0699      	lsls	r1, r3, #26
 800a9a2:	bf42      	ittt	mi
 800a9a4:	6833      	ldrmi	r3, [r6, #0]
 800a9a6:	3302      	addmi	r3, #2
 800a9a8:	6033      	strmi	r3, [r6, #0]
 800a9aa:	6825      	ldr	r5, [r4, #0]
 800a9ac:	f015 0506 	ands.w	r5, r5, #6
 800a9b0:	d106      	bne.n	800a9c0 <_printf_common+0x48>
 800a9b2:	f104 0a19 	add.w	sl, r4, #25
 800a9b6:	68e3      	ldr	r3, [r4, #12]
 800a9b8:	6832      	ldr	r2, [r6, #0]
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	42ab      	cmp	r3, r5
 800a9be:	dc26      	bgt.n	800aa0e <_printf_common+0x96>
 800a9c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9c4:	1e13      	subs	r3, r2, #0
 800a9c6:	6822      	ldr	r2, [r4, #0]
 800a9c8:	bf18      	it	ne
 800a9ca:	2301      	movne	r3, #1
 800a9cc:	0692      	lsls	r2, r2, #26
 800a9ce:	d42b      	bmi.n	800aa28 <_printf_common+0xb0>
 800a9d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	47c0      	blx	r8
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d01e      	beq.n	800aa1c <_printf_common+0xa4>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	68e5      	ldr	r5, [r4, #12]
 800a9e2:	6832      	ldr	r2, [r6, #0]
 800a9e4:	f003 0306 	and.w	r3, r3, #6
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	bf08      	it	eq
 800a9ec:	1aad      	subeq	r5, r5, r2
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	6922      	ldr	r2, [r4, #16]
 800a9f2:	bf0c      	ite	eq
 800a9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9f8:	2500      	movne	r5, #0
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	bfc4      	itt	gt
 800a9fe:	1a9b      	subgt	r3, r3, r2
 800aa00:	18ed      	addgt	r5, r5, r3
 800aa02:	2600      	movs	r6, #0
 800aa04:	341a      	adds	r4, #26
 800aa06:	42b5      	cmp	r5, r6
 800aa08:	d11a      	bne.n	800aa40 <_printf_common+0xc8>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e008      	b.n	800aa20 <_printf_common+0xa8>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4652      	mov	r2, sl
 800aa12:	4649      	mov	r1, r9
 800aa14:	4638      	mov	r0, r7
 800aa16:	47c0      	blx	r8
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d103      	bne.n	800aa24 <_printf_common+0xac>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa24:	3501      	adds	r5, #1
 800aa26:	e7c6      	b.n	800a9b6 <_printf_common+0x3e>
 800aa28:	18e1      	adds	r1, r4, r3
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	2030      	movs	r0, #48	; 0x30
 800aa2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa32:	4422      	add	r2, r4
 800aa34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa3c:	3302      	adds	r3, #2
 800aa3e:	e7c7      	b.n	800a9d0 <_printf_common+0x58>
 800aa40:	2301      	movs	r3, #1
 800aa42:	4622      	mov	r2, r4
 800aa44:	4649      	mov	r1, r9
 800aa46:	4638      	mov	r0, r7
 800aa48:	47c0      	blx	r8
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	d0e6      	beq.n	800aa1c <_printf_common+0xa4>
 800aa4e:	3601      	adds	r6, #1
 800aa50:	e7d9      	b.n	800aa06 <_printf_common+0x8e>
	...

0800aa54 <_printf_i>:
 800aa54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	460c      	mov	r4, r1
 800aa5a:	4691      	mov	r9, r2
 800aa5c:	7e27      	ldrb	r7, [r4, #24]
 800aa5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa60:	2f78      	cmp	r7, #120	; 0x78
 800aa62:	4680      	mov	r8, r0
 800aa64:	469a      	mov	sl, r3
 800aa66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa6a:	d807      	bhi.n	800aa7c <_printf_i+0x28>
 800aa6c:	2f62      	cmp	r7, #98	; 0x62
 800aa6e:	d80a      	bhi.n	800aa86 <_printf_i+0x32>
 800aa70:	2f00      	cmp	r7, #0
 800aa72:	f000 80d8 	beq.w	800ac26 <_printf_i+0x1d2>
 800aa76:	2f58      	cmp	r7, #88	; 0x58
 800aa78:	f000 80a3 	beq.w	800abc2 <_printf_i+0x16e>
 800aa7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa84:	e03a      	b.n	800aafc <_printf_i+0xa8>
 800aa86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa8a:	2b15      	cmp	r3, #21
 800aa8c:	d8f6      	bhi.n	800aa7c <_printf_i+0x28>
 800aa8e:	a001      	add	r0, pc, #4	; (adr r0, 800aa94 <_printf_i+0x40>)
 800aa90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aa94:	0800aaed 	.word	0x0800aaed
 800aa98:	0800ab01 	.word	0x0800ab01
 800aa9c:	0800aa7d 	.word	0x0800aa7d
 800aaa0:	0800aa7d 	.word	0x0800aa7d
 800aaa4:	0800aa7d 	.word	0x0800aa7d
 800aaa8:	0800aa7d 	.word	0x0800aa7d
 800aaac:	0800ab01 	.word	0x0800ab01
 800aab0:	0800aa7d 	.word	0x0800aa7d
 800aab4:	0800aa7d 	.word	0x0800aa7d
 800aab8:	0800aa7d 	.word	0x0800aa7d
 800aabc:	0800aa7d 	.word	0x0800aa7d
 800aac0:	0800ac0d 	.word	0x0800ac0d
 800aac4:	0800ab31 	.word	0x0800ab31
 800aac8:	0800abef 	.word	0x0800abef
 800aacc:	0800aa7d 	.word	0x0800aa7d
 800aad0:	0800aa7d 	.word	0x0800aa7d
 800aad4:	0800ac2f 	.word	0x0800ac2f
 800aad8:	0800aa7d 	.word	0x0800aa7d
 800aadc:	0800ab31 	.word	0x0800ab31
 800aae0:	0800aa7d 	.word	0x0800aa7d
 800aae4:	0800aa7d 	.word	0x0800aa7d
 800aae8:	0800abf7 	.word	0x0800abf7
 800aaec:	680b      	ldr	r3, [r1, #0]
 800aaee:	1d1a      	adds	r2, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	600a      	str	r2, [r1, #0]
 800aaf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aaf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aafc:	2301      	movs	r3, #1
 800aafe:	e0a3      	b.n	800ac48 <_printf_i+0x1f4>
 800ab00:	6825      	ldr	r5, [r4, #0]
 800ab02:	6808      	ldr	r0, [r1, #0]
 800ab04:	062e      	lsls	r6, r5, #24
 800ab06:	f100 0304 	add.w	r3, r0, #4
 800ab0a:	d50a      	bpl.n	800ab22 <_printf_i+0xce>
 800ab0c:	6805      	ldr	r5, [r0, #0]
 800ab0e:	600b      	str	r3, [r1, #0]
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	da03      	bge.n	800ab1c <_printf_i+0xc8>
 800ab14:	232d      	movs	r3, #45	; 0x2d
 800ab16:	426d      	negs	r5, r5
 800ab18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1c:	485e      	ldr	r0, [pc, #376]	; (800ac98 <_printf_i+0x244>)
 800ab1e:	230a      	movs	r3, #10
 800ab20:	e019      	b.n	800ab56 <_printf_i+0x102>
 800ab22:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab26:	6805      	ldr	r5, [r0, #0]
 800ab28:	600b      	str	r3, [r1, #0]
 800ab2a:	bf18      	it	ne
 800ab2c:	b22d      	sxthne	r5, r5
 800ab2e:	e7ef      	b.n	800ab10 <_printf_i+0xbc>
 800ab30:	680b      	ldr	r3, [r1, #0]
 800ab32:	6825      	ldr	r5, [r4, #0]
 800ab34:	1d18      	adds	r0, r3, #4
 800ab36:	6008      	str	r0, [r1, #0]
 800ab38:	0628      	lsls	r0, r5, #24
 800ab3a:	d501      	bpl.n	800ab40 <_printf_i+0xec>
 800ab3c:	681d      	ldr	r5, [r3, #0]
 800ab3e:	e002      	b.n	800ab46 <_printf_i+0xf2>
 800ab40:	0669      	lsls	r1, r5, #25
 800ab42:	d5fb      	bpl.n	800ab3c <_printf_i+0xe8>
 800ab44:	881d      	ldrh	r5, [r3, #0]
 800ab46:	4854      	ldr	r0, [pc, #336]	; (800ac98 <_printf_i+0x244>)
 800ab48:	2f6f      	cmp	r7, #111	; 0x6f
 800ab4a:	bf0c      	ite	eq
 800ab4c:	2308      	moveq	r3, #8
 800ab4e:	230a      	movne	r3, #10
 800ab50:	2100      	movs	r1, #0
 800ab52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab56:	6866      	ldr	r6, [r4, #4]
 800ab58:	60a6      	str	r6, [r4, #8]
 800ab5a:	2e00      	cmp	r6, #0
 800ab5c:	bfa2      	ittt	ge
 800ab5e:	6821      	ldrge	r1, [r4, #0]
 800ab60:	f021 0104 	bicge.w	r1, r1, #4
 800ab64:	6021      	strge	r1, [r4, #0]
 800ab66:	b90d      	cbnz	r5, 800ab6c <_printf_i+0x118>
 800ab68:	2e00      	cmp	r6, #0
 800ab6a:	d04d      	beq.n	800ac08 <_printf_i+0x1b4>
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab72:	fb03 5711 	mls	r7, r3, r1, r5
 800ab76:	5dc7      	ldrb	r7, [r0, r7]
 800ab78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab7c:	462f      	mov	r7, r5
 800ab7e:	42bb      	cmp	r3, r7
 800ab80:	460d      	mov	r5, r1
 800ab82:	d9f4      	bls.n	800ab6e <_printf_i+0x11a>
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d10b      	bne.n	800aba0 <_printf_i+0x14c>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	07df      	lsls	r7, r3, #31
 800ab8c:	d508      	bpl.n	800aba0 <_printf_i+0x14c>
 800ab8e:	6923      	ldr	r3, [r4, #16]
 800ab90:	6861      	ldr	r1, [r4, #4]
 800ab92:	4299      	cmp	r1, r3
 800ab94:	bfde      	ittt	le
 800ab96:	2330      	movle	r3, #48	; 0x30
 800ab98:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aba0:	1b92      	subs	r2, r2, r6
 800aba2:	6122      	str	r2, [r4, #16]
 800aba4:	f8cd a000 	str.w	sl, [sp]
 800aba8:	464b      	mov	r3, r9
 800abaa:	aa03      	add	r2, sp, #12
 800abac:	4621      	mov	r1, r4
 800abae:	4640      	mov	r0, r8
 800abb0:	f7ff fee2 	bl	800a978 <_printf_common>
 800abb4:	3001      	adds	r0, #1
 800abb6:	d14c      	bne.n	800ac52 <_printf_i+0x1fe>
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295
 800abbc:	b004      	add	sp, #16
 800abbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc2:	4835      	ldr	r0, [pc, #212]	; (800ac98 <_printf_i+0x244>)
 800abc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	680e      	ldr	r6, [r1, #0]
 800abcc:	061f      	lsls	r7, r3, #24
 800abce:	f856 5b04 	ldr.w	r5, [r6], #4
 800abd2:	600e      	str	r6, [r1, #0]
 800abd4:	d514      	bpl.n	800ac00 <_printf_i+0x1ac>
 800abd6:	07d9      	lsls	r1, r3, #31
 800abd8:	bf44      	itt	mi
 800abda:	f043 0320 	orrmi.w	r3, r3, #32
 800abde:	6023      	strmi	r3, [r4, #0]
 800abe0:	b91d      	cbnz	r5, 800abea <_printf_i+0x196>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	f023 0320 	bic.w	r3, r3, #32
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	2310      	movs	r3, #16
 800abec:	e7b0      	b.n	800ab50 <_printf_i+0xfc>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	f043 0320 	orr.w	r3, r3, #32
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	2378      	movs	r3, #120	; 0x78
 800abf8:	4828      	ldr	r0, [pc, #160]	; (800ac9c <_printf_i+0x248>)
 800abfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abfe:	e7e3      	b.n	800abc8 <_printf_i+0x174>
 800ac00:	065e      	lsls	r6, r3, #25
 800ac02:	bf48      	it	mi
 800ac04:	b2ad      	uxthmi	r5, r5
 800ac06:	e7e6      	b.n	800abd6 <_printf_i+0x182>
 800ac08:	4616      	mov	r6, r2
 800ac0a:	e7bb      	b.n	800ab84 <_printf_i+0x130>
 800ac0c:	680b      	ldr	r3, [r1, #0]
 800ac0e:	6826      	ldr	r6, [r4, #0]
 800ac10:	6960      	ldr	r0, [r4, #20]
 800ac12:	1d1d      	adds	r5, r3, #4
 800ac14:	600d      	str	r5, [r1, #0]
 800ac16:	0635      	lsls	r5, r6, #24
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	d501      	bpl.n	800ac20 <_printf_i+0x1cc>
 800ac1c:	6018      	str	r0, [r3, #0]
 800ac1e:	e002      	b.n	800ac26 <_printf_i+0x1d2>
 800ac20:	0671      	lsls	r1, r6, #25
 800ac22:	d5fb      	bpl.n	800ac1c <_printf_i+0x1c8>
 800ac24:	8018      	strh	r0, [r3, #0]
 800ac26:	2300      	movs	r3, #0
 800ac28:	6123      	str	r3, [r4, #16]
 800ac2a:	4616      	mov	r6, r2
 800ac2c:	e7ba      	b.n	800aba4 <_printf_i+0x150>
 800ac2e:	680b      	ldr	r3, [r1, #0]
 800ac30:	1d1a      	adds	r2, r3, #4
 800ac32:	600a      	str	r2, [r1, #0]
 800ac34:	681e      	ldr	r6, [r3, #0]
 800ac36:	6862      	ldr	r2, [r4, #4]
 800ac38:	2100      	movs	r1, #0
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f7f5 fad0 	bl	80001e0 <memchr>
 800ac40:	b108      	cbz	r0, 800ac46 <_printf_i+0x1f2>
 800ac42:	1b80      	subs	r0, r0, r6
 800ac44:	6060      	str	r0, [r4, #4]
 800ac46:	6863      	ldr	r3, [r4, #4]
 800ac48:	6123      	str	r3, [r4, #16]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac50:	e7a8      	b.n	800aba4 <_printf_i+0x150>
 800ac52:	6923      	ldr	r3, [r4, #16]
 800ac54:	4632      	mov	r2, r6
 800ac56:	4649      	mov	r1, r9
 800ac58:	4640      	mov	r0, r8
 800ac5a:	47d0      	blx	sl
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d0ab      	beq.n	800abb8 <_printf_i+0x164>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	079b      	lsls	r3, r3, #30
 800ac64:	d413      	bmi.n	800ac8e <_printf_i+0x23a>
 800ac66:	68e0      	ldr	r0, [r4, #12]
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	4298      	cmp	r0, r3
 800ac6c:	bfb8      	it	lt
 800ac6e:	4618      	movlt	r0, r3
 800ac70:	e7a4      	b.n	800abbc <_printf_i+0x168>
 800ac72:	2301      	movs	r3, #1
 800ac74:	4632      	mov	r2, r6
 800ac76:	4649      	mov	r1, r9
 800ac78:	4640      	mov	r0, r8
 800ac7a:	47d0      	blx	sl
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	d09b      	beq.n	800abb8 <_printf_i+0x164>
 800ac80:	3501      	adds	r5, #1
 800ac82:	68e3      	ldr	r3, [r4, #12]
 800ac84:	9903      	ldr	r1, [sp, #12]
 800ac86:	1a5b      	subs	r3, r3, r1
 800ac88:	42ab      	cmp	r3, r5
 800ac8a:	dcf2      	bgt.n	800ac72 <_printf_i+0x21e>
 800ac8c:	e7eb      	b.n	800ac66 <_printf_i+0x212>
 800ac8e:	2500      	movs	r5, #0
 800ac90:	f104 0619 	add.w	r6, r4, #25
 800ac94:	e7f5      	b.n	800ac82 <_printf_i+0x22e>
 800ac96:	bf00      	nop
 800ac98:	0800f126 	.word	0x0800f126
 800ac9c:	0800f137 	.word	0x0800f137

0800aca0 <_scanf_float>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	b087      	sub	sp, #28
 800aca6:	4617      	mov	r7, r2
 800aca8:	9303      	str	r3, [sp, #12]
 800acaa:	688b      	ldr	r3, [r1, #8]
 800acac:	1e5a      	subs	r2, r3, #1
 800acae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800acb2:	bf83      	ittte	hi
 800acb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800acb8:	195b      	addhi	r3, r3, r5
 800acba:	9302      	strhi	r3, [sp, #8]
 800acbc:	2300      	movls	r3, #0
 800acbe:	bf86      	itte	hi
 800acc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800acc4:	608b      	strhi	r3, [r1, #8]
 800acc6:	9302      	strls	r3, [sp, #8]
 800acc8:	680b      	ldr	r3, [r1, #0]
 800acca:	468b      	mov	fp, r1
 800accc:	2500      	movs	r5, #0
 800acce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800acd2:	f84b 3b1c 	str.w	r3, [fp], #28
 800acd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800acda:	4680      	mov	r8, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	465e      	mov	r6, fp
 800ace0:	46aa      	mov	sl, r5
 800ace2:	46a9      	mov	r9, r5
 800ace4:	9501      	str	r5, [sp, #4]
 800ace6:	68a2      	ldr	r2, [r4, #8]
 800ace8:	b152      	cbz	r2, 800ad00 <_scanf_float+0x60>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b4e      	cmp	r3, #78	; 0x4e
 800acf0:	d864      	bhi.n	800adbc <_scanf_float+0x11c>
 800acf2:	2b40      	cmp	r3, #64	; 0x40
 800acf4:	d83c      	bhi.n	800ad70 <_scanf_float+0xd0>
 800acf6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800acfa:	b2c8      	uxtb	r0, r1
 800acfc:	280e      	cmp	r0, #14
 800acfe:	d93a      	bls.n	800ad76 <_scanf_float+0xd6>
 800ad00:	f1b9 0f00 	cmp.w	r9, #0
 800ad04:	d003      	beq.n	800ad0e <_scanf_float+0x6e>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad12:	f1ba 0f01 	cmp.w	sl, #1
 800ad16:	f200 8113 	bhi.w	800af40 <_scanf_float+0x2a0>
 800ad1a:	455e      	cmp	r6, fp
 800ad1c:	f200 8105 	bhi.w	800af2a <_scanf_float+0x28a>
 800ad20:	2501      	movs	r5, #1
 800ad22:	4628      	mov	r0, r5
 800ad24:	b007      	add	sp, #28
 800ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ad2e:	2a0d      	cmp	r2, #13
 800ad30:	d8e6      	bhi.n	800ad00 <_scanf_float+0x60>
 800ad32:	a101      	add	r1, pc, #4	; (adr r1, 800ad38 <_scanf_float+0x98>)
 800ad34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad38:	0800ae77 	.word	0x0800ae77
 800ad3c:	0800ad01 	.word	0x0800ad01
 800ad40:	0800ad01 	.word	0x0800ad01
 800ad44:	0800ad01 	.word	0x0800ad01
 800ad48:	0800aed7 	.word	0x0800aed7
 800ad4c:	0800aeaf 	.word	0x0800aeaf
 800ad50:	0800ad01 	.word	0x0800ad01
 800ad54:	0800ad01 	.word	0x0800ad01
 800ad58:	0800ae85 	.word	0x0800ae85
 800ad5c:	0800ad01 	.word	0x0800ad01
 800ad60:	0800ad01 	.word	0x0800ad01
 800ad64:	0800ad01 	.word	0x0800ad01
 800ad68:	0800ad01 	.word	0x0800ad01
 800ad6c:	0800ae3d 	.word	0x0800ae3d
 800ad70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ad74:	e7db      	b.n	800ad2e <_scanf_float+0x8e>
 800ad76:	290e      	cmp	r1, #14
 800ad78:	d8c2      	bhi.n	800ad00 <_scanf_float+0x60>
 800ad7a:	a001      	add	r0, pc, #4	; (adr r0, 800ad80 <_scanf_float+0xe0>)
 800ad7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad80:	0800ae2f 	.word	0x0800ae2f
 800ad84:	0800ad01 	.word	0x0800ad01
 800ad88:	0800ae2f 	.word	0x0800ae2f
 800ad8c:	0800aec3 	.word	0x0800aec3
 800ad90:	0800ad01 	.word	0x0800ad01
 800ad94:	0800addd 	.word	0x0800addd
 800ad98:	0800ae19 	.word	0x0800ae19
 800ad9c:	0800ae19 	.word	0x0800ae19
 800ada0:	0800ae19 	.word	0x0800ae19
 800ada4:	0800ae19 	.word	0x0800ae19
 800ada8:	0800ae19 	.word	0x0800ae19
 800adac:	0800ae19 	.word	0x0800ae19
 800adb0:	0800ae19 	.word	0x0800ae19
 800adb4:	0800ae19 	.word	0x0800ae19
 800adb8:	0800ae19 	.word	0x0800ae19
 800adbc:	2b6e      	cmp	r3, #110	; 0x6e
 800adbe:	d809      	bhi.n	800add4 <_scanf_float+0x134>
 800adc0:	2b60      	cmp	r3, #96	; 0x60
 800adc2:	d8b2      	bhi.n	800ad2a <_scanf_float+0x8a>
 800adc4:	2b54      	cmp	r3, #84	; 0x54
 800adc6:	d077      	beq.n	800aeb8 <_scanf_float+0x218>
 800adc8:	2b59      	cmp	r3, #89	; 0x59
 800adca:	d199      	bne.n	800ad00 <_scanf_float+0x60>
 800adcc:	2d07      	cmp	r5, #7
 800adce:	d197      	bne.n	800ad00 <_scanf_float+0x60>
 800add0:	2508      	movs	r5, #8
 800add2:	e029      	b.n	800ae28 <_scanf_float+0x188>
 800add4:	2b74      	cmp	r3, #116	; 0x74
 800add6:	d06f      	beq.n	800aeb8 <_scanf_float+0x218>
 800add8:	2b79      	cmp	r3, #121	; 0x79
 800adda:	e7f6      	b.n	800adca <_scanf_float+0x12a>
 800addc:	6821      	ldr	r1, [r4, #0]
 800adde:	05c8      	lsls	r0, r1, #23
 800ade0:	d51a      	bpl.n	800ae18 <_scanf_float+0x178>
 800ade2:	9b02      	ldr	r3, [sp, #8]
 800ade4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ade8:	6021      	str	r1, [r4, #0]
 800adea:	f109 0901 	add.w	r9, r9, #1
 800adee:	b11b      	cbz	r3, 800adf8 <_scanf_float+0x158>
 800adf0:	3b01      	subs	r3, #1
 800adf2:	3201      	adds	r2, #1
 800adf4:	9302      	str	r3, [sp, #8]
 800adf6:	60a2      	str	r2, [r4, #8]
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	60a3      	str	r3, [r4, #8]
 800adfe:	6923      	ldr	r3, [r4, #16]
 800ae00:	3301      	adds	r3, #1
 800ae02:	6123      	str	r3, [r4, #16]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	607b      	str	r3, [r7, #4]
 800ae0c:	f340 8084 	ble.w	800af18 <_scanf_float+0x278>
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	3301      	adds	r3, #1
 800ae14:	603b      	str	r3, [r7, #0]
 800ae16:	e766      	b.n	800ace6 <_scanf_float+0x46>
 800ae18:	eb1a 0f05 	cmn.w	sl, r5
 800ae1c:	f47f af70 	bne.w	800ad00 <_scanf_float+0x60>
 800ae20:	6822      	ldr	r2, [r4, #0]
 800ae22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ae26:	6022      	str	r2, [r4, #0]
 800ae28:	f806 3b01 	strb.w	r3, [r6], #1
 800ae2c:	e7e4      	b.n	800adf8 <_scanf_float+0x158>
 800ae2e:	6822      	ldr	r2, [r4, #0]
 800ae30:	0610      	lsls	r0, r2, #24
 800ae32:	f57f af65 	bpl.w	800ad00 <_scanf_float+0x60>
 800ae36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae3a:	e7f4      	b.n	800ae26 <_scanf_float+0x186>
 800ae3c:	f1ba 0f00 	cmp.w	sl, #0
 800ae40:	d10e      	bne.n	800ae60 <_scanf_float+0x1c0>
 800ae42:	f1b9 0f00 	cmp.w	r9, #0
 800ae46:	d10e      	bne.n	800ae66 <_scanf_float+0x1c6>
 800ae48:	6822      	ldr	r2, [r4, #0]
 800ae4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae52:	d108      	bne.n	800ae66 <_scanf_float+0x1c6>
 800ae54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae58:	6022      	str	r2, [r4, #0]
 800ae5a:	f04f 0a01 	mov.w	sl, #1
 800ae5e:	e7e3      	b.n	800ae28 <_scanf_float+0x188>
 800ae60:	f1ba 0f02 	cmp.w	sl, #2
 800ae64:	d055      	beq.n	800af12 <_scanf_float+0x272>
 800ae66:	2d01      	cmp	r5, #1
 800ae68:	d002      	beq.n	800ae70 <_scanf_float+0x1d0>
 800ae6a:	2d04      	cmp	r5, #4
 800ae6c:	f47f af48 	bne.w	800ad00 <_scanf_float+0x60>
 800ae70:	3501      	adds	r5, #1
 800ae72:	b2ed      	uxtb	r5, r5
 800ae74:	e7d8      	b.n	800ae28 <_scanf_float+0x188>
 800ae76:	f1ba 0f01 	cmp.w	sl, #1
 800ae7a:	f47f af41 	bne.w	800ad00 <_scanf_float+0x60>
 800ae7e:	f04f 0a02 	mov.w	sl, #2
 800ae82:	e7d1      	b.n	800ae28 <_scanf_float+0x188>
 800ae84:	b97d      	cbnz	r5, 800aea6 <_scanf_float+0x206>
 800ae86:	f1b9 0f00 	cmp.w	r9, #0
 800ae8a:	f47f af3c 	bne.w	800ad06 <_scanf_float+0x66>
 800ae8e:	6822      	ldr	r2, [r4, #0]
 800ae90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae98:	f47f af39 	bne.w	800ad0e <_scanf_float+0x6e>
 800ae9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aea0:	6022      	str	r2, [r4, #0]
 800aea2:	2501      	movs	r5, #1
 800aea4:	e7c0      	b.n	800ae28 <_scanf_float+0x188>
 800aea6:	2d03      	cmp	r5, #3
 800aea8:	d0e2      	beq.n	800ae70 <_scanf_float+0x1d0>
 800aeaa:	2d05      	cmp	r5, #5
 800aeac:	e7de      	b.n	800ae6c <_scanf_float+0x1cc>
 800aeae:	2d02      	cmp	r5, #2
 800aeb0:	f47f af26 	bne.w	800ad00 <_scanf_float+0x60>
 800aeb4:	2503      	movs	r5, #3
 800aeb6:	e7b7      	b.n	800ae28 <_scanf_float+0x188>
 800aeb8:	2d06      	cmp	r5, #6
 800aeba:	f47f af21 	bne.w	800ad00 <_scanf_float+0x60>
 800aebe:	2507      	movs	r5, #7
 800aec0:	e7b2      	b.n	800ae28 <_scanf_float+0x188>
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	0591      	lsls	r1, r2, #22
 800aec6:	f57f af1b 	bpl.w	800ad00 <_scanf_float+0x60>
 800aeca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aece:	6022      	str	r2, [r4, #0]
 800aed0:	f8cd 9004 	str.w	r9, [sp, #4]
 800aed4:	e7a8      	b.n	800ae28 <_scanf_float+0x188>
 800aed6:	6822      	ldr	r2, [r4, #0]
 800aed8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aedc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aee0:	d006      	beq.n	800aef0 <_scanf_float+0x250>
 800aee2:	0550      	lsls	r0, r2, #21
 800aee4:	f57f af0c 	bpl.w	800ad00 <_scanf_float+0x60>
 800aee8:	f1b9 0f00 	cmp.w	r9, #0
 800aeec:	f43f af0f 	beq.w	800ad0e <_scanf_float+0x6e>
 800aef0:	0591      	lsls	r1, r2, #22
 800aef2:	bf58      	it	pl
 800aef4:	9901      	ldrpl	r1, [sp, #4]
 800aef6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aefa:	bf58      	it	pl
 800aefc:	eba9 0101 	subpl.w	r1, r9, r1
 800af00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800af04:	bf58      	it	pl
 800af06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af0a:	6022      	str	r2, [r4, #0]
 800af0c:	f04f 0900 	mov.w	r9, #0
 800af10:	e78a      	b.n	800ae28 <_scanf_float+0x188>
 800af12:	f04f 0a03 	mov.w	sl, #3
 800af16:	e787      	b.n	800ae28 <_scanf_float+0x188>
 800af18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af1c:	4639      	mov	r1, r7
 800af1e:	4640      	mov	r0, r8
 800af20:	4798      	blx	r3
 800af22:	2800      	cmp	r0, #0
 800af24:	f43f aedf 	beq.w	800ace6 <_scanf_float+0x46>
 800af28:	e6ea      	b.n	800ad00 <_scanf_float+0x60>
 800af2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af32:	463a      	mov	r2, r7
 800af34:	4640      	mov	r0, r8
 800af36:	4798      	blx	r3
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	e6ec      	b.n	800ad1a <_scanf_float+0x7a>
 800af40:	1e6b      	subs	r3, r5, #1
 800af42:	2b06      	cmp	r3, #6
 800af44:	d825      	bhi.n	800af92 <_scanf_float+0x2f2>
 800af46:	2d02      	cmp	r5, #2
 800af48:	d836      	bhi.n	800afb8 <_scanf_float+0x318>
 800af4a:	455e      	cmp	r6, fp
 800af4c:	f67f aee8 	bls.w	800ad20 <_scanf_float+0x80>
 800af50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af58:	463a      	mov	r2, r7
 800af5a:	4640      	mov	r0, r8
 800af5c:	4798      	blx	r3
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	3b01      	subs	r3, #1
 800af62:	6123      	str	r3, [r4, #16]
 800af64:	e7f1      	b.n	800af4a <_scanf_float+0x2aa>
 800af66:	9802      	ldr	r0, [sp, #8]
 800af68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800af70:	9002      	str	r0, [sp, #8]
 800af72:	463a      	mov	r2, r7
 800af74:	4640      	mov	r0, r8
 800af76:	4798      	blx	r3
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	3b01      	subs	r3, #1
 800af7c:	6123      	str	r3, [r4, #16]
 800af7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af82:	fa5f fa8a 	uxtb.w	sl, sl
 800af86:	f1ba 0f02 	cmp.w	sl, #2
 800af8a:	d1ec      	bne.n	800af66 <_scanf_float+0x2c6>
 800af8c:	3d03      	subs	r5, #3
 800af8e:	b2ed      	uxtb	r5, r5
 800af90:	1b76      	subs	r6, r6, r5
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	05da      	lsls	r2, r3, #23
 800af96:	d52f      	bpl.n	800aff8 <_scanf_float+0x358>
 800af98:	055b      	lsls	r3, r3, #21
 800af9a:	d510      	bpl.n	800afbe <_scanf_float+0x31e>
 800af9c:	455e      	cmp	r6, fp
 800af9e:	f67f aebf 	bls.w	800ad20 <_scanf_float+0x80>
 800afa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afaa:	463a      	mov	r2, r7
 800afac:	4640      	mov	r0, r8
 800afae:	4798      	blx	r3
 800afb0:	6923      	ldr	r3, [r4, #16]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	6123      	str	r3, [r4, #16]
 800afb6:	e7f1      	b.n	800af9c <_scanf_float+0x2fc>
 800afb8:	46aa      	mov	sl, r5
 800afba:	9602      	str	r6, [sp, #8]
 800afbc:	e7df      	b.n	800af7e <_scanf_float+0x2de>
 800afbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	2965      	cmp	r1, #101	; 0x65
 800afc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800afca:	f106 35ff 	add.w	r5, r6, #4294967295
 800afce:	6123      	str	r3, [r4, #16]
 800afd0:	d00c      	beq.n	800afec <_scanf_float+0x34c>
 800afd2:	2945      	cmp	r1, #69	; 0x45
 800afd4:	d00a      	beq.n	800afec <_scanf_float+0x34c>
 800afd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afda:	463a      	mov	r2, r7
 800afdc:	4640      	mov	r0, r8
 800afde:	4798      	blx	r3
 800afe0:	6923      	ldr	r3, [r4, #16]
 800afe2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	1eb5      	subs	r5, r6, #2
 800afea:	6123      	str	r3, [r4, #16]
 800afec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aff0:	463a      	mov	r2, r7
 800aff2:	4640      	mov	r0, r8
 800aff4:	4798      	blx	r3
 800aff6:	462e      	mov	r6, r5
 800aff8:	6825      	ldr	r5, [r4, #0]
 800affa:	f015 0510 	ands.w	r5, r5, #16
 800affe:	d158      	bne.n	800b0b2 <_scanf_float+0x412>
 800b000:	7035      	strb	r5, [r6, #0]
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b00c:	d11c      	bne.n	800b048 <_scanf_float+0x3a8>
 800b00e:	9b01      	ldr	r3, [sp, #4]
 800b010:	454b      	cmp	r3, r9
 800b012:	eba3 0209 	sub.w	r2, r3, r9
 800b016:	d124      	bne.n	800b062 <_scanf_float+0x3c2>
 800b018:	2200      	movs	r2, #0
 800b01a:	4659      	mov	r1, fp
 800b01c:	4640      	mov	r0, r8
 800b01e:	f000 fee9 	bl	800bdf4 <_strtod_r>
 800b022:	9b03      	ldr	r3, [sp, #12]
 800b024:	6821      	ldr	r1, [r4, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f011 0f02 	tst.w	r1, #2
 800b02c:	ec57 6b10 	vmov	r6, r7, d0
 800b030:	f103 0204 	add.w	r2, r3, #4
 800b034:	d020      	beq.n	800b078 <_scanf_float+0x3d8>
 800b036:	9903      	ldr	r1, [sp, #12]
 800b038:	600a      	str	r2, [r1, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	e9c3 6700 	strd	r6, r7, [r3]
 800b040:	68e3      	ldr	r3, [r4, #12]
 800b042:	3301      	adds	r3, #1
 800b044:	60e3      	str	r3, [r4, #12]
 800b046:	e66c      	b.n	800ad22 <_scanf_float+0x82>
 800b048:	9b04      	ldr	r3, [sp, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0e4      	beq.n	800b018 <_scanf_float+0x378>
 800b04e:	9905      	ldr	r1, [sp, #20]
 800b050:	230a      	movs	r3, #10
 800b052:	462a      	mov	r2, r5
 800b054:	3101      	adds	r1, #1
 800b056:	4640      	mov	r0, r8
 800b058:	f000 ffbe 	bl	800bfd8 <_strtol_r>
 800b05c:	9b04      	ldr	r3, [sp, #16]
 800b05e:	9e05      	ldr	r6, [sp, #20]
 800b060:	1ac2      	subs	r2, r0, r3
 800b062:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b066:	429e      	cmp	r6, r3
 800b068:	bf28      	it	cs
 800b06a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b06e:	4912      	ldr	r1, [pc, #72]	; (800b0b8 <_scanf_float+0x418>)
 800b070:	4630      	mov	r0, r6
 800b072:	f000 f877 	bl	800b164 <siprintf>
 800b076:	e7cf      	b.n	800b018 <_scanf_float+0x378>
 800b078:	f011 0f04 	tst.w	r1, #4
 800b07c:	9903      	ldr	r1, [sp, #12]
 800b07e:	600a      	str	r2, [r1, #0]
 800b080:	d1db      	bne.n	800b03a <_scanf_float+0x39a>
 800b082:	f8d3 8000 	ldr.w	r8, [r3]
 800b086:	ee10 2a10 	vmov	r2, s0
 800b08a:	ee10 0a10 	vmov	r0, s0
 800b08e:	463b      	mov	r3, r7
 800b090:	4639      	mov	r1, r7
 800b092:	f7f5 fd4b 	bl	8000b2c <__aeabi_dcmpun>
 800b096:	b128      	cbz	r0, 800b0a4 <_scanf_float+0x404>
 800b098:	4808      	ldr	r0, [pc, #32]	; (800b0bc <_scanf_float+0x41c>)
 800b09a:	f000 f819 	bl	800b0d0 <nanf>
 800b09e:	ed88 0a00 	vstr	s0, [r8]
 800b0a2:	e7cd      	b.n	800b040 <_scanf_float+0x3a0>
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	f7f5 fd9e 	bl	8000be8 <__aeabi_d2f>
 800b0ac:	f8c8 0000 	str.w	r0, [r8]
 800b0b0:	e7c6      	b.n	800b040 <_scanf_float+0x3a0>
 800b0b2:	2500      	movs	r5, #0
 800b0b4:	e635      	b.n	800ad22 <_scanf_float+0x82>
 800b0b6:	bf00      	nop
 800b0b8:	0800f148 	.word	0x0800f148
 800b0bc:	0800f253 	.word	0x0800f253

0800b0c0 <realloc>:
 800b0c0:	4b02      	ldr	r3, [pc, #8]	; (800b0cc <realloc+0xc>)
 800b0c2:	460a      	mov	r2, r1
 800b0c4:	4601      	mov	r1, r0
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	f002 bf32 	b.w	800df30 <_realloc_r>
 800b0cc:	20000048 	.word	0x20000048

0800b0d0 <nanf>:
 800b0d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b0d8 <nanf+0x8>
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	7fc00000 	.word	0x7fc00000

0800b0dc <_raise_r>:
 800b0dc:	291f      	cmp	r1, #31
 800b0de:	b538      	push	{r3, r4, r5, lr}
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	460d      	mov	r5, r1
 800b0e4:	d904      	bls.n	800b0f0 <_raise_r+0x14>
 800b0e6:	2316      	movs	r3, #22
 800b0e8:	6003      	str	r3, [r0, #0]
 800b0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0f2:	b112      	cbz	r2, 800b0fa <_raise_r+0x1e>
 800b0f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0f8:	b94b      	cbnz	r3, 800b10e <_raise_r+0x32>
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 f830 	bl	800b160 <_getpid_r>
 800b100:	462a      	mov	r2, r5
 800b102:	4601      	mov	r1, r0
 800b104:	4620      	mov	r0, r4
 800b106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b10a:	f000 b817 	b.w	800b13c <_kill_r>
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d00a      	beq.n	800b128 <_raise_r+0x4c>
 800b112:	1c59      	adds	r1, r3, #1
 800b114:	d103      	bne.n	800b11e <_raise_r+0x42>
 800b116:	2316      	movs	r3, #22
 800b118:	6003      	str	r3, [r0, #0]
 800b11a:	2001      	movs	r0, #1
 800b11c:	e7e7      	b.n	800b0ee <_raise_r+0x12>
 800b11e:	2400      	movs	r4, #0
 800b120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b124:	4628      	mov	r0, r5
 800b126:	4798      	blx	r3
 800b128:	2000      	movs	r0, #0
 800b12a:	e7e0      	b.n	800b0ee <_raise_r+0x12>

0800b12c <raise>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <raise+0xc>)
 800b12e:	4601      	mov	r1, r0
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f7ff bfd3 	b.w	800b0dc <_raise_r>
 800b136:	bf00      	nop
 800b138:	20000048 	.word	0x20000048

0800b13c <_kill_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d07      	ldr	r5, [pc, #28]	; (800b15c <_kill_r+0x20>)
 800b140:	2300      	movs	r3, #0
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	4611      	mov	r1, r2
 800b148:	602b      	str	r3, [r5, #0]
 800b14a:	f7fb f999 	bl	8006480 <_kill>
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	d102      	bne.n	800b158 <_kill_r+0x1c>
 800b152:	682b      	ldr	r3, [r5, #0]
 800b154:	b103      	cbz	r3, 800b158 <_kill_r+0x1c>
 800b156:	6023      	str	r3, [r4, #0]
 800b158:	bd38      	pop	{r3, r4, r5, pc}
 800b15a:	bf00      	nop
 800b15c:	200010c0 	.word	0x200010c0

0800b160 <_getpid_r>:
 800b160:	f7fb b986 	b.w	8006470 <_getpid>

0800b164 <siprintf>:
 800b164:	b40e      	push	{r1, r2, r3}
 800b166:	b500      	push	{lr}
 800b168:	b09c      	sub	sp, #112	; 0x70
 800b16a:	ab1d      	add	r3, sp, #116	; 0x74
 800b16c:	9002      	str	r0, [sp, #8]
 800b16e:	9006      	str	r0, [sp, #24]
 800b170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b174:	4809      	ldr	r0, [pc, #36]	; (800b19c <siprintf+0x38>)
 800b176:	9107      	str	r1, [sp, #28]
 800b178:	9104      	str	r1, [sp, #16]
 800b17a:	4909      	ldr	r1, [pc, #36]	; (800b1a0 <siprintf+0x3c>)
 800b17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b180:	9105      	str	r1, [sp, #20]
 800b182:	6800      	ldr	r0, [r0, #0]
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	a902      	add	r1, sp, #8
 800b188:	f002 ff54 	bl	800e034 <_svfiprintf_r>
 800b18c:	9b02      	ldr	r3, [sp, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	b01c      	add	sp, #112	; 0x70
 800b194:	f85d eb04 	ldr.w	lr, [sp], #4
 800b198:	b003      	add	sp, #12
 800b19a:	4770      	bx	lr
 800b19c:	20000048 	.word	0x20000048
 800b1a0:	ffff0208 	.word	0xffff0208

0800b1a4 <sulp>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	460d      	mov	r5, r1
 800b1aa:	ec45 4b10 	vmov	d0, r4, r5
 800b1ae:	4616      	mov	r6, r2
 800b1b0:	f002 fcb6 	bl	800db20 <__ulp>
 800b1b4:	ec51 0b10 	vmov	r0, r1, d0
 800b1b8:	b17e      	cbz	r6, 800b1da <sulp+0x36>
 800b1ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b1be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	dd09      	ble.n	800b1da <sulp+0x36>
 800b1c6:	051b      	lsls	r3, r3, #20
 800b1c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b1cc:	2400      	movs	r4, #0
 800b1ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	462b      	mov	r3, r5
 800b1d6:	f7f5 fa0f 	bl	80005f8 <__aeabi_dmul>
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	0000      	movs	r0, r0
	...

0800b1e0 <_strtod_l>:
 800b1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e4:	b0a3      	sub	sp, #140	; 0x8c
 800b1e6:	461f      	mov	r7, r3
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	931e      	str	r3, [sp, #120]	; 0x78
 800b1ec:	4ba4      	ldr	r3, [pc, #656]	; (800b480 <_strtod_l+0x2a0>)
 800b1ee:	9219      	str	r2, [sp, #100]	; 0x64
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	9307      	str	r3, [sp, #28]
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	4688      	mov	r8, r1
 800b1fa:	f7f4 ffe9 	bl	80001d0 <strlen>
 800b1fe:	f04f 0a00 	mov.w	sl, #0
 800b202:	4605      	mov	r5, r0
 800b204:	f04f 0b00 	mov.w	fp, #0
 800b208:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b20c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b20e:	781a      	ldrb	r2, [r3, #0]
 800b210:	2a2b      	cmp	r2, #43	; 0x2b
 800b212:	d04c      	beq.n	800b2ae <_strtod_l+0xce>
 800b214:	d839      	bhi.n	800b28a <_strtod_l+0xaa>
 800b216:	2a0d      	cmp	r2, #13
 800b218:	d832      	bhi.n	800b280 <_strtod_l+0xa0>
 800b21a:	2a08      	cmp	r2, #8
 800b21c:	d832      	bhi.n	800b284 <_strtod_l+0xa4>
 800b21e:	2a00      	cmp	r2, #0
 800b220:	d03c      	beq.n	800b29c <_strtod_l+0xbc>
 800b222:	2300      	movs	r3, #0
 800b224:	930e      	str	r3, [sp, #56]	; 0x38
 800b226:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b228:	7833      	ldrb	r3, [r6, #0]
 800b22a:	2b30      	cmp	r3, #48	; 0x30
 800b22c:	f040 80b4 	bne.w	800b398 <_strtod_l+0x1b8>
 800b230:	7873      	ldrb	r3, [r6, #1]
 800b232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b236:	2b58      	cmp	r3, #88	; 0x58
 800b238:	d16c      	bne.n	800b314 <_strtod_l+0x134>
 800b23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	ab1e      	add	r3, sp, #120	; 0x78
 800b240:	9702      	str	r7, [sp, #8]
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	4a8f      	ldr	r2, [pc, #572]	; (800b484 <_strtod_l+0x2a4>)
 800b246:	ab1f      	add	r3, sp, #124	; 0x7c
 800b248:	a91d      	add	r1, sp, #116	; 0x74
 800b24a:	4620      	mov	r0, r4
 800b24c:	f001 fdd6 	bl	800cdfc <__gethex>
 800b250:	f010 0707 	ands.w	r7, r0, #7
 800b254:	4605      	mov	r5, r0
 800b256:	d005      	beq.n	800b264 <_strtod_l+0x84>
 800b258:	2f06      	cmp	r7, #6
 800b25a:	d12a      	bne.n	800b2b2 <_strtod_l+0xd2>
 800b25c:	3601      	adds	r6, #1
 800b25e:	2300      	movs	r3, #0
 800b260:	961d      	str	r6, [sp, #116]	; 0x74
 800b262:	930e      	str	r3, [sp, #56]	; 0x38
 800b264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b266:	2b00      	cmp	r3, #0
 800b268:	f040 8596 	bne.w	800bd98 <_strtod_l+0xbb8>
 800b26c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b26e:	b1db      	cbz	r3, 800b2a8 <_strtod_l+0xc8>
 800b270:	4652      	mov	r2, sl
 800b272:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b276:	ec43 2b10 	vmov	d0, r2, r3
 800b27a:	b023      	add	sp, #140	; 0x8c
 800b27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b280:	2a20      	cmp	r2, #32
 800b282:	d1ce      	bne.n	800b222 <_strtod_l+0x42>
 800b284:	3301      	adds	r3, #1
 800b286:	931d      	str	r3, [sp, #116]	; 0x74
 800b288:	e7c0      	b.n	800b20c <_strtod_l+0x2c>
 800b28a:	2a2d      	cmp	r2, #45	; 0x2d
 800b28c:	d1c9      	bne.n	800b222 <_strtod_l+0x42>
 800b28e:	2201      	movs	r2, #1
 800b290:	920e      	str	r2, [sp, #56]	; 0x38
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	921d      	str	r2, [sp, #116]	; 0x74
 800b296:	785b      	ldrb	r3, [r3, #1]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1c4      	bne.n	800b226 <_strtod_l+0x46>
 800b29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b29e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f040 8576 	bne.w	800bd94 <_strtod_l+0xbb4>
 800b2a8:	4652      	mov	r2, sl
 800b2aa:	465b      	mov	r3, fp
 800b2ac:	e7e3      	b.n	800b276 <_strtod_l+0x96>
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	e7ee      	b.n	800b290 <_strtod_l+0xb0>
 800b2b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b2b4:	b13a      	cbz	r2, 800b2c6 <_strtod_l+0xe6>
 800b2b6:	2135      	movs	r1, #53	; 0x35
 800b2b8:	a820      	add	r0, sp, #128	; 0x80
 800b2ba:	f002 fd3c 	bl	800dd36 <__copybits>
 800b2be:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f002 f901 	bl	800d4c8 <_Bfree>
 800b2c6:	3f01      	subs	r7, #1
 800b2c8:	2f05      	cmp	r7, #5
 800b2ca:	d807      	bhi.n	800b2dc <_strtod_l+0xfc>
 800b2cc:	e8df f007 	tbb	[pc, r7]
 800b2d0:	1d180b0e 	.word	0x1d180b0e
 800b2d4:	030e      	.short	0x030e
 800b2d6:	f04f 0b00 	mov.w	fp, #0
 800b2da:	46da      	mov	sl, fp
 800b2dc:	0728      	lsls	r0, r5, #28
 800b2de:	d5c1      	bpl.n	800b264 <_strtod_l+0x84>
 800b2e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b2e4:	e7be      	b.n	800b264 <_strtod_l+0x84>
 800b2e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b2ea:	e7f7      	b.n	800b2dc <_strtod_l+0xfc>
 800b2ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b2f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b2f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b2f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b2fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b2fe:	e7ed      	b.n	800b2dc <_strtod_l+0xfc>
 800b300:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b488 <_strtod_l+0x2a8>
 800b304:	f04f 0a00 	mov.w	sl, #0
 800b308:	e7e8      	b.n	800b2dc <_strtod_l+0xfc>
 800b30a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b30e:	f04f 3aff 	mov.w	sl, #4294967295
 800b312:	e7e3      	b.n	800b2dc <_strtod_l+0xfc>
 800b314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	921d      	str	r2, [sp, #116]	; 0x74
 800b31a:	785b      	ldrb	r3, [r3, #1]
 800b31c:	2b30      	cmp	r3, #48	; 0x30
 800b31e:	d0f9      	beq.n	800b314 <_strtod_l+0x134>
 800b320:	2b00      	cmp	r3, #0
 800b322:	d09f      	beq.n	800b264 <_strtod_l+0x84>
 800b324:	2301      	movs	r3, #1
 800b326:	f04f 0900 	mov.w	r9, #0
 800b32a:	9304      	str	r3, [sp, #16]
 800b32c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b32e:	930a      	str	r3, [sp, #40]	; 0x28
 800b330:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b334:	464f      	mov	r7, r9
 800b336:	220a      	movs	r2, #10
 800b338:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b33a:	7806      	ldrb	r6, [r0, #0]
 800b33c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b340:	b2d9      	uxtb	r1, r3
 800b342:	2909      	cmp	r1, #9
 800b344:	d92a      	bls.n	800b39c <_strtod_l+0x1bc>
 800b346:	9907      	ldr	r1, [sp, #28]
 800b348:	462a      	mov	r2, r5
 800b34a:	f003 f8e5 	bl	800e518 <strncmp>
 800b34e:	b398      	cbz	r0, 800b3b8 <_strtod_l+0x1d8>
 800b350:	2000      	movs	r0, #0
 800b352:	4633      	mov	r3, r6
 800b354:	463d      	mov	r5, r7
 800b356:	9007      	str	r0, [sp, #28]
 800b358:	4602      	mov	r2, r0
 800b35a:	2b65      	cmp	r3, #101	; 0x65
 800b35c:	d001      	beq.n	800b362 <_strtod_l+0x182>
 800b35e:	2b45      	cmp	r3, #69	; 0x45
 800b360:	d118      	bne.n	800b394 <_strtod_l+0x1b4>
 800b362:	b91d      	cbnz	r5, 800b36c <_strtod_l+0x18c>
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	4303      	orrs	r3, r0
 800b368:	d098      	beq.n	800b29c <_strtod_l+0xbc>
 800b36a:	2500      	movs	r5, #0
 800b36c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b370:	f108 0301 	add.w	r3, r8, #1
 800b374:	931d      	str	r3, [sp, #116]	; 0x74
 800b376:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b37a:	2b2b      	cmp	r3, #43	; 0x2b
 800b37c:	d075      	beq.n	800b46a <_strtod_l+0x28a>
 800b37e:	2b2d      	cmp	r3, #45	; 0x2d
 800b380:	d07b      	beq.n	800b47a <_strtod_l+0x29a>
 800b382:	f04f 0c00 	mov.w	ip, #0
 800b386:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b38a:	2909      	cmp	r1, #9
 800b38c:	f240 8082 	bls.w	800b494 <_strtod_l+0x2b4>
 800b390:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b394:	2600      	movs	r6, #0
 800b396:	e09d      	b.n	800b4d4 <_strtod_l+0x2f4>
 800b398:	2300      	movs	r3, #0
 800b39a:	e7c4      	b.n	800b326 <_strtod_l+0x146>
 800b39c:	2f08      	cmp	r7, #8
 800b39e:	bfd8      	it	le
 800b3a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b3a2:	f100 0001 	add.w	r0, r0, #1
 800b3a6:	bfda      	itte	le
 800b3a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b3ac:	9309      	strle	r3, [sp, #36]	; 0x24
 800b3ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b3b2:	3701      	adds	r7, #1
 800b3b4:	901d      	str	r0, [sp, #116]	; 0x74
 800b3b6:	e7bf      	b.n	800b338 <_strtod_l+0x158>
 800b3b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3ba:	195a      	adds	r2, r3, r5
 800b3bc:	921d      	str	r2, [sp, #116]	; 0x74
 800b3be:	5d5b      	ldrb	r3, [r3, r5]
 800b3c0:	2f00      	cmp	r7, #0
 800b3c2:	d037      	beq.n	800b434 <_strtod_l+0x254>
 800b3c4:	9007      	str	r0, [sp, #28]
 800b3c6:	463d      	mov	r5, r7
 800b3c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b3cc:	2a09      	cmp	r2, #9
 800b3ce:	d912      	bls.n	800b3f6 <_strtod_l+0x216>
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	e7c2      	b.n	800b35a <_strtod_l+0x17a>
 800b3d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	921d      	str	r2, [sp, #116]	; 0x74
 800b3da:	785b      	ldrb	r3, [r3, #1]
 800b3dc:	3001      	adds	r0, #1
 800b3de:	2b30      	cmp	r3, #48	; 0x30
 800b3e0:	d0f8      	beq.n	800b3d4 <_strtod_l+0x1f4>
 800b3e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b3e6:	2a08      	cmp	r2, #8
 800b3e8:	f200 84db 	bhi.w	800bda2 <_strtod_l+0xbc2>
 800b3ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b3ee:	9007      	str	r0, [sp, #28]
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	920a      	str	r2, [sp, #40]	; 0x28
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	3b30      	subs	r3, #48	; 0x30
 800b3f8:	f100 0201 	add.w	r2, r0, #1
 800b3fc:	d014      	beq.n	800b428 <_strtod_l+0x248>
 800b3fe:	9907      	ldr	r1, [sp, #28]
 800b400:	4411      	add	r1, r2
 800b402:	9107      	str	r1, [sp, #28]
 800b404:	462a      	mov	r2, r5
 800b406:	eb00 0e05 	add.w	lr, r0, r5
 800b40a:	210a      	movs	r1, #10
 800b40c:	4572      	cmp	r2, lr
 800b40e:	d113      	bne.n	800b438 <_strtod_l+0x258>
 800b410:	182a      	adds	r2, r5, r0
 800b412:	2a08      	cmp	r2, #8
 800b414:	f105 0501 	add.w	r5, r5, #1
 800b418:	4405      	add	r5, r0
 800b41a:	dc1c      	bgt.n	800b456 <_strtod_l+0x276>
 800b41c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b41e:	220a      	movs	r2, #10
 800b420:	fb02 3301 	mla	r3, r2, r1, r3
 800b424:	9309      	str	r3, [sp, #36]	; 0x24
 800b426:	2200      	movs	r2, #0
 800b428:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b42a:	1c59      	adds	r1, r3, #1
 800b42c:	911d      	str	r1, [sp, #116]	; 0x74
 800b42e:	785b      	ldrb	r3, [r3, #1]
 800b430:	4610      	mov	r0, r2
 800b432:	e7c9      	b.n	800b3c8 <_strtod_l+0x1e8>
 800b434:	4638      	mov	r0, r7
 800b436:	e7d2      	b.n	800b3de <_strtod_l+0x1fe>
 800b438:	2a08      	cmp	r2, #8
 800b43a:	dc04      	bgt.n	800b446 <_strtod_l+0x266>
 800b43c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b43e:	434e      	muls	r6, r1
 800b440:	9609      	str	r6, [sp, #36]	; 0x24
 800b442:	3201      	adds	r2, #1
 800b444:	e7e2      	b.n	800b40c <_strtod_l+0x22c>
 800b446:	f102 0c01 	add.w	ip, r2, #1
 800b44a:	f1bc 0f10 	cmp.w	ip, #16
 800b44e:	bfd8      	it	le
 800b450:	fb01 f909 	mulle.w	r9, r1, r9
 800b454:	e7f5      	b.n	800b442 <_strtod_l+0x262>
 800b456:	2d10      	cmp	r5, #16
 800b458:	bfdc      	itt	le
 800b45a:	220a      	movle	r2, #10
 800b45c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b460:	e7e1      	b.n	800b426 <_strtod_l+0x246>
 800b462:	2300      	movs	r3, #0
 800b464:	9307      	str	r3, [sp, #28]
 800b466:	2201      	movs	r2, #1
 800b468:	e77c      	b.n	800b364 <_strtod_l+0x184>
 800b46a:	f04f 0c00 	mov.w	ip, #0
 800b46e:	f108 0302 	add.w	r3, r8, #2
 800b472:	931d      	str	r3, [sp, #116]	; 0x74
 800b474:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b478:	e785      	b.n	800b386 <_strtod_l+0x1a6>
 800b47a:	f04f 0c01 	mov.w	ip, #1
 800b47e:	e7f6      	b.n	800b46e <_strtod_l+0x28e>
 800b480:	0800f43c 	.word	0x0800f43c
 800b484:	0800f150 	.word	0x0800f150
 800b488:	7ff00000 	.word	0x7ff00000
 800b48c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b48e:	1c59      	adds	r1, r3, #1
 800b490:	911d      	str	r1, [sp, #116]	; 0x74
 800b492:	785b      	ldrb	r3, [r3, #1]
 800b494:	2b30      	cmp	r3, #48	; 0x30
 800b496:	d0f9      	beq.n	800b48c <_strtod_l+0x2ac>
 800b498:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b49c:	2908      	cmp	r1, #8
 800b49e:	f63f af79 	bhi.w	800b394 <_strtod_l+0x1b4>
 800b4a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b4a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4a8:	9308      	str	r3, [sp, #32]
 800b4aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4ac:	1c59      	adds	r1, r3, #1
 800b4ae:	911d      	str	r1, [sp, #116]	; 0x74
 800b4b0:	785b      	ldrb	r3, [r3, #1]
 800b4b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b4b6:	2e09      	cmp	r6, #9
 800b4b8:	d937      	bls.n	800b52a <_strtod_l+0x34a>
 800b4ba:	9e08      	ldr	r6, [sp, #32]
 800b4bc:	1b89      	subs	r1, r1, r6
 800b4be:	2908      	cmp	r1, #8
 800b4c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b4c4:	dc02      	bgt.n	800b4cc <_strtod_l+0x2ec>
 800b4c6:	4576      	cmp	r6, lr
 800b4c8:	bfa8      	it	ge
 800b4ca:	4676      	movge	r6, lr
 800b4cc:	f1bc 0f00 	cmp.w	ip, #0
 800b4d0:	d000      	beq.n	800b4d4 <_strtod_l+0x2f4>
 800b4d2:	4276      	negs	r6, r6
 800b4d4:	2d00      	cmp	r5, #0
 800b4d6:	d14f      	bne.n	800b578 <_strtod_l+0x398>
 800b4d8:	9904      	ldr	r1, [sp, #16]
 800b4da:	4301      	orrs	r1, r0
 800b4dc:	f47f aec2 	bne.w	800b264 <_strtod_l+0x84>
 800b4e0:	2a00      	cmp	r2, #0
 800b4e2:	f47f aedb 	bne.w	800b29c <_strtod_l+0xbc>
 800b4e6:	2b69      	cmp	r3, #105	; 0x69
 800b4e8:	d027      	beq.n	800b53a <_strtod_l+0x35a>
 800b4ea:	dc24      	bgt.n	800b536 <_strtod_l+0x356>
 800b4ec:	2b49      	cmp	r3, #73	; 0x49
 800b4ee:	d024      	beq.n	800b53a <_strtod_l+0x35a>
 800b4f0:	2b4e      	cmp	r3, #78	; 0x4e
 800b4f2:	f47f aed3 	bne.w	800b29c <_strtod_l+0xbc>
 800b4f6:	499e      	ldr	r1, [pc, #632]	; (800b770 <_strtod_l+0x590>)
 800b4f8:	a81d      	add	r0, sp, #116	; 0x74
 800b4fa:	f001 fed7 	bl	800d2ac <__match>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f aecc 	beq.w	800b29c <_strtod_l+0xbc>
 800b504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b28      	cmp	r3, #40	; 0x28
 800b50a:	d12d      	bne.n	800b568 <_strtod_l+0x388>
 800b50c:	4999      	ldr	r1, [pc, #612]	; (800b774 <_strtod_l+0x594>)
 800b50e:	aa20      	add	r2, sp, #128	; 0x80
 800b510:	a81d      	add	r0, sp, #116	; 0x74
 800b512:	f001 fedf 	bl	800d2d4 <__hexnan>
 800b516:	2805      	cmp	r0, #5
 800b518:	d126      	bne.n	800b568 <_strtod_l+0x388>
 800b51a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b51c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b520:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b524:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b528:	e69c      	b.n	800b264 <_strtod_l+0x84>
 800b52a:	210a      	movs	r1, #10
 800b52c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b530:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b534:	e7b9      	b.n	800b4aa <_strtod_l+0x2ca>
 800b536:	2b6e      	cmp	r3, #110	; 0x6e
 800b538:	e7db      	b.n	800b4f2 <_strtod_l+0x312>
 800b53a:	498f      	ldr	r1, [pc, #572]	; (800b778 <_strtod_l+0x598>)
 800b53c:	a81d      	add	r0, sp, #116	; 0x74
 800b53e:	f001 feb5 	bl	800d2ac <__match>
 800b542:	2800      	cmp	r0, #0
 800b544:	f43f aeaa 	beq.w	800b29c <_strtod_l+0xbc>
 800b548:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b54a:	498c      	ldr	r1, [pc, #560]	; (800b77c <_strtod_l+0x59c>)
 800b54c:	3b01      	subs	r3, #1
 800b54e:	a81d      	add	r0, sp, #116	; 0x74
 800b550:	931d      	str	r3, [sp, #116]	; 0x74
 800b552:	f001 feab 	bl	800d2ac <__match>
 800b556:	b910      	cbnz	r0, 800b55e <_strtod_l+0x37e>
 800b558:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b55a:	3301      	adds	r3, #1
 800b55c:	931d      	str	r3, [sp, #116]	; 0x74
 800b55e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b78c <_strtod_l+0x5ac>
 800b562:	f04f 0a00 	mov.w	sl, #0
 800b566:	e67d      	b.n	800b264 <_strtod_l+0x84>
 800b568:	4885      	ldr	r0, [pc, #532]	; (800b780 <_strtod_l+0x5a0>)
 800b56a:	f002 ffbd 	bl	800e4e8 <nan>
 800b56e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b572:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b576:	e675      	b.n	800b264 <_strtod_l+0x84>
 800b578:	9b07      	ldr	r3, [sp, #28]
 800b57a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b57c:	1af3      	subs	r3, r6, r3
 800b57e:	2f00      	cmp	r7, #0
 800b580:	bf08      	it	eq
 800b582:	462f      	moveq	r7, r5
 800b584:	2d10      	cmp	r5, #16
 800b586:	9308      	str	r3, [sp, #32]
 800b588:	46a8      	mov	r8, r5
 800b58a:	bfa8      	it	ge
 800b58c:	f04f 0810 	movge.w	r8, #16
 800b590:	f7f4 ffb8 	bl	8000504 <__aeabi_ui2d>
 800b594:	2d09      	cmp	r5, #9
 800b596:	4682      	mov	sl, r0
 800b598:	468b      	mov	fp, r1
 800b59a:	dd13      	ble.n	800b5c4 <_strtod_l+0x3e4>
 800b59c:	4b79      	ldr	r3, [pc, #484]	; (800b784 <_strtod_l+0x5a4>)
 800b59e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b5a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b5a6:	f7f5 f827 	bl	80005f8 <__aeabi_dmul>
 800b5aa:	4682      	mov	sl, r0
 800b5ac:	4648      	mov	r0, r9
 800b5ae:	468b      	mov	fp, r1
 800b5b0:	f7f4 ffa8 	bl	8000504 <__aeabi_ui2d>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	4659      	mov	r1, fp
 800b5bc:	f7f4 fe66 	bl	800028c <__adddf3>
 800b5c0:	4682      	mov	sl, r0
 800b5c2:	468b      	mov	fp, r1
 800b5c4:	2d0f      	cmp	r5, #15
 800b5c6:	dc38      	bgt.n	800b63a <_strtod_l+0x45a>
 800b5c8:	9b08      	ldr	r3, [sp, #32]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f43f ae4a 	beq.w	800b264 <_strtod_l+0x84>
 800b5d0:	dd24      	ble.n	800b61c <_strtod_l+0x43c>
 800b5d2:	2b16      	cmp	r3, #22
 800b5d4:	dc0b      	bgt.n	800b5ee <_strtod_l+0x40e>
 800b5d6:	4d6b      	ldr	r5, [pc, #428]	; (800b784 <_strtod_l+0x5a4>)
 800b5d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b5dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b5e0:	4652      	mov	r2, sl
 800b5e2:	465b      	mov	r3, fp
 800b5e4:	f7f5 f808 	bl	80005f8 <__aeabi_dmul>
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	468b      	mov	fp, r1
 800b5ec:	e63a      	b.n	800b264 <_strtod_l+0x84>
 800b5ee:	9a08      	ldr	r2, [sp, #32]
 800b5f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	db20      	blt.n	800b63a <_strtod_l+0x45a>
 800b5f8:	4c62      	ldr	r4, [pc, #392]	; (800b784 <_strtod_l+0x5a4>)
 800b5fa:	f1c5 050f 	rsb	r5, r5, #15
 800b5fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b602:	4652      	mov	r2, sl
 800b604:	465b      	mov	r3, fp
 800b606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b60a:	f7f4 fff5 	bl	80005f8 <__aeabi_dmul>
 800b60e:	9b08      	ldr	r3, [sp, #32]
 800b610:	1b5d      	subs	r5, r3, r5
 800b612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b616:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b61a:	e7e3      	b.n	800b5e4 <_strtod_l+0x404>
 800b61c:	9b08      	ldr	r3, [sp, #32]
 800b61e:	3316      	adds	r3, #22
 800b620:	db0b      	blt.n	800b63a <_strtod_l+0x45a>
 800b622:	9b07      	ldr	r3, [sp, #28]
 800b624:	4a57      	ldr	r2, [pc, #348]	; (800b784 <_strtod_l+0x5a4>)
 800b626:	1b9e      	subs	r6, r3, r6
 800b628:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b62c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b630:	4650      	mov	r0, sl
 800b632:	4659      	mov	r1, fp
 800b634:	f7f5 f90a 	bl	800084c <__aeabi_ddiv>
 800b638:	e7d6      	b.n	800b5e8 <_strtod_l+0x408>
 800b63a:	9b08      	ldr	r3, [sp, #32]
 800b63c:	eba5 0808 	sub.w	r8, r5, r8
 800b640:	4498      	add	r8, r3
 800b642:	f1b8 0f00 	cmp.w	r8, #0
 800b646:	dd71      	ble.n	800b72c <_strtod_l+0x54c>
 800b648:	f018 030f 	ands.w	r3, r8, #15
 800b64c:	d00a      	beq.n	800b664 <_strtod_l+0x484>
 800b64e:	494d      	ldr	r1, [pc, #308]	; (800b784 <_strtod_l+0x5a4>)
 800b650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b654:	4652      	mov	r2, sl
 800b656:	465b      	mov	r3, fp
 800b658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b65c:	f7f4 ffcc 	bl	80005f8 <__aeabi_dmul>
 800b660:	4682      	mov	sl, r0
 800b662:	468b      	mov	fp, r1
 800b664:	f038 080f 	bics.w	r8, r8, #15
 800b668:	d04d      	beq.n	800b706 <_strtod_l+0x526>
 800b66a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b66e:	dd22      	ble.n	800b6b6 <_strtod_l+0x4d6>
 800b670:	2500      	movs	r5, #0
 800b672:	462e      	mov	r6, r5
 800b674:	9509      	str	r5, [sp, #36]	; 0x24
 800b676:	9507      	str	r5, [sp, #28]
 800b678:	2322      	movs	r3, #34	; 0x22
 800b67a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b78c <_strtod_l+0x5ac>
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	f04f 0a00 	mov.w	sl, #0
 800b684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b686:	2b00      	cmp	r3, #0
 800b688:	f43f adec 	beq.w	800b264 <_strtod_l+0x84>
 800b68c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b68e:	4620      	mov	r0, r4
 800b690:	f001 ff1a 	bl	800d4c8 <_Bfree>
 800b694:	9907      	ldr	r1, [sp, #28]
 800b696:	4620      	mov	r0, r4
 800b698:	f001 ff16 	bl	800d4c8 <_Bfree>
 800b69c:	4631      	mov	r1, r6
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f001 ff12 	bl	800d4c8 <_Bfree>
 800b6a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f001 ff0e 	bl	800d4c8 <_Bfree>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f001 ff0a 	bl	800d4c8 <_Bfree>
 800b6b4:	e5d6      	b.n	800b264 <_strtod_l+0x84>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b6bc:	4650      	mov	r0, sl
 800b6be:	4659      	mov	r1, fp
 800b6c0:	4699      	mov	r9, r3
 800b6c2:	f1b8 0f01 	cmp.w	r8, #1
 800b6c6:	dc21      	bgt.n	800b70c <_strtod_l+0x52c>
 800b6c8:	b10b      	cbz	r3, 800b6ce <_strtod_l+0x4ee>
 800b6ca:	4682      	mov	sl, r0
 800b6cc:	468b      	mov	fp, r1
 800b6ce:	4b2e      	ldr	r3, [pc, #184]	; (800b788 <_strtod_l+0x5a8>)
 800b6d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b6d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b6d8:	4652      	mov	r2, sl
 800b6da:	465b      	mov	r3, fp
 800b6dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b6e0:	f7f4 ff8a 	bl	80005f8 <__aeabi_dmul>
 800b6e4:	4b29      	ldr	r3, [pc, #164]	; (800b78c <_strtod_l+0x5ac>)
 800b6e6:	460a      	mov	r2, r1
 800b6e8:	400b      	ands	r3, r1
 800b6ea:	4929      	ldr	r1, [pc, #164]	; (800b790 <_strtod_l+0x5b0>)
 800b6ec:	428b      	cmp	r3, r1
 800b6ee:	4682      	mov	sl, r0
 800b6f0:	d8be      	bhi.n	800b670 <_strtod_l+0x490>
 800b6f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b6f6:	428b      	cmp	r3, r1
 800b6f8:	bf86      	itte	hi
 800b6fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b794 <_strtod_l+0x5b4>
 800b6fe:	f04f 3aff 	movhi.w	sl, #4294967295
 800b702:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b706:	2300      	movs	r3, #0
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	e081      	b.n	800b810 <_strtod_l+0x630>
 800b70c:	f018 0f01 	tst.w	r8, #1
 800b710:	d007      	beq.n	800b722 <_strtod_l+0x542>
 800b712:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <_strtod_l+0x5a8>)
 800b714:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 ff6c 	bl	80005f8 <__aeabi_dmul>
 800b720:	2301      	movs	r3, #1
 800b722:	f109 0901 	add.w	r9, r9, #1
 800b726:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b72a:	e7ca      	b.n	800b6c2 <_strtod_l+0x4e2>
 800b72c:	d0eb      	beq.n	800b706 <_strtod_l+0x526>
 800b72e:	f1c8 0800 	rsb	r8, r8, #0
 800b732:	f018 020f 	ands.w	r2, r8, #15
 800b736:	d00a      	beq.n	800b74e <_strtod_l+0x56e>
 800b738:	4b12      	ldr	r3, [pc, #72]	; (800b784 <_strtod_l+0x5a4>)
 800b73a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b73e:	4650      	mov	r0, sl
 800b740:	4659      	mov	r1, fp
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f7f5 f881 	bl	800084c <__aeabi_ddiv>
 800b74a:	4682      	mov	sl, r0
 800b74c:	468b      	mov	fp, r1
 800b74e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b752:	d0d8      	beq.n	800b706 <_strtod_l+0x526>
 800b754:	f1b8 0f1f 	cmp.w	r8, #31
 800b758:	dd1e      	ble.n	800b798 <_strtod_l+0x5b8>
 800b75a:	2500      	movs	r5, #0
 800b75c:	462e      	mov	r6, r5
 800b75e:	9509      	str	r5, [sp, #36]	; 0x24
 800b760:	9507      	str	r5, [sp, #28]
 800b762:	2322      	movs	r3, #34	; 0x22
 800b764:	f04f 0a00 	mov.w	sl, #0
 800b768:	f04f 0b00 	mov.w	fp, #0
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	e789      	b.n	800b684 <_strtod_l+0x4a4>
 800b770:	0800f121 	.word	0x0800f121
 800b774:	0800f164 	.word	0x0800f164
 800b778:	0800f119 	.word	0x0800f119
 800b77c:	0800f358 	.word	0x0800f358
 800b780:	0800f253 	.word	0x0800f253
 800b784:	0800f4d8 	.word	0x0800f4d8
 800b788:	0800f4b0 	.word	0x0800f4b0
 800b78c:	7ff00000 	.word	0x7ff00000
 800b790:	7ca00000 	.word	0x7ca00000
 800b794:	7fefffff 	.word	0x7fefffff
 800b798:	f018 0310 	ands.w	r3, r8, #16
 800b79c:	bf18      	it	ne
 800b79e:	236a      	movne	r3, #106	; 0x6a
 800b7a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bb58 <_strtod_l+0x978>
 800b7a4:	9304      	str	r3, [sp, #16]
 800b7a6:	4650      	mov	r0, sl
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f018 0f01 	tst.w	r8, #1
 800b7b0:	d004      	beq.n	800b7bc <_strtod_l+0x5dc>
 800b7b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b7b6:	f7f4 ff1f 	bl	80005f8 <__aeabi_dmul>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b7c0:	f109 0908 	add.w	r9, r9, #8
 800b7c4:	d1f2      	bne.n	800b7ac <_strtod_l+0x5cc>
 800b7c6:	b10b      	cbz	r3, 800b7cc <_strtod_l+0x5ec>
 800b7c8:	4682      	mov	sl, r0
 800b7ca:	468b      	mov	fp, r1
 800b7cc:	9b04      	ldr	r3, [sp, #16]
 800b7ce:	b1bb      	cbz	r3, 800b800 <_strtod_l+0x620>
 800b7d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b7d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	4659      	mov	r1, fp
 800b7dc:	dd10      	ble.n	800b800 <_strtod_l+0x620>
 800b7de:	2b1f      	cmp	r3, #31
 800b7e0:	f340 8128 	ble.w	800ba34 <_strtod_l+0x854>
 800b7e4:	2b34      	cmp	r3, #52	; 0x34
 800b7e6:	bfde      	ittt	le
 800b7e8:	3b20      	suble	r3, #32
 800b7ea:	f04f 32ff 	movle.w	r2, #4294967295
 800b7ee:	fa02 f303 	lslle.w	r3, r2, r3
 800b7f2:	f04f 0a00 	mov.w	sl, #0
 800b7f6:	bfcc      	ite	gt
 800b7f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b7fc:	ea03 0b01 	andle.w	fp, r3, r1
 800b800:	2200      	movs	r2, #0
 800b802:	2300      	movs	r3, #0
 800b804:	4650      	mov	r0, sl
 800b806:	4659      	mov	r1, fp
 800b808:	f7f5 f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d1a4      	bne.n	800b75a <_strtod_l+0x57a>
 800b810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b816:	462b      	mov	r3, r5
 800b818:	463a      	mov	r2, r7
 800b81a:	4620      	mov	r0, r4
 800b81c:	f001 fec0 	bl	800d5a0 <__s2b>
 800b820:	9009      	str	r0, [sp, #36]	; 0x24
 800b822:	2800      	cmp	r0, #0
 800b824:	f43f af24 	beq.w	800b670 <_strtod_l+0x490>
 800b828:	9b07      	ldr	r3, [sp, #28]
 800b82a:	1b9e      	subs	r6, r3, r6
 800b82c:	9b08      	ldr	r3, [sp, #32]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bfb4      	ite	lt
 800b832:	4633      	movlt	r3, r6
 800b834:	2300      	movge	r3, #0
 800b836:	9310      	str	r3, [sp, #64]	; 0x40
 800b838:	9b08      	ldr	r3, [sp, #32]
 800b83a:	2500      	movs	r5, #0
 800b83c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b840:	9318      	str	r3, [sp, #96]	; 0x60
 800b842:	462e      	mov	r6, r5
 800b844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b846:	4620      	mov	r0, r4
 800b848:	6859      	ldr	r1, [r3, #4]
 800b84a:	f001 fdfd 	bl	800d448 <_Balloc>
 800b84e:	9007      	str	r0, [sp, #28]
 800b850:	2800      	cmp	r0, #0
 800b852:	f43f af11 	beq.w	800b678 <_strtod_l+0x498>
 800b856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b858:	691a      	ldr	r2, [r3, #16]
 800b85a:	3202      	adds	r2, #2
 800b85c:	f103 010c 	add.w	r1, r3, #12
 800b860:	0092      	lsls	r2, r2, #2
 800b862:	300c      	adds	r0, #12
 800b864:	f7fe fd9c 	bl	800a3a0 <memcpy>
 800b868:	ec4b ab10 	vmov	d0, sl, fp
 800b86c:	aa20      	add	r2, sp, #128	; 0x80
 800b86e:	a91f      	add	r1, sp, #124	; 0x7c
 800b870:	4620      	mov	r0, r4
 800b872:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b876:	f002 f9cf 	bl	800dc18 <__d2b>
 800b87a:	901e      	str	r0, [sp, #120]	; 0x78
 800b87c:	2800      	cmp	r0, #0
 800b87e:	f43f aefb 	beq.w	800b678 <_strtod_l+0x498>
 800b882:	2101      	movs	r1, #1
 800b884:	4620      	mov	r0, r4
 800b886:	f001 ff25 	bl	800d6d4 <__i2b>
 800b88a:	4606      	mov	r6, r0
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f43f aef3 	beq.w	800b678 <_strtod_l+0x498>
 800b892:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b894:	9904      	ldr	r1, [sp, #16]
 800b896:	2b00      	cmp	r3, #0
 800b898:	bfab      	itete	ge
 800b89a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b89c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b89e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b8a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b8a4:	bfac      	ite	ge
 800b8a6:	eb03 0902 	addge.w	r9, r3, r2
 800b8aa:	1ad7      	sublt	r7, r2, r3
 800b8ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b8ae:	eba3 0801 	sub.w	r8, r3, r1
 800b8b2:	4490      	add	r8, r2
 800b8b4:	4ba3      	ldr	r3, [pc, #652]	; (800bb44 <_strtod_l+0x964>)
 800b8b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8ba:	4598      	cmp	r8, r3
 800b8bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b8c0:	f280 80cc 	bge.w	800ba5c <_strtod_l+0x87c>
 800b8c4:	eba3 0308 	sub.w	r3, r3, r8
 800b8c8:	2b1f      	cmp	r3, #31
 800b8ca:	eba2 0203 	sub.w	r2, r2, r3
 800b8ce:	f04f 0101 	mov.w	r1, #1
 800b8d2:	f300 80b6 	bgt.w	800ba42 <_strtod_l+0x862>
 800b8d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b8da:	9311      	str	r3, [sp, #68]	; 0x44
 800b8dc:	2300      	movs	r3, #0
 800b8de:	930c      	str	r3, [sp, #48]	; 0x30
 800b8e0:	eb09 0802 	add.w	r8, r9, r2
 800b8e4:	9b04      	ldr	r3, [sp, #16]
 800b8e6:	45c1      	cmp	r9, r8
 800b8e8:	4417      	add	r7, r2
 800b8ea:	441f      	add	r7, r3
 800b8ec:	464b      	mov	r3, r9
 800b8ee:	bfa8      	it	ge
 800b8f0:	4643      	movge	r3, r8
 800b8f2:	42bb      	cmp	r3, r7
 800b8f4:	bfa8      	it	ge
 800b8f6:	463b      	movge	r3, r7
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bfc2      	ittt	gt
 800b8fc:	eba8 0803 	subgt.w	r8, r8, r3
 800b900:	1aff      	subgt	r7, r7, r3
 800b902:	eba9 0903 	subgt.w	r9, r9, r3
 800b906:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dd17      	ble.n	800b93c <_strtod_l+0x75c>
 800b90c:	4631      	mov	r1, r6
 800b90e:	461a      	mov	r2, r3
 800b910:	4620      	mov	r0, r4
 800b912:	f001 ff9b 	bl	800d84c <__pow5mult>
 800b916:	4606      	mov	r6, r0
 800b918:	2800      	cmp	r0, #0
 800b91a:	f43f aead 	beq.w	800b678 <_strtod_l+0x498>
 800b91e:	4601      	mov	r1, r0
 800b920:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b922:	4620      	mov	r0, r4
 800b924:	f001 feec 	bl	800d700 <__multiply>
 800b928:	900f      	str	r0, [sp, #60]	; 0x3c
 800b92a:	2800      	cmp	r0, #0
 800b92c:	f43f aea4 	beq.w	800b678 <_strtod_l+0x498>
 800b930:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b932:	4620      	mov	r0, r4
 800b934:	f001 fdc8 	bl	800d4c8 <_Bfree>
 800b938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b93a:	931e      	str	r3, [sp, #120]	; 0x78
 800b93c:	f1b8 0f00 	cmp.w	r8, #0
 800b940:	f300 8091 	bgt.w	800ba66 <_strtod_l+0x886>
 800b944:	9b08      	ldr	r3, [sp, #32]
 800b946:	2b00      	cmp	r3, #0
 800b948:	dd08      	ble.n	800b95c <_strtod_l+0x77c>
 800b94a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b94c:	9907      	ldr	r1, [sp, #28]
 800b94e:	4620      	mov	r0, r4
 800b950:	f001 ff7c 	bl	800d84c <__pow5mult>
 800b954:	9007      	str	r0, [sp, #28]
 800b956:	2800      	cmp	r0, #0
 800b958:	f43f ae8e 	beq.w	800b678 <_strtod_l+0x498>
 800b95c:	2f00      	cmp	r7, #0
 800b95e:	dd08      	ble.n	800b972 <_strtod_l+0x792>
 800b960:	9907      	ldr	r1, [sp, #28]
 800b962:	463a      	mov	r2, r7
 800b964:	4620      	mov	r0, r4
 800b966:	f001 ffcb 	bl	800d900 <__lshift>
 800b96a:	9007      	str	r0, [sp, #28]
 800b96c:	2800      	cmp	r0, #0
 800b96e:	f43f ae83 	beq.w	800b678 <_strtod_l+0x498>
 800b972:	f1b9 0f00 	cmp.w	r9, #0
 800b976:	dd08      	ble.n	800b98a <_strtod_l+0x7aa>
 800b978:	4631      	mov	r1, r6
 800b97a:	464a      	mov	r2, r9
 800b97c:	4620      	mov	r0, r4
 800b97e:	f001 ffbf 	bl	800d900 <__lshift>
 800b982:	4606      	mov	r6, r0
 800b984:	2800      	cmp	r0, #0
 800b986:	f43f ae77 	beq.w	800b678 <_strtod_l+0x498>
 800b98a:	9a07      	ldr	r2, [sp, #28]
 800b98c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b98e:	4620      	mov	r0, r4
 800b990:	f002 f83e 	bl	800da10 <__mdiff>
 800b994:	4605      	mov	r5, r0
 800b996:	2800      	cmp	r0, #0
 800b998:	f43f ae6e 	beq.w	800b678 <_strtod_l+0x498>
 800b99c:	68c3      	ldr	r3, [r0, #12]
 800b99e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	60c3      	str	r3, [r0, #12]
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	f002 f817 	bl	800d9d8 <__mcmp>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	da65      	bge.n	800ba7a <_strtod_l+0x89a>
 800b9ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9b0:	ea53 030a 	orrs.w	r3, r3, sl
 800b9b4:	f040 8087 	bne.w	800bac6 <_strtod_l+0x8e6>
 800b9b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f040 8082 	bne.w	800bac6 <_strtod_l+0x8e6>
 800b9c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9c6:	0d1b      	lsrs	r3, r3, #20
 800b9c8:	051b      	lsls	r3, r3, #20
 800b9ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b9ce:	d97a      	bls.n	800bac6 <_strtod_l+0x8e6>
 800b9d0:	696b      	ldr	r3, [r5, #20]
 800b9d2:	b913      	cbnz	r3, 800b9da <_strtod_l+0x7fa>
 800b9d4:	692b      	ldr	r3, [r5, #16]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	dd75      	ble.n	800bac6 <_strtod_l+0x8e6>
 800b9da:	4629      	mov	r1, r5
 800b9dc:	2201      	movs	r2, #1
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f001 ff8e 	bl	800d900 <__lshift>
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	f001 fff6 	bl	800d9d8 <__mcmp>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	dd6a      	ble.n	800bac6 <_strtod_l+0x8e6>
 800b9f0:	9904      	ldr	r1, [sp, #16]
 800b9f2:	4a55      	ldr	r2, [pc, #340]	; (800bb48 <_strtod_l+0x968>)
 800b9f4:	465b      	mov	r3, fp
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	f000 8085 	beq.w	800bb06 <_strtod_l+0x926>
 800b9fc:	ea02 010b 	and.w	r1, r2, fp
 800ba00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba04:	dc7f      	bgt.n	800bb06 <_strtod_l+0x926>
 800ba06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba0a:	f77f aeaa 	ble.w	800b762 <_strtod_l+0x582>
 800ba0e:	4a4f      	ldr	r2, [pc, #316]	; (800bb4c <_strtod_l+0x96c>)
 800ba10:	2300      	movs	r3, #0
 800ba12:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ba16:	4650      	mov	r0, sl
 800ba18:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ba1c:	4659      	mov	r1, fp
 800ba1e:	f7f4 fdeb 	bl	80005f8 <__aeabi_dmul>
 800ba22:	460b      	mov	r3, r1
 800ba24:	4303      	orrs	r3, r0
 800ba26:	bf08      	it	eq
 800ba28:	2322      	moveq	r3, #34	; 0x22
 800ba2a:	4682      	mov	sl, r0
 800ba2c:	468b      	mov	fp, r1
 800ba2e:	bf08      	it	eq
 800ba30:	6023      	streq	r3, [r4, #0]
 800ba32:	e62b      	b.n	800b68c <_strtod_l+0x4ac>
 800ba34:	f04f 32ff 	mov.w	r2, #4294967295
 800ba38:	fa02 f303 	lsl.w	r3, r2, r3
 800ba3c:	ea03 0a0a 	and.w	sl, r3, sl
 800ba40:	e6de      	b.n	800b800 <_strtod_l+0x620>
 800ba42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ba46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ba4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ba4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ba52:	fa01 f308 	lsl.w	r3, r1, r8
 800ba56:	930c      	str	r3, [sp, #48]	; 0x30
 800ba58:	9111      	str	r1, [sp, #68]	; 0x44
 800ba5a:	e741      	b.n	800b8e0 <_strtod_l+0x700>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	930c      	str	r3, [sp, #48]	; 0x30
 800ba60:	2301      	movs	r3, #1
 800ba62:	9311      	str	r3, [sp, #68]	; 0x44
 800ba64:	e73c      	b.n	800b8e0 <_strtod_l+0x700>
 800ba66:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ba68:	4642      	mov	r2, r8
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f001 ff48 	bl	800d900 <__lshift>
 800ba70:	901e      	str	r0, [sp, #120]	; 0x78
 800ba72:	2800      	cmp	r0, #0
 800ba74:	f47f af66 	bne.w	800b944 <_strtod_l+0x764>
 800ba78:	e5fe      	b.n	800b678 <_strtod_l+0x498>
 800ba7a:	465f      	mov	r7, fp
 800ba7c:	d16e      	bne.n	800bb5c <_strtod_l+0x97c>
 800ba7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba84:	b342      	cbz	r2, 800bad8 <_strtod_l+0x8f8>
 800ba86:	4a32      	ldr	r2, [pc, #200]	; (800bb50 <_strtod_l+0x970>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d128      	bne.n	800bade <_strtod_l+0x8fe>
 800ba8c:	9b04      	ldr	r3, [sp, #16]
 800ba8e:	4650      	mov	r0, sl
 800ba90:	b1eb      	cbz	r3, 800bace <_strtod_l+0x8ee>
 800ba92:	4a2d      	ldr	r2, [pc, #180]	; (800bb48 <_strtod_l+0x968>)
 800ba94:	403a      	ands	r2, r7
 800ba96:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ba9a:	f04f 31ff 	mov.w	r1, #4294967295
 800ba9e:	d819      	bhi.n	800bad4 <_strtod_l+0x8f4>
 800baa0:	0d12      	lsrs	r2, r2, #20
 800baa2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800baa6:	fa01 f303 	lsl.w	r3, r1, r3
 800baaa:	4298      	cmp	r0, r3
 800baac:	d117      	bne.n	800bade <_strtod_l+0x8fe>
 800baae:	4b29      	ldr	r3, [pc, #164]	; (800bb54 <_strtod_l+0x974>)
 800bab0:	429f      	cmp	r7, r3
 800bab2:	d102      	bne.n	800baba <_strtod_l+0x8da>
 800bab4:	3001      	adds	r0, #1
 800bab6:	f43f addf 	beq.w	800b678 <_strtod_l+0x498>
 800baba:	4b23      	ldr	r3, [pc, #140]	; (800bb48 <_strtod_l+0x968>)
 800babc:	403b      	ands	r3, r7
 800babe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bac2:	f04f 0a00 	mov.w	sl, #0
 800bac6:	9b04      	ldr	r3, [sp, #16]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1a0      	bne.n	800ba0e <_strtod_l+0x82e>
 800bacc:	e5de      	b.n	800b68c <_strtod_l+0x4ac>
 800bace:	f04f 33ff 	mov.w	r3, #4294967295
 800bad2:	e7ea      	b.n	800baaa <_strtod_l+0x8ca>
 800bad4:	460b      	mov	r3, r1
 800bad6:	e7e8      	b.n	800baaa <_strtod_l+0x8ca>
 800bad8:	ea53 030a 	orrs.w	r3, r3, sl
 800badc:	d088      	beq.n	800b9f0 <_strtod_l+0x810>
 800bade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bae0:	b1db      	cbz	r3, 800bb1a <_strtod_l+0x93a>
 800bae2:	423b      	tst	r3, r7
 800bae4:	d0ef      	beq.n	800bac6 <_strtod_l+0x8e6>
 800bae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bae8:	9a04      	ldr	r2, [sp, #16]
 800baea:	4650      	mov	r0, sl
 800baec:	4659      	mov	r1, fp
 800baee:	b1c3      	cbz	r3, 800bb22 <_strtod_l+0x942>
 800baf0:	f7ff fb58 	bl	800b1a4 <sulp>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bafc:	f7f4 fbc6 	bl	800028c <__adddf3>
 800bb00:	4682      	mov	sl, r0
 800bb02:	468b      	mov	fp, r1
 800bb04:	e7df      	b.n	800bac6 <_strtod_l+0x8e6>
 800bb06:	4013      	ands	r3, r2
 800bb08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb14:	f04f 3aff 	mov.w	sl, #4294967295
 800bb18:	e7d5      	b.n	800bac6 <_strtod_l+0x8e6>
 800bb1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb1c:	ea13 0f0a 	tst.w	r3, sl
 800bb20:	e7e0      	b.n	800bae4 <_strtod_l+0x904>
 800bb22:	f7ff fb3f 	bl	800b1a4 <sulp>
 800bb26:	4602      	mov	r2, r0
 800bb28:	460b      	mov	r3, r1
 800bb2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb2e:	f7f4 fbab 	bl	8000288 <__aeabi_dsub>
 800bb32:	2200      	movs	r2, #0
 800bb34:	2300      	movs	r3, #0
 800bb36:	4682      	mov	sl, r0
 800bb38:	468b      	mov	fp, r1
 800bb3a:	f7f4 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d0c1      	beq.n	800bac6 <_strtod_l+0x8e6>
 800bb42:	e60e      	b.n	800b762 <_strtod_l+0x582>
 800bb44:	fffffc02 	.word	0xfffffc02
 800bb48:	7ff00000 	.word	0x7ff00000
 800bb4c:	39500000 	.word	0x39500000
 800bb50:	000fffff 	.word	0x000fffff
 800bb54:	7fefffff 	.word	0x7fefffff
 800bb58:	0800f178 	.word	0x0800f178
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f002 f8b6 	bl	800dcd0 <__ratio>
 800bb64:	ec59 8b10 	vmov	r8, r9, d0
 800bb68:	ee10 0a10 	vmov	r0, s0
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb72:	4649      	mov	r1, r9
 800bb74:	f7f4 ffbc 	bl	8000af0 <__aeabi_dcmple>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d07c      	beq.n	800bc76 <_strtod_l+0xa96>
 800bb7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d04c      	beq.n	800bc1c <_strtod_l+0xa3c>
 800bb82:	4b95      	ldr	r3, [pc, #596]	; (800bdd8 <_strtod_l+0xbf8>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bb8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bdd8 <_strtod_l+0xbf8>
 800bb8e:	f04f 0800 	mov.w	r8, #0
 800bb92:	4b92      	ldr	r3, [pc, #584]	; (800bddc <_strtod_l+0xbfc>)
 800bb94:	403b      	ands	r3, r7
 800bb96:	9311      	str	r3, [sp, #68]	; 0x44
 800bb98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bb9a:	4b91      	ldr	r3, [pc, #580]	; (800bde0 <_strtod_l+0xc00>)
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	f040 80b2 	bne.w	800bd06 <_strtod_l+0xb26>
 800bba2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbaa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bbae:	ec4b ab10 	vmov	d0, sl, fp
 800bbb2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bbb6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bbba:	f001 ffb1 	bl	800db20 <__ulp>
 800bbbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbc2:	ec53 2b10 	vmov	r2, r3, d0
 800bbc6:	f7f4 fd17 	bl	80005f8 <__aeabi_dmul>
 800bbca:	4652      	mov	r2, sl
 800bbcc:	465b      	mov	r3, fp
 800bbce:	f7f4 fb5d 	bl	800028c <__adddf3>
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4981      	ldr	r1, [pc, #516]	; (800bddc <_strtod_l+0xbfc>)
 800bbd6:	4a83      	ldr	r2, [pc, #524]	; (800bde4 <_strtod_l+0xc04>)
 800bbd8:	4019      	ands	r1, r3
 800bbda:	4291      	cmp	r1, r2
 800bbdc:	4682      	mov	sl, r0
 800bbde:	d95e      	bls.n	800bc9e <_strtod_l+0xabe>
 800bbe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbe2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d103      	bne.n	800bbf2 <_strtod_l+0xa12>
 800bbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbec:	3301      	adds	r3, #1
 800bbee:	f43f ad43 	beq.w	800b678 <_strtod_l+0x498>
 800bbf2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800bdf0 <_strtod_l+0xc10>
 800bbf6:	f04f 3aff 	mov.w	sl, #4294967295
 800bbfa:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f001 fc63 	bl	800d4c8 <_Bfree>
 800bc02:	9907      	ldr	r1, [sp, #28]
 800bc04:	4620      	mov	r0, r4
 800bc06:	f001 fc5f 	bl	800d4c8 <_Bfree>
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f001 fc5b 	bl	800d4c8 <_Bfree>
 800bc12:	4629      	mov	r1, r5
 800bc14:	4620      	mov	r0, r4
 800bc16:	f001 fc57 	bl	800d4c8 <_Bfree>
 800bc1a:	e613      	b.n	800b844 <_strtod_l+0x664>
 800bc1c:	f1ba 0f00 	cmp.w	sl, #0
 800bc20:	d11b      	bne.n	800bc5a <_strtod_l+0xa7a>
 800bc22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc26:	b9f3      	cbnz	r3, 800bc66 <_strtod_l+0xa86>
 800bc28:	4b6b      	ldr	r3, [pc, #428]	; (800bdd8 <_strtod_l+0xbf8>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	f7f4 ff54 	bl	8000adc <__aeabi_dcmplt>
 800bc34:	b9d0      	cbnz	r0, 800bc6c <_strtod_l+0xa8c>
 800bc36:	4640      	mov	r0, r8
 800bc38:	4649      	mov	r1, r9
 800bc3a:	4b6b      	ldr	r3, [pc, #428]	; (800bde8 <_strtod_l+0xc08>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f7f4 fcdb 	bl	80005f8 <__aeabi_dmul>
 800bc42:	4680      	mov	r8, r0
 800bc44:	4689      	mov	r9, r1
 800bc46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc4a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800bc4e:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc50:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bc54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bc58:	e79b      	b.n	800bb92 <_strtod_l+0x9b2>
 800bc5a:	f1ba 0f01 	cmp.w	sl, #1
 800bc5e:	d102      	bne.n	800bc66 <_strtod_l+0xa86>
 800bc60:	2f00      	cmp	r7, #0
 800bc62:	f43f ad7e 	beq.w	800b762 <_strtod_l+0x582>
 800bc66:	4b61      	ldr	r3, [pc, #388]	; (800bdec <_strtod_l+0xc0c>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	e78c      	b.n	800bb86 <_strtod_l+0x9a6>
 800bc6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bde8 <_strtod_l+0xc08>
 800bc70:	f04f 0800 	mov.w	r8, #0
 800bc74:	e7e7      	b.n	800bc46 <_strtod_l+0xa66>
 800bc76:	4b5c      	ldr	r3, [pc, #368]	; (800bde8 <_strtod_l+0xc08>)
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f7f4 fcbb 	bl	80005f8 <__aeabi_dmul>
 800bc82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc84:	4680      	mov	r8, r0
 800bc86:	4689      	mov	r9, r1
 800bc88:	b933      	cbnz	r3, 800bc98 <_strtod_l+0xab8>
 800bc8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc8e:	9012      	str	r0, [sp, #72]	; 0x48
 800bc90:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bc96:	e7dd      	b.n	800bc54 <_strtod_l+0xa74>
 800bc98:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800bc9c:	e7f9      	b.n	800bc92 <_strtod_l+0xab2>
 800bc9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bca2:	9b04      	ldr	r3, [sp, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1a8      	bne.n	800bbfa <_strtod_l+0xa1a>
 800bca8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bcae:	0d1b      	lsrs	r3, r3, #20
 800bcb0:	051b      	lsls	r3, r3, #20
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d1a1      	bne.n	800bbfa <_strtod_l+0xa1a>
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4649      	mov	r1, r9
 800bcba:	f7f4 fffd 	bl	8000cb8 <__aeabi_d2lz>
 800bcbe:	f7f4 fc6d 	bl	800059c <__aeabi_l2d>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4640      	mov	r0, r8
 800bcc8:	4649      	mov	r1, r9
 800bcca:	f7f4 fadd 	bl	8000288 <__aeabi_dsub>
 800bcce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bcd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcd4:	ea43 030a 	orr.w	r3, r3, sl
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	4680      	mov	r8, r0
 800bcdc:	4689      	mov	r9, r1
 800bcde:	d053      	beq.n	800bd88 <_strtod_l+0xba8>
 800bce0:	a335      	add	r3, pc, #212	; (adr r3, 800bdb8 <_strtod_l+0xbd8>)
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	f7f4 fef9 	bl	8000adc <__aeabi_dcmplt>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f47f acce 	bne.w	800b68c <_strtod_l+0x4ac>
 800bcf0:	a333      	add	r3, pc, #204	; (adr r3, 800bdc0 <_strtod_l+0xbe0>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	f7f4 ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f43f af7b 	beq.w	800bbfa <_strtod_l+0xa1a>
 800bd04:	e4c2      	b.n	800b68c <_strtod_l+0x4ac>
 800bd06:	9b04      	ldr	r3, [sp, #16]
 800bd08:	b333      	cbz	r3, 800bd58 <_strtod_l+0xb78>
 800bd0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd10:	d822      	bhi.n	800bd58 <_strtod_l+0xb78>
 800bd12:	a32d      	add	r3, pc, #180	; (adr r3, 800bdc8 <_strtod_l+0xbe8>)
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	4640      	mov	r0, r8
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	f7f4 fee8 	bl	8000af0 <__aeabi_dcmple>
 800bd20:	b1a0      	cbz	r0, 800bd4c <_strtod_l+0xb6c>
 800bd22:	4649      	mov	r1, r9
 800bd24:	4640      	mov	r0, r8
 800bd26:	f7f4 ff3f 	bl	8000ba8 <__aeabi_d2uiz>
 800bd2a:	2801      	cmp	r0, #1
 800bd2c:	bf38      	it	cc
 800bd2e:	2001      	movcc	r0, #1
 800bd30:	f7f4 fbe8 	bl	8000504 <__aeabi_ui2d>
 800bd34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd36:	4680      	mov	r8, r0
 800bd38:	4689      	mov	r9, r1
 800bd3a:	bb13      	cbnz	r3, 800bd82 <_strtod_l+0xba2>
 800bd3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd40:	9014      	str	r0, [sp, #80]	; 0x50
 800bd42:	9315      	str	r3, [sp, #84]	; 0x54
 800bd44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bd48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bd4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	930d      	str	r3, [sp, #52]	; 0x34
 800bd58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bd60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd64:	f001 fedc 	bl	800db20 <__ulp>
 800bd68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd6c:	ec53 2b10 	vmov	r2, r3, d0
 800bd70:	f7f4 fc42 	bl	80005f8 <__aeabi_dmul>
 800bd74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd78:	f7f4 fa88 	bl	800028c <__adddf3>
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	468b      	mov	fp, r1
 800bd80:	e78f      	b.n	800bca2 <_strtod_l+0xac2>
 800bd82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800bd86:	e7dd      	b.n	800bd44 <_strtod_l+0xb64>
 800bd88:	a311      	add	r3, pc, #68	; (adr r3, 800bdd0 <_strtod_l+0xbf0>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f7f4 fea5 	bl	8000adc <__aeabi_dcmplt>
 800bd92:	e7b4      	b.n	800bcfe <_strtod_l+0xb1e>
 800bd94:	2300      	movs	r3, #0
 800bd96:	930e      	str	r3, [sp, #56]	; 0x38
 800bd98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bd9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	f7ff ba65 	b.w	800b26c <_strtod_l+0x8c>
 800bda2:	2b65      	cmp	r3, #101	; 0x65
 800bda4:	f43f ab5d 	beq.w	800b462 <_strtod_l+0x282>
 800bda8:	2b45      	cmp	r3, #69	; 0x45
 800bdaa:	f43f ab5a 	beq.w	800b462 <_strtod_l+0x282>
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f7ff bb92 	b.w	800b4d8 <_strtod_l+0x2f8>
 800bdb4:	f3af 8000 	nop.w
 800bdb8:	94a03595 	.word	0x94a03595
 800bdbc:	3fdfffff 	.word	0x3fdfffff
 800bdc0:	35afe535 	.word	0x35afe535
 800bdc4:	3fe00000 	.word	0x3fe00000
 800bdc8:	ffc00000 	.word	0xffc00000
 800bdcc:	41dfffff 	.word	0x41dfffff
 800bdd0:	94a03595 	.word	0x94a03595
 800bdd4:	3fcfffff 	.word	0x3fcfffff
 800bdd8:	3ff00000 	.word	0x3ff00000
 800bddc:	7ff00000 	.word	0x7ff00000
 800bde0:	7fe00000 	.word	0x7fe00000
 800bde4:	7c9fffff 	.word	0x7c9fffff
 800bde8:	3fe00000 	.word	0x3fe00000
 800bdec:	bff00000 	.word	0xbff00000
 800bdf0:	7fefffff 	.word	0x7fefffff

0800bdf4 <_strtod_r>:
 800bdf4:	4b01      	ldr	r3, [pc, #4]	; (800bdfc <_strtod_r+0x8>)
 800bdf6:	f7ff b9f3 	b.w	800b1e0 <_strtod_l>
 800bdfa:	bf00      	nop
 800bdfc:	200000b0 	.word	0x200000b0

0800be00 <strtod>:
 800be00:	460a      	mov	r2, r1
 800be02:	4601      	mov	r1, r0
 800be04:	4802      	ldr	r0, [pc, #8]	; (800be10 <strtod+0x10>)
 800be06:	4b03      	ldr	r3, [pc, #12]	; (800be14 <strtod+0x14>)
 800be08:	6800      	ldr	r0, [r0, #0]
 800be0a:	f7ff b9e9 	b.w	800b1e0 <_strtod_l>
 800be0e:	bf00      	nop
 800be10:	20000048 	.word	0x20000048
 800be14:	200000b0 	.word	0x200000b0

0800be18 <strtok>:
 800be18:	4b16      	ldr	r3, [pc, #88]	; (800be74 <strtok+0x5c>)
 800be1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be1c:	681e      	ldr	r6, [r3, #0]
 800be1e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800be20:	4605      	mov	r5, r0
 800be22:	b9fc      	cbnz	r4, 800be64 <strtok+0x4c>
 800be24:	2050      	movs	r0, #80	; 0x50
 800be26:	9101      	str	r1, [sp, #4]
 800be28:	f001 faf4 	bl	800d414 <malloc>
 800be2c:	9901      	ldr	r1, [sp, #4]
 800be2e:	65b0      	str	r0, [r6, #88]	; 0x58
 800be30:	4602      	mov	r2, r0
 800be32:	b920      	cbnz	r0, 800be3e <strtok+0x26>
 800be34:	4b10      	ldr	r3, [pc, #64]	; (800be78 <strtok+0x60>)
 800be36:	4811      	ldr	r0, [pc, #68]	; (800be7c <strtok+0x64>)
 800be38:	2157      	movs	r1, #87	; 0x57
 800be3a:	f000 f8cf 	bl	800bfdc <__assert_func>
 800be3e:	e9c0 4400 	strd	r4, r4, [r0]
 800be42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800be46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800be4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800be4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800be52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800be56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800be5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800be5e:	6184      	str	r4, [r0, #24]
 800be60:	7704      	strb	r4, [r0, #28]
 800be62:	6244      	str	r4, [r0, #36]	; 0x24
 800be64:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800be66:	2301      	movs	r3, #1
 800be68:	4628      	mov	r0, r5
 800be6a:	b002      	add	sp, #8
 800be6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be70:	f000 b806 	b.w	800be80 <__strtok_r>
 800be74:	20000048 	.word	0x20000048
 800be78:	0800f1a0 	.word	0x0800f1a0
 800be7c:	0800f1b7 	.word	0x0800f1b7

0800be80 <__strtok_r>:
 800be80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be82:	b908      	cbnz	r0, 800be88 <__strtok_r+0x8>
 800be84:	6810      	ldr	r0, [r2, #0]
 800be86:	b188      	cbz	r0, 800beac <__strtok_r+0x2c>
 800be88:	4604      	mov	r4, r0
 800be8a:	4620      	mov	r0, r4
 800be8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800be90:	460f      	mov	r7, r1
 800be92:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be96:	b91e      	cbnz	r6, 800bea0 <__strtok_r+0x20>
 800be98:	b965      	cbnz	r5, 800beb4 <__strtok_r+0x34>
 800be9a:	6015      	str	r5, [r2, #0]
 800be9c:	4628      	mov	r0, r5
 800be9e:	e005      	b.n	800beac <__strtok_r+0x2c>
 800bea0:	42b5      	cmp	r5, r6
 800bea2:	d1f6      	bne.n	800be92 <__strtok_r+0x12>
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1f0      	bne.n	800be8a <__strtok_r+0xa>
 800bea8:	6014      	str	r4, [r2, #0]
 800beaa:	7003      	strb	r3, [r0, #0]
 800beac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beae:	461c      	mov	r4, r3
 800beb0:	e00c      	b.n	800becc <__strtok_r+0x4c>
 800beb2:	b915      	cbnz	r5, 800beba <__strtok_r+0x3a>
 800beb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800beb8:	460e      	mov	r6, r1
 800beba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bebe:	42ab      	cmp	r3, r5
 800bec0:	d1f7      	bne.n	800beb2 <__strtok_r+0x32>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0f3      	beq.n	800beae <__strtok_r+0x2e>
 800bec6:	2300      	movs	r3, #0
 800bec8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800becc:	6014      	str	r4, [r2, #0]
 800bece:	e7ed      	b.n	800beac <__strtok_r+0x2c>

0800bed0 <_strtol_l.isra.0>:
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bed6:	d001      	beq.n	800bedc <_strtol_l.isra.0+0xc>
 800bed8:	2b24      	cmp	r3, #36	; 0x24
 800beda:	d906      	bls.n	800beea <_strtol_l.isra.0+0x1a>
 800bedc:	f7fe fa36 	bl	800a34c <__errno>
 800bee0:	2316      	movs	r3, #22
 800bee2:	6003      	str	r3, [r0, #0]
 800bee4:	2000      	movs	r0, #0
 800bee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beea:	4f3a      	ldr	r7, [pc, #232]	; (800bfd4 <_strtol_l.isra.0+0x104>)
 800beec:	468e      	mov	lr, r1
 800beee:	4676      	mov	r6, lr
 800bef0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bef4:	5de5      	ldrb	r5, [r4, r7]
 800bef6:	f015 0508 	ands.w	r5, r5, #8
 800befa:	d1f8      	bne.n	800beee <_strtol_l.isra.0+0x1e>
 800befc:	2c2d      	cmp	r4, #45	; 0x2d
 800befe:	d134      	bne.n	800bf6a <_strtol_l.isra.0+0x9a>
 800bf00:	f89e 4000 	ldrb.w	r4, [lr]
 800bf04:	f04f 0801 	mov.w	r8, #1
 800bf08:	f106 0e02 	add.w	lr, r6, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d05c      	beq.n	800bfca <_strtol_l.isra.0+0xfa>
 800bf10:	2b10      	cmp	r3, #16
 800bf12:	d10c      	bne.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bf14:	2c30      	cmp	r4, #48	; 0x30
 800bf16:	d10a      	bne.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bf18:	f89e 4000 	ldrb.w	r4, [lr]
 800bf1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf20:	2c58      	cmp	r4, #88	; 0x58
 800bf22:	d14d      	bne.n	800bfc0 <_strtol_l.isra.0+0xf0>
 800bf24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bf28:	2310      	movs	r3, #16
 800bf2a:	f10e 0e02 	add.w	lr, lr, #2
 800bf2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bf32:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf36:	2600      	movs	r6, #0
 800bf38:	fbbc f9f3 	udiv	r9, ip, r3
 800bf3c:	4635      	mov	r5, r6
 800bf3e:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bf46:	2f09      	cmp	r7, #9
 800bf48:	d818      	bhi.n	800bf7c <_strtol_l.isra.0+0xac>
 800bf4a:	463c      	mov	r4, r7
 800bf4c:	42a3      	cmp	r3, r4
 800bf4e:	dd24      	ble.n	800bf9a <_strtol_l.isra.0+0xca>
 800bf50:	2e00      	cmp	r6, #0
 800bf52:	db1f      	blt.n	800bf94 <_strtol_l.isra.0+0xc4>
 800bf54:	45a9      	cmp	r9, r5
 800bf56:	d31d      	bcc.n	800bf94 <_strtol_l.isra.0+0xc4>
 800bf58:	d101      	bne.n	800bf5e <_strtol_l.isra.0+0x8e>
 800bf5a:	45a2      	cmp	sl, r4
 800bf5c:	db1a      	blt.n	800bf94 <_strtol_l.isra.0+0xc4>
 800bf5e:	fb05 4503 	mla	r5, r5, r3, r4
 800bf62:	2601      	movs	r6, #1
 800bf64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bf68:	e7eb      	b.n	800bf42 <_strtol_l.isra.0+0x72>
 800bf6a:	2c2b      	cmp	r4, #43	; 0x2b
 800bf6c:	bf08      	it	eq
 800bf6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bf72:	46a8      	mov	r8, r5
 800bf74:	bf08      	it	eq
 800bf76:	f106 0e02 	addeq.w	lr, r6, #2
 800bf7a:	e7c7      	b.n	800bf0c <_strtol_l.isra.0+0x3c>
 800bf7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bf80:	2f19      	cmp	r7, #25
 800bf82:	d801      	bhi.n	800bf88 <_strtol_l.isra.0+0xb8>
 800bf84:	3c37      	subs	r4, #55	; 0x37
 800bf86:	e7e1      	b.n	800bf4c <_strtol_l.isra.0+0x7c>
 800bf88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bf8c:	2f19      	cmp	r7, #25
 800bf8e:	d804      	bhi.n	800bf9a <_strtol_l.isra.0+0xca>
 800bf90:	3c57      	subs	r4, #87	; 0x57
 800bf92:	e7db      	b.n	800bf4c <_strtol_l.isra.0+0x7c>
 800bf94:	f04f 36ff 	mov.w	r6, #4294967295
 800bf98:	e7e4      	b.n	800bf64 <_strtol_l.isra.0+0x94>
 800bf9a:	2e00      	cmp	r6, #0
 800bf9c:	da05      	bge.n	800bfaa <_strtol_l.isra.0+0xda>
 800bf9e:	2322      	movs	r3, #34	; 0x22
 800bfa0:	6003      	str	r3, [r0, #0]
 800bfa2:	4665      	mov	r5, ip
 800bfa4:	b942      	cbnz	r2, 800bfb8 <_strtol_l.isra.0+0xe8>
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	e79d      	b.n	800bee6 <_strtol_l.isra.0+0x16>
 800bfaa:	f1b8 0f00 	cmp.w	r8, #0
 800bfae:	d000      	beq.n	800bfb2 <_strtol_l.isra.0+0xe2>
 800bfb0:	426d      	negs	r5, r5
 800bfb2:	2a00      	cmp	r2, #0
 800bfb4:	d0f7      	beq.n	800bfa6 <_strtol_l.isra.0+0xd6>
 800bfb6:	b10e      	cbz	r6, 800bfbc <_strtol_l.isra.0+0xec>
 800bfb8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bfbc:	6011      	str	r1, [r2, #0]
 800bfbe:	e7f2      	b.n	800bfa6 <_strtol_l.isra.0+0xd6>
 800bfc0:	2430      	movs	r4, #48	; 0x30
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1b3      	bne.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bfc6:	2308      	movs	r3, #8
 800bfc8:	e7b1      	b.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bfca:	2c30      	cmp	r4, #48	; 0x30
 800bfcc:	d0a4      	beq.n	800bf18 <_strtol_l.isra.0+0x48>
 800bfce:	230a      	movs	r3, #10
 800bfd0:	e7ad      	b.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bfd2:	bf00      	nop
 800bfd4:	0800f255 	.word	0x0800f255

0800bfd8 <_strtol_r>:
 800bfd8:	f7ff bf7a 	b.w	800bed0 <_strtol_l.isra.0>

0800bfdc <__assert_func>:
 800bfdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfde:	4614      	mov	r4, r2
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	4b09      	ldr	r3, [pc, #36]	; (800c008 <__assert_func+0x2c>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	68d8      	ldr	r0, [r3, #12]
 800bfea:	b14c      	cbz	r4, 800c000 <__assert_func+0x24>
 800bfec:	4b07      	ldr	r3, [pc, #28]	; (800c00c <__assert_func+0x30>)
 800bfee:	9100      	str	r1, [sp, #0]
 800bff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bff4:	4906      	ldr	r1, [pc, #24]	; (800c010 <__assert_func+0x34>)
 800bff6:	462b      	mov	r3, r5
 800bff8:	f000 fe86 	bl	800cd08 <fiprintf>
 800bffc:	f7fe f99b 	bl	800a336 <abort>
 800c000:	4b04      	ldr	r3, [pc, #16]	; (800c014 <__assert_func+0x38>)
 800c002:	461c      	mov	r4, r3
 800c004:	e7f3      	b.n	800bfee <__assert_func+0x12>
 800c006:	bf00      	nop
 800c008:	20000048 	.word	0x20000048
 800c00c:	0800f218 	.word	0x0800f218
 800c010:	0800f225 	.word	0x0800f225
 800c014:	0800f253 	.word	0x0800f253

0800c018 <quorem>:
 800c018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	6903      	ldr	r3, [r0, #16]
 800c01e:	690c      	ldr	r4, [r1, #16]
 800c020:	42a3      	cmp	r3, r4
 800c022:	4607      	mov	r7, r0
 800c024:	f2c0 8081 	blt.w	800c12a <quorem+0x112>
 800c028:	3c01      	subs	r4, #1
 800c02a:	f101 0814 	add.w	r8, r1, #20
 800c02e:	f100 0514 	add.w	r5, r0, #20
 800c032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c03c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c040:	3301      	adds	r3, #1
 800c042:	429a      	cmp	r2, r3
 800c044:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c048:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c04c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c050:	d331      	bcc.n	800c0b6 <quorem+0x9e>
 800c052:	f04f 0e00 	mov.w	lr, #0
 800c056:	4640      	mov	r0, r8
 800c058:	46ac      	mov	ip, r5
 800c05a:	46f2      	mov	sl, lr
 800c05c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c060:	b293      	uxth	r3, r2
 800c062:	fb06 e303 	mla	r3, r6, r3, lr
 800c066:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	ebaa 0303 	sub.w	r3, sl, r3
 800c070:	0c12      	lsrs	r2, r2, #16
 800c072:	f8dc a000 	ldr.w	sl, [ip]
 800c076:	fb06 e202 	mla	r2, r6, r2, lr
 800c07a:	fa13 f38a 	uxtah	r3, r3, sl
 800c07e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c082:	fa1f fa82 	uxth.w	sl, r2
 800c086:	f8dc 2000 	ldr.w	r2, [ip]
 800c08a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c08e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c092:	b29b      	uxth	r3, r3
 800c094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c098:	4581      	cmp	r9, r0
 800c09a:	f84c 3b04 	str.w	r3, [ip], #4
 800c09e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c0a2:	d2db      	bcs.n	800c05c <quorem+0x44>
 800c0a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c0a8:	b92b      	cbnz	r3, 800c0b6 <quorem+0x9e>
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	3b04      	subs	r3, #4
 800c0ae:	429d      	cmp	r5, r3
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	d32e      	bcc.n	800c112 <quorem+0xfa>
 800c0b4:	613c      	str	r4, [r7, #16]
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	f001 fc8e 	bl	800d9d8 <__mcmp>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	db24      	blt.n	800c10a <quorem+0xf2>
 800c0c0:	3601      	adds	r6, #1
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f04f 0c00 	mov.w	ip, #0
 800c0c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0cc:	f8d0 e000 	ldr.w	lr, [r0]
 800c0d0:	b293      	uxth	r3, r2
 800c0d2:	ebac 0303 	sub.w	r3, ip, r3
 800c0d6:	0c12      	lsrs	r2, r2, #16
 800c0d8:	fa13 f38e 	uxtah	r3, r3, lr
 800c0dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c0e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0ea:	45c1      	cmp	r9, r8
 800c0ec:	f840 3b04 	str.w	r3, [r0], #4
 800c0f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c0f4:	d2e8      	bcs.n	800c0c8 <quorem+0xb0>
 800c0f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0fe:	b922      	cbnz	r2, 800c10a <quorem+0xf2>
 800c100:	3b04      	subs	r3, #4
 800c102:	429d      	cmp	r5, r3
 800c104:	461a      	mov	r2, r3
 800c106:	d30a      	bcc.n	800c11e <quorem+0x106>
 800c108:	613c      	str	r4, [r7, #16]
 800c10a:	4630      	mov	r0, r6
 800c10c:	b003      	add	sp, #12
 800c10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c112:	6812      	ldr	r2, [r2, #0]
 800c114:	3b04      	subs	r3, #4
 800c116:	2a00      	cmp	r2, #0
 800c118:	d1cc      	bne.n	800c0b4 <quorem+0x9c>
 800c11a:	3c01      	subs	r4, #1
 800c11c:	e7c7      	b.n	800c0ae <quorem+0x96>
 800c11e:	6812      	ldr	r2, [r2, #0]
 800c120:	3b04      	subs	r3, #4
 800c122:	2a00      	cmp	r2, #0
 800c124:	d1f0      	bne.n	800c108 <quorem+0xf0>
 800c126:	3c01      	subs	r4, #1
 800c128:	e7eb      	b.n	800c102 <quorem+0xea>
 800c12a:	2000      	movs	r0, #0
 800c12c:	e7ee      	b.n	800c10c <quorem+0xf4>
	...

0800c130 <_dtoa_r>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	ed2d 8b02 	vpush	{d8}
 800c138:	ec57 6b10 	vmov	r6, r7, d0
 800c13c:	b095      	sub	sp, #84	; 0x54
 800c13e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c140:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c144:	9105      	str	r1, [sp, #20]
 800c146:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c14a:	4604      	mov	r4, r0
 800c14c:	9209      	str	r2, [sp, #36]	; 0x24
 800c14e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c150:	b975      	cbnz	r5, 800c170 <_dtoa_r+0x40>
 800c152:	2010      	movs	r0, #16
 800c154:	f001 f95e 	bl	800d414 <malloc>
 800c158:	4602      	mov	r2, r0
 800c15a:	6260      	str	r0, [r4, #36]	; 0x24
 800c15c:	b920      	cbnz	r0, 800c168 <_dtoa_r+0x38>
 800c15e:	4bb2      	ldr	r3, [pc, #712]	; (800c428 <_dtoa_r+0x2f8>)
 800c160:	21ea      	movs	r1, #234	; 0xea
 800c162:	48b2      	ldr	r0, [pc, #712]	; (800c42c <_dtoa_r+0x2fc>)
 800c164:	f7ff ff3a 	bl	800bfdc <__assert_func>
 800c168:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c16c:	6005      	str	r5, [r0, #0]
 800c16e:	60c5      	str	r5, [r0, #12]
 800c170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c172:	6819      	ldr	r1, [r3, #0]
 800c174:	b151      	cbz	r1, 800c18c <_dtoa_r+0x5c>
 800c176:	685a      	ldr	r2, [r3, #4]
 800c178:	604a      	str	r2, [r1, #4]
 800c17a:	2301      	movs	r3, #1
 800c17c:	4093      	lsls	r3, r2
 800c17e:	608b      	str	r3, [r1, #8]
 800c180:	4620      	mov	r0, r4
 800c182:	f001 f9a1 	bl	800d4c8 <_Bfree>
 800c186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c188:	2200      	movs	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]
 800c18c:	1e3b      	subs	r3, r7, #0
 800c18e:	bfb9      	ittee	lt
 800c190:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c194:	9303      	strlt	r3, [sp, #12]
 800c196:	2300      	movge	r3, #0
 800c198:	f8c8 3000 	strge.w	r3, [r8]
 800c19c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c1a0:	4ba3      	ldr	r3, [pc, #652]	; (800c430 <_dtoa_r+0x300>)
 800c1a2:	bfbc      	itt	lt
 800c1a4:	2201      	movlt	r2, #1
 800c1a6:	f8c8 2000 	strlt.w	r2, [r8]
 800c1aa:	ea33 0309 	bics.w	r3, r3, r9
 800c1ae:	d11b      	bne.n	800c1e8 <_dtoa_r+0xb8>
 800c1b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1bc:	4333      	orrs	r3, r6
 800c1be:	f000 857a 	beq.w	800ccb6 <_dtoa_r+0xb86>
 800c1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1c4:	b963      	cbnz	r3, 800c1e0 <_dtoa_r+0xb0>
 800c1c6:	4b9b      	ldr	r3, [pc, #620]	; (800c434 <_dtoa_r+0x304>)
 800c1c8:	e024      	b.n	800c214 <_dtoa_r+0xe4>
 800c1ca:	4b9b      	ldr	r3, [pc, #620]	; (800c438 <_dtoa_r+0x308>)
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	3308      	adds	r3, #8
 800c1d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	9800      	ldr	r0, [sp, #0]
 800c1d6:	b015      	add	sp, #84	; 0x54
 800c1d8:	ecbd 8b02 	vpop	{d8}
 800c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e0:	4b94      	ldr	r3, [pc, #592]	; (800c434 <_dtoa_r+0x304>)
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	3303      	adds	r3, #3
 800c1e6:	e7f3      	b.n	800c1d0 <_dtoa_r+0xa0>
 800c1e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	ec51 0b17 	vmov	r0, r1, d7
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c1f8:	f7f4 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1fc:	4680      	mov	r8, r0
 800c1fe:	b158      	cbz	r0, 800c218 <_dtoa_r+0xe8>
 800c200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c202:	2301      	movs	r3, #1
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 8551 	beq.w	800ccb0 <_dtoa_r+0xb80>
 800c20e:	488b      	ldr	r0, [pc, #556]	; (800c43c <_dtoa_r+0x30c>)
 800c210:	6018      	str	r0, [r3, #0]
 800c212:	1e43      	subs	r3, r0, #1
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	e7dd      	b.n	800c1d4 <_dtoa_r+0xa4>
 800c218:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c21c:	aa12      	add	r2, sp, #72	; 0x48
 800c21e:	a913      	add	r1, sp, #76	; 0x4c
 800c220:	4620      	mov	r0, r4
 800c222:	f001 fcf9 	bl	800dc18 <__d2b>
 800c226:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c22a:	4683      	mov	fp, r0
 800c22c:	2d00      	cmp	r5, #0
 800c22e:	d07c      	beq.n	800c32a <_dtoa_r+0x1fa>
 800c230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c232:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c23a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c23e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c242:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c24a:	4b7d      	ldr	r3, [pc, #500]	; (800c440 <_dtoa_r+0x310>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	4630      	mov	r0, r6
 800c250:	4639      	mov	r1, r7
 800c252:	f7f4 f819 	bl	8000288 <__aeabi_dsub>
 800c256:	a36e      	add	r3, pc, #440	; (adr r3, 800c410 <_dtoa_r+0x2e0>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	f7f4 f9cc 	bl	80005f8 <__aeabi_dmul>
 800c260:	a36d      	add	r3, pc, #436	; (adr r3, 800c418 <_dtoa_r+0x2e8>)
 800c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c266:	f7f4 f811 	bl	800028c <__adddf3>
 800c26a:	4606      	mov	r6, r0
 800c26c:	4628      	mov	r0, r5
 800c26e:	460f      	mov	r7, r1
 800c270:	f7f4 f958 	bl	8000524 <__aeabi_i2d>
 800c274:	a36a      	add	r3, pc, #424	; (adr r3, 800c420 <_dtoa_r+0x2f0>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f4 f9bd 	bl	80005f8 <__aeabi_dmul>
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	4630      	mov	r0, r6
 800c284:	4639      	mov	r1, r7
 800c286:	f7f4 f801 	bl	800028c <__adddf3>
 800c28a:	4606      	mov	r6, r0
 800c28c:	460f      	mov	r7, r1
 800c28e:	f7f4 fc63 	bl	8000b58 <__aeabi_d2iz>
 800c292:	2200      	movs	r2, #0
 800c294:	4682      	mov	sl, r0
 800c296:	2300      	movs	r3, #0
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f4 fc1e 	bl	8000adc <__aeabi_dcmplt>
 800c2a0:	b148      	cbz	r0, 800c2b6 <_dtoa_r+0x186>
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	f7f4 f93e 	bl	8000524 <__aeabi_i2d>
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	463b      	mov	r3, r7
 800c2ac:	f7f4 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2b0:	b908      	cbnz	r0, 800c2b6 <_dtoa_r+0x186>
 800c2b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2b6:	f1ba 0f16 	cmp.w	sl, #22
 800c2ba:	d854      	bhi.n	800c366 <_dtoa_r+0x236>
 800c2bc:	4b61      	ldr	r3, [pc, #388]	; (800c444 <_dtoa_r+0x314>)
 800c2be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2ca:	f7f4 fc07 	bl	8000adc <__aeabi_dcmplt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d04b      	beq.n	800c36a <_dtoa_r+0x23a>
 800c2d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	930e      	str	r3, [sp, #56]	; 0x38
 800c2da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2dc:	1b5d      	subs	r5, r3, r5
 800c2de:	1e6b      	subs	r3, r5, #1
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	bf43      	ittte	mi
 800c2e4:	2300      	movmi	r3, #0
 800c2e6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c2ea:	9304      	strmi	r3, [sp, #16]
 800c2ec:	f04f 0800 	movpl.w	r8, #0
 800c2f0:	f1ba 0f00 	cmp.w	sl, #0
 800c2f4:	db3b      	blt.n	800c36e <_dtoa_r+0x23e>
 800c2f6:	9b04      	ldr	r3, [sp, #16]
 800c2f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c2fc:	4453      	add	r3, sl
 800c2fe:	9304      	str	r3, [sp, #16]
 800c300:	2300      	movs	r3, #0
 800c302:	9306      	str	r3, [sp, #24]
 800c304:	9b05      	ldr	r3, [sp, #20]
 800c306:	2b09      	cmp	r3, #9
 800c308:	d869      	bhi.n	800c3de <_dtoa_r+0x2ae>
 800c30a:	2b05      	cmp	r3, #5
 800c30c:	bfc4      	itt	gt
 800c30e:	3b04      	subgt	r3, #4
 800c310:	9305      	strgt	r3, [sp, #20]
 800c312:	9b05      	ldr	r3, [sp, #20]
 800c314:	f1a3 0302 	sub.w	r3, r3, #2
 800c318:	bfcc      	ite	gt
 800c31a:	2500      	movgt	r5, #0
 800c31c:	2501      	movle	r5, #1
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d869      	bhi.n	800c3f6 <_dtoa_r+0x2c6>
 800c322:	e8df f003 	tbb	[pc, r3]
 800c326:	4e2c      	.short	0x4e2c
 800c328:	5a4c      	.short	0x5a4c
 800c32a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c32e:	441d      	add	r5, r3
 800c330:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c334:	2b20      	cmp	r3, #32
 800c336:	bfc1      	itttt	gt
 800c338:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c33c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c340:	fa09 f303 	lslgt.w	r3, r9, r3
 800c344:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c348:	bfda      	itte	le
 800c34a:	f1c3 0320 	rsble	r3, r3, #32
 800c34e:	fa06 f003 	lslle.w	r0, r6, r3
 800c352:	4318      	orrgt	r0, r3
 800c354:	f7f4 f8d6 	bl	8000504 <__aeabi_ui2d>
 800c358:	2301      	movs	r3, #1
 800c35a:	4606      	mov	r6, r0
 800c35c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c360:	3d01      	subs	r5, #1
 800c362:	9310      	str	r3, [sp, #64]	; 0x40
 800c364:	e771      	b.n	800c24a <_dtoa_r+0x11a>
 800c366:	2301      	movs	r3, #1
 800c368:	e7b6      	b.n	800c2d8 <_dtoa_r+0x1a8>
 800c36a:	900e      	str	r0, [sp, #56]	; 0x38
 800c36c:	e7b5      	b.n	800c2da <_dtoa_r+0x1aa>
 800c36e:	f1ca 0300 	rsb	r3, sl, #0
 800c372:	9306      	str	r3, [sp, #24]
 800c374:	2300      	movs	r3, #0
 800c376:	eba8 080a 	sub.w	r8, r8, sl
 800c37a:	930d      	str	r3, [sp, #52]	; 0x34
 800c37c:	e7c2      	b.n	800c304 <_dtoa_r+0x1d4>
 800c37e:	2300      	movs	r3, #0
 800c380:	9308      	str	r3, [sp, #32]
 800c382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c384:	2b00      	cmp	r3, #0
 800c386:	dc39      	bgt.n	800c3fc <_dtoa_r+0x2cc>
 800c388:	f04f 0901 	mov.w	r9, #1
 800c38c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c390:	464b      	mov	r3, r9
 800c392:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c396:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c398:	2200      	movs	r2, #0
 800c39a:	6042      	str	r2, [r0, #4]
 800c39c:	2204      	movs	r2, #4
 800c39e:	f102 0614 	add.w	r6, r2, #20
 800c3a2:	429e      	cmp	r6, r3
 800c3a4:	6841      	ldr	r1, [r0, #4]
 800c3a6:	d92f      	bls.n	800c408 <_dtoa_r+0x2d8>
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f001 f84d 	bl	800d448 <_Balloc>
 800c3ae:	9000      	str	r0, [sp, #0]
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d14b      	bne.n	800c44c <_dtoa_r+0x31c>
 800c3b4:	4b24      	ldr	r3, [pc, #144]	; (800c448 <_dtoa_r+0x318>)
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c3bc:	e6d1      	b.n	800c162 <_dtoa_r+0x32>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e7de      	b.n	800c380 <_dtoa_r+0x250>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9308      	str	r3, [sp, #32]
 800c3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c8:	eb0a 0903 	add.w	r9, sl, r3
 800c3cc:	f109 0301 	add.w	r3, r9, #1
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	bfb8      	it	lt
 800c3d6:	2301      	movlt	r3, #1
 800c3d8:	e7dd      	b.n	800c396 <_dtoa_r+0x266>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e7f2      	b.n	800c3c4 <_dtoa_r+0x294>
 800c3de:	2501      	movs	r5, #1
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	9305      	str	r3, [sp, #20]
 800c3e4:	9508      	str	r5, [sp, #32]
 800c3e6:	f04f 39ff 	mov.w	r9, #4294967295
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800c3f0:	2312      	movs	r3, #18
 800c3f2:	9209      	str	r2, [sp, #36]	; 0x24
 800c3f4:	e7cf      	b.n	800c396 <_dtoa_r+0x266>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	9308      	str	r3, [sp, #32]
 800c3fa:	e7f4      	b.n	800c3e6 <_dtoa_r+0x2b6>
 800c3fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c400:	f8cd 9004 	str.w	r9, [sp, #4]
 800c404:	464b      	mov	r3, r9
 800c406:	e7c6      	b.n	800c396 <_dtoa_r+0x266>
 800c408:	3101      	adds	r1, #1
 800c40a:	6041      	str	r1, [r0, #4]
 800c40c:	0052      	lsls	r2, r2, #1
 800c40e:	e7c6      	b.n	800c39e <_dtoa_r+0x26e>
 800c410:	636f4361 	.word	0x636f4361
 800c414:	3fd287a7 	.word	0x3fd287a7
 800c418:	8b60c8b3 	.word	0x8b60c8b3
 800c41c:	3fc68a28 	.word	0x3fc68a28
 800c420:	509f79fb 	.word	0x509f79fb
 800c424:	3fd34413 	.word	0x3fd34413
 800c428:	0800f1a0 	.word	0x0800f1a0
 800c42c:	0800f362 	.word	0x0800f362
 800c430:	7ff00000 	.word	0x7ff00000
 800c434:	0800f35e 	.word	0x0800f35e
 800c438:	0800f355 	.word	0x0800f355
 800c43c:	0800f125 	.word	0x0800f125
 800c440:	3ff80000 	.word	0x3ff80000
 800c444:	0800f4d8 	.word	0x0800f4d8
 800c448:	0800f3c1 	.word	0x0800f3c1
 800c44c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c44e:	9a00      	ldr	r2, [sp, #0]
 800c450:	601a      	str	r2, [r3, #0]
 800c452:	9b01      	ldr	r3, [sp, #4]
 800c454:	2b0e      	cmp	r3, #14
 800c456:	f200 80ad 	bhi.w	800c5b4 <_dtoa_r+0x484>
 800c45a:	2d00      	cmp	r5, #0
 800c45c:	f000 80aa 	beq.w	800c5b4 <_dtoa_r+0x484>
 800c460:	f1ba 0f00 	cmp.w	sl, #0
 800c464:	dd36      	ble.n	800c4d4 <_dtoa_r+0x3a4>
 800c466:	4ac3      	ldr	r2, [pc, #780]	; (800c774 <_dtoa_r+0x644>)
 800c468:	f00a 030f 	and.w	r3, sl, #15
 800c46c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c470:	ed93 7b00 	vldr	d7, [r3]
 800c474:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c478:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c47c:	eeb0 8a47 	vmov.f32	s16, s14
 800c480:	eef0 8a67 	vmov.f32	s17, s15
 800c484:	d016      	beq.n	800c4b4 <_dtoa_r+0x384>
 800c486:	4bbc      	ldr	r3, [pc, #752]	; (800c778 <_dtoa_r+0x648>)
 800c488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c48c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c490:	f7f4 f9dc 	bl	800084c <__aeabi_ddiv>
 800c494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c498:	f007 070f 	and.w	r7, r7, #15
 800c49c:	2503      	movs	r5, #3
 800c49e:	4eb6      	ldr	r6, [pc, #728]	; (800c778 <_dtoa_r+0x648>)
 800c4a0:	b957      	cbnz	r7, 800c4b8 <_dtoa_r+0x388>
 800c4a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4a6:	ec53 2b18 	vmov	r2, r3, d8
 800c4aa:	f7f4 f9cf 	bl	800084c <__aeabi_ddiv>
 800c4ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4b2:	e029      	b.n	800c508 <_dtoa_r+0x3d8>
 800c4b4:	2502      	movs	r5, #2
 800c4b6:	e7f2      	b.n	800c49e <_dtoa_r+0x36e>
 800c4b8:	07f9      	lsls	r1, r7, #31
 800c4ba:	d508      	bpl.n	800c4ce <_dtoa_r+0x39e>
 800c4bc:	ec51 0b18 	vmov	r0, r1, d8
 800c4c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c4c4:	f7f4 f898 	bl	80005f8 <__aeabi_dmul>
 800c4c8:	ec41 0b18 	vmov	d8, r0, r1
 800c4cc:	3501      	adds	r5, #1
 800c4ce:	107f      	asrs	r7, r7, #1
 800c4d0:	3608      	adds	r6, #8
 800c4d2:	e7e5      	b.n	800c4a0 <_dtoa_r+0x370>
 800c4d4:	f000 80a6 	beq.w	800c624 <_dtoa_r+0x4f4>
 800c4d8:	f1ca 0600 	rsb	r6, sl, #0
 800c4dc:	4ba5      	ldr	r3, [pc, #660]	; (800c774 <_dtoa_r+0x644>)
 800c4de:	4fa6      	ldr	r7, [pc, #664]	; (800c778 <_dtoa_r+0x648>)
 800c4e0:	f006 020f 	and.w	r2, r6, #15
 800c4e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4f0:	f7f4 f882 	bl	80005f8 <__aeabi_dmul>
 800c4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4f8:	1136      	asrs	r6, r6, #4
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2502      	movs	r5, #2
 800c4fe:	2e00      	cmp	r6, #0
 800c500:	f040 8085 	bne.w	800c60e <_dtoa_r+0x4de>
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1d2      	bne.n	800c4ae <_dtoa_r+0x37e>
 800c508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 808c 	beq.w	800c628 <_dtoa_r+0x4f8>
 800c510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c514:	4b99      	ldr	r3, [pc, #612]	; (800c77c <_dtoa_r+0x64c>)
 800c516:	2200      	movs	r2, #0
 800c518:	4630      	mov	r0, r6
 800c51a:	4639      	mov	r1, r7
 800c51c:	f7f4 fade 	bl	8000adc <__aeabi_dcmplt>
 800c520:	2800      	cmp	r0, #0
 800c522:	f000 8081 	beq.w	800c628 <_dtoa_r+0x4f8>
 800c526:	9b01      	ldr	r3, [sp, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d07d      	beq.n	800c628 <_dtoa_r+0x4f8>
 800c52c:	f1b9 0f00 	cmp.w	r9, #0
 800c530:	dd3c      	ble.n	800c5ac <_dtoa_r+0x47c>
 800c532:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c536:	9307      	str	r3, [sp, #28]
 800c538:	2200      	movs	r2, #0
 800c53a:	4b91      	ldr	r3, [pc, #580]	; (800c780 <_dtoa_r+0x650>)
 800c53c:	4630      	mov	r0, r6
 800c53e:	4639      	mov	r1, r7
 800c540:	f7f4 f85a 	bl	80005f8 <__aeabi_dmul>
 800c544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c548:	3501      	adds	r5, #1
 800c54a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c54e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c552:	4628      	mov	r0, r5
 800c554:	f7f3 ffe6 	bl	8000524 <__aeabi_i2d>
 800c558:	4632      	mov	r2, r6
 800c55a:	463b      	mov	r3, r7
 800c55c:	f7f4 f84c 	bl	80005f8 <__aeabi_dmul>
 800c560:	4b88      	ldr	r3, [pc, #544]	; (800c784 <_dtoa_r+0x654>)
 800c562:	2200      	movs	r2, #0
 800c564:	f7f3 fe92 	bl	800028c <__adddf3>
 800c568:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c56c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c570:	9303      	str	r3, [sp, #12]
 800c572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c574:	2b00      	cmp	r3, #0
 800c576:	d15c      	bne.n	800c632 <_dtoa_r+0x502>
 800c578:	4b83      	ldr	r3, [pc, #524]	; (800c788 <_dtoa_r+0x658>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	4630      	mov	r0, r6
 800c57e:	4639      	mov	r1, r7
 800c580:	f7f3 fe82 	bl	8000288 <__aeabi_dsub>
 800c584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c588:	4606      	mov	r6, r0
 800c58a:	460f      	mov	r7, r1
 800c58c:	f7f4 fac4 	bl	8000b18 <__aeabi_dcmpgt>
 800c590:	2800      	cmp	r0, #0
 800c592:	f040 8296 	bne.w	800cac2 <_dtoa_r+0x992>
 800c596:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c59a:	4630      	mov	r0, r6
 800c59c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	f7f4 fa9b 	bl	8000adc <__aeabi_dcmplt>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f040 8288 	bne.w	800cabc <_dtoa_r+0x98c>
 800c5ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c5b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f2c0 8158 	blt.w	800c86c <_dtoa_r+0x73c>
 800c5bc:	f1ba 0f0e 	cmp.w	sl, #14
 800c5c0:	f300 8154 	bgt.w	800c86c <_dtoa_r+0x73c>
 800c5c4:	4b6b      	ldr	r3, [pc, #428]	; (800c774 <_dtoa_r+0x644>)
 800c5c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c5ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f280 80e3 	bge.w	800c79c <_dtoa_r+0x66c>
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f300 80df 	bgt.w	800c79c <_dtoa_r+0x66c>
 800c5de:	f040 826d 	bne.w	800cabc <_dtoa_r+0x98c>
 800c5e2:	4b69      	ldr	r3, [pc, #420]	; (800c788 <_dtoa_r+0x658>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	4640      	mov	r0, r8
 800c5e8:	4649      	mov	r1, r9
 800c5ea:	f7f4 f805 	bl	80005f8 <__aeabi_dmul>
 800c5ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5f2:	f7f4 fa87 	bl	8000b04 <__aeabi_dcmpge>
 800c5f6:	9e01      	ldr	r6, [sp, #4]
 800c5f8:	4637      	mov	r7, r6
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	f040 8243 	bne.w	800ca86 <_dtoa_r+0x956>
 800c600:	9d00      	ldr	r5, [sp, #0]
 800c602:	2331      	movs	r3, #49	; 0x31
 800c604:	f805 3b01 	strb.w	r3, [r5], #1
 800c608:	f10a 0a01 	add.w	sl, sl, #1
 800c60c:	e23f      	b.n	800ca8e <_dtoa_r+0x95e>
 800c60e:	07f2      	lsls	r2, r6, #31
 800c610:	d505      	bpl.n	800c61e <_dtoa_r+0x4ee>
 800c612:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c616:	f7f3 ffef 	bl	80005f8 <__aeabi_dmul>
 800c61a:	3501      	adds	r5, #1
 800c61c:	2301      	movs	r3, #1
 800c61e:	1076      	asrs	r6, r6, #1
 800c620:	3708      	adds	r7, #8
 800c622:	e76c      	b.n	800c4fe <_dtoa_r+0x3ce>
 800c624:	2502      	movs	r5, #2
 800c626:	e76f      	b.n	800c508 <_dtoa_r+0x3d8>
 800c628:	9b01      	ldr	r3, [sp, #4]
 800c62a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c62e:	930c      	str	r3, [sp, #48]	; 0x30
 800c630:	e78d      	b.n	800c54e <_dtoa_r+0x41e>
 800c632:	9900      	ldr	r1, [sp, #0]
 800c634:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c638:	4b4e      	ldr	r3, [pc, #312]	; (800c774 <_dtoa_r+0x644>)
 800c63a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c63e:	4401      	add	r1, r0
 800c640:	9102      	str	r1, [sp, #8]
 800c642:	9908      	ldr	r1, [sp, #32]
 800c644:	eeb0 8a47 	vmov.f32	s16, s14
 800c648:	eef0 8a67 	vmov.f32	s17, s15
 800c64c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c650:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c654:	2900      	cmp	r1, #0
 800c656:	d045      	beq.n	800c6e4 <_dtoa_r+0x5b4>
 800c658:	494c      	ldr	r1, [pc, #304]	; (800c78c <_dtoa_r+0x65c>)
 800c65a:	2000      	movs	r0, #0
 800c65c:	f7f4 f8f6 	bl	800084c <__aeabi_ddiv>
 800c660:	ec53 2b18 	vmov	r2, r3, d8
 800c664:	f7f3 fe10 	bl	8000288 <__aeabi_dsub>
 800c668:	9d00      	ldr	r5, [sp, #0]
 800c66a:	ec41 0b18 	vmov	d8, r0, r1
 800c66e:	4639      	mov	r1, r7
 800c670:	4630      	mov	r0, r6
 800c672:	f7f4 fa71 	bl	8000b58 <__aeabi_d2iz>
 800c676:	900c      	str	r0, [sp, #48]	; 0x30
 800c678:	f7f3 ff54 	bl	8000524 <__aeabi_i2d>
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	4630      	mov	r0, r6
 800c682:	4639      	mov	r1, r7
 800c684:	f7f3 fe00 	bl	8000288 <__aeabi_dsub>
 800c688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c68a:	3330      	adds	r3, #48	; 0x30
 800c68c:	f805 3b01 	strb.w	r3, [r5], #1
 800c690:	ec53 2b18 	vmov	r2, r3, d8
 800c694:	4606      	mov	r6, r0
 800c696:	460f      	mov	r7, r1
 800c698:	f7f4 fa20 	bl	8000adc <__aeabi_dcmplt>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d165      	bne.n	800c76c <_dtoa_r+0x63c>
 800c6a0:	4632      	mov	r2, r6
 800c6a2:	463b      	mov	r3, r7
 800c6a4:	4935      	ldr	r1, [pc, #212]	; (800c77c <_dtoa_r+0x64c>)
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	f7f3 fdee 	bl	8000288 <__aeabi_dsub>
 800c6ac:	ec53 2b18 	vmov	r2, r3, d8
 800c6b0:	f7f4 fa14 	bl	8000adc <__aeabi_dcmplt>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	f040 80b9 	bne.w	800c82c <_dtoa_r+0x6fc>
 800c6ba:	9b02      	ldr	r3, [sp, #8]
 800c6bc:	429d      	cmp	r5, r3
 800c6be:	f43f af75 	beq.w	800c5ac <_dtoa_r+0x47c>
 800c6c2:	4b2f      	ldr	r3, [pc, #188]	; (800c780 <_dtoa_r+0x650>)
 800c6c4:	ec51 0b18 	vmov	r0, r1, d8
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f7f3 ff95 	bl	80005f8 <__aeabi_dmul>
 800c6ce:	4b2c      	ldr	r3, [pc, #176]	; (800c780 <_dtoa_r+0x650>)
 800c6d0:	ec41 0b18 	vmov	d8, r0, r1
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	4639      	mov	r1, r7
 800c6da:	f7f3 ff8d 	bl	80005f8 <__aeabi_dmul>
 800c6de:	4606      	mov	r6, r0
 800c6e0:	460f      	mov	r7, r1
 800c6e2:	e7c4      	b.n	800c66e <_dtoa_r+0x53e>
 800c6e4:	ec51 0b17 	vmov	r0, r1, d7
 800c6e8:	f7f3 ff86 	bl	80005f8 <__aeabi_dmul>
 800c6ec:	9b02      	ldr	r3, [sp, #8]
 800c6ee:	9d00      	ldr	r5, [sp, #0]
 800c6f0:	930c      	str	r3, [sp, #48]	; 0x30
 800c6f2:	ec41 0b18 	vmov	d8, r0, r1
 800c6f6:	4639      	mov	r1, r7
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f7f4 fa2d 	bl	8000b58 <__aeabi_d2iz>
 800c6fe:	9011      	str	r0, [sp, #68]	; 0x44
 800c700:	f7f3 ff10 	bl	8000524 <__aeabi_i2d>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4630      	mov	r0, r6
 800c70a:	4639      	mov	r1, r7
 800c70c:	f7f3 fdbc 	bl	8000288 <__aeabi_dsub>
 800c710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c712:	3330      	adds	r3, #48	; 0x30
 800c714:	f805 3b01 	strb.w	r3, [r5], #1
 800c718:	9b02      	ldr	r3, [sp, #8]
 800c71a:	429d      	cmp	r5, r3
 800c71c:	4606      	mov	r6, r0
 800c71e:	460f      	mov	r7, r1
 800c720:	f04f 0200 	mov.w	r2, #0
 800c724:	d134      	bne.n	800c790 <_dtoa_r+0x660>
 800c726:	4b19      	ldr	r3, [pc, #100]	; (800c78c <_dtoa_r+0x65c>)
 800c728:	ec51 0b18 	vmov	r0, r1, d8
 800c72c:	f7f3 fdae 	bl	800028c <__adddf3>
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	4630      	mov	r0, r6
 800c736:	4639      	mov	r1, r7
 800c738:	f7f4 f9ee 	bl	8000b18 <__aeabi_dcmpgt>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d175      	bne.n	800c82c <_dtoa_r+0x6fc>
 800c740:	ec53 2b18 	vmov	r2, r3, d8
 800c744:	4911      	ldr	r1, [pc, #68]	; (800c78c <_dtoa_r+0x65c>)
 800c746:	2000      	movs	r0, #0
 800c748:	f7f3 fd9e 	bl	8000288 <__aeabi_dsub>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4630      	mov	r0, r6
 800c752:	4639      	mov	r1, r7
 800c754:	f7f4 f9c2 	bl	8000adc <__aeabi_dcmplt>
 800c758:	2800      	cmp	r0, #0
 800c75a:	f43f af27 	beq.w	800c5ac <_dtoa_r+0x47c>
 800c75e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c760:	1e6b      	subs	r3, r5, #1
 800c762:	930c      	str	r3, [sp, #48]	; 0x30
 800c764:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c768:	2b30      	cmp	r3, #48	; 0x30
 800c76a:	d0f8      	beq.n	800c75e <_dtoa_r+0x62e>
 800c76c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c770:	e04a      	b.n	800c808 <_dtoa_r+0x6d8>
 800c772:	bf00      	nop
 800c774:	0800f4d8 	.word	0x0800f4d8
 800c778:	0800f4b0 	.word	0x0800f4b0
 800c77c:	3ff00000 	.word	0x3ff00000
 800c780:	40240000 	.word	0x40240000
 800c784:	401c0000 	.word	0x401c0000
 800c788:	40140000 	.word	0x40140000
 800c78c:	3fe00000 	.word	0x3fe00000
 800c790:	4baf      	ldr	r3, [pc, #700]	; (800ca50 <_dtoa_r+0x920>)
 800c792:	f7f3 ff31 	bl	80005f8 <__aeabi_dmul>
 800c796:	4606      	mov	r6, r0
 800c798:	460f      	mov	r7, r1
 800c79a:	e7ac      	b.n	800c6f6 <_dtoa_r+0x5c6>
 800c79c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c7a0:	9d00      	ldr	r5, [sp, #0]
 800c7a2:	4642      	mov	r2, r8
 800c7a4:	464b      	mov	r3, r9
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f4 f84f 	bl	800084c <__aeabi_ddiv>
 800c7ae:	f7f4 f9d3 	bl	8000b58 <__aeabi_d2iz>
 800c7b2:	9002      	str	r0, [sp, #8]
 800c7b4:	f7f3 feb6 	bl	8000524 <__aeabi_i2d>
 800c7b8:	4642      	mov	r2, r8
 800c7ba:	464b      	mov	r3, r9
 800c7bc:	f7f3 ff1c 	bl	80005f8 <__aeabi_dmul>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	4639      	mov	r1, r7
 800c7c8:	f7f3 fd5e 	bl	8000288 <__aeabi_dsub>
 800c7cc:	9e02      	ldr	r6, [sp, #8]
 800c7ce:	9f01      	ldr	r7, [sp, #4]
 800c7d0:	3630      	adds	r6, #48	; 0x30
 800c7d2:	f805 6b01 	strb.w	r6, [r5], #1
 800c7d6:	9e00      	ldr	r6, [sp, #0]
 800c7d8:	1bae      	subs	r6, r5, r6
 800c7da:	42b7      	cmp	r7, r6
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	d137      	bne.n	800c852 <_dtoa_r+0x722>
 800c7e2:	f7f3 fd53 	bl	800028c <__adddf3>
 800c7e6:	4642      	mov	r2, r8
 800c7e8:	464b      	mov	r3, r9
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	460f      	mov	r7, r1
 800c7ee:	f7f4 f993 	bl	8000b18 <__aeabi_dcmpgt>
 800c7f2:	b9c8      	cbnz	r0, 800c828 <_dtoa_r+0x6f8>
 800c7f4:	4642      	mov	r2, r8
 800c7f6:	464b      	mov	r3, r9
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f4 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 800c800:	b110      	cbz	r0, 800c808 <_dtoa_r+0x6d8>
 800c802:	9b02      	ldr	r3, [sp, #8]
 800c804:	07d9      	lsls	r1, r3, #31
 800c806:	d40f      	bmi.n	800c828 <_dtoa_r+0x6f8>
 800c808:	4620      	mov	r0, r4
 800c80a:	4659      	mov	r1, fp
 800c80c:	f000 fe5c 	bl	800d4c8 <_Bfree>
 800c810:	2300      	movs	r3, #0
 800c812:	702b      	strb	r3, [r5, #0]
 800c814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c816:	f10a 0001 	add.w	r0, sl, #1
 800c81a:	6018      	str	r0, [r3, #0]
 800c81c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f43f acd8 	beq.w	800c1d4 <_dtoa_r+0xa4>
 800c824:	601d      	str	r5, [r3, #0]
 800c826:	e4d5      	b.n	800c1d4 <_dtoa_r+0xa4>
 800c828:	f8cd a01c 	str.w	sl, [sp, #28]
 800c82c:	462b      	mov	r3, r5
 800c82e:	461d      	mov	r5, r3
 800c830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c834:	2a39      	cmp	r2, #57	; 0x39
 800c836:	d108      	bne.n	800c84a <_dtoa_r+0x71a>
 800c838:	9a00      	ldr	r2, [sp, #0]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d1f7      	bne.n	800c82e <_dtoa_r+0x6fe>
 800c83e:	9a07      	ldr	r2, [sp, #28]
 800c840:	9900      	ldr	r1, [sp, #0]
 800c842:	3201      	adds	r2, #1
 800c844:	9207      	str	r2, [sp, #28]
 800c846:	2230      	movs	r2, #48	; 0x30
 800c848:	700a      	strb	r2, [r1, #0]
 800c84a:	781a      	ldrb	r2, [r3, #0]
 800c84c:	3201      	adds	r2, #1
 800c84e:	701a      	strb	r2, [r3, #0]
 800c850:	e78c      	b.n	800c76c <_dtoa_r+0x63c>
 800c852:	4b7f      	ldr	r3, [pc, #508]	; (800ca50 <_dtoa_r+0x920>)
 800c854:	2200      	movs	r2, #0
 800c856:	f7f3 fecf 	bl	80005f8 <__aeabi_dmul>
 800c85a:	2200      	movs	r2, #0
 800c85c:	2300      	movs	r3, #0
 800c85e:	4606      	mov	r6, r0
 800c860:	460f      	mov	r7, r1
 800c862:	f7f4 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 800c866:	2800      	cmp	r0, #0
 800c868:	d09b      	beq.n	800c7a2 <_dtoa_r+0x672>
 800c86a:	e7cd      	b.n	800c808 <_dtoa_r+0x6d8>
 800c86c:	9a08      	ldr	r2, [sp, #32]
 800c86e:	2a00      	cmp	r2, #0
 800c870:	f000 80c4 	beq.w	800c9fc <_dtoa_r+0x8cc>
 800c874:	9a05      	ldr	r2, [sp, #20]
 800c876:	2a01      	cmp	r2, #1
 800c878:	f300 80a8 	bgt.w	800c9cc <_dtoa_r+0x89c>
 800c87c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c87e:	2a00      	cmp	r2, #0
 800c880:	f000 80a0 	beq.w	800c9c4 <_dtoa_r+0x894>
 800c884:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c888:	9e06      	ldr	r6, [sp, #24]
 800c88a:	4645      	mov	r5, r8
 800c88c:	9a04      	ldr	r2, [sp, #16]
 800c88e:	2101      	movs	r1, #1
 800c890:	441a      	add	r2, r3
 800c892:	4620      	mov	r0, r4
 800c894:	4498      	add	r8, r3
 800c896:	9204      	str	r2, [sp, #16]
 800c898:	f000 ff1c 	bl	800d6d4 <__i2b>
 800c89c:	4607      	mov	r7, r0
 800c89e:	2d00      	cmp	r5, #0
 800c8a0:	dd0b      	ble.n	800c8ba <_dtoa_r+0x78a>
 800c8a2:	9b04      	ldr	r3, [sp, #16]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	dd08      	ble.n	800c8ba <_dtoa_r+0x78a>
 800c8a8:	42ab      	cmp	r3, r5
 800c8aa:	9a04      	ldr	r2, [sp, #16]
 800c8ac:	bfa8      	it	ge
 800c8ae:	462b      	movge	r3, r5
 800c8b0:	eba8 0803 	sub.w	r8, r8, r3
 800c8b4:	1aed      	subs	r5, r5, r3
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	9304      	str	r3, [sp, #16]
 800c8ba:	9b06      	ldr	r3, [sp, #24]
 800c8bc:	b1fb      	cbz	r3, 800c8fe <_dtoa_r+0x7ce>
 800c8be:	9b08      	ldr	r3, [sp, #32]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 809f 	beq.w	800ca04 <_dtoa_r+0x8d4>
 800c8c6:	2e00      	cmp	r6, #0
 800c8c8:	dd11      	ble.n	800c8ee <_dtoa_r+0x7be>
 800c8ca:	4639      	mov	r1, r7
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f000 ffbc 	bl	800d84c <__pow5mult>
 800c8d4:	465a      	mov	r2, fp
 800c8d6:	4601      	mov	r1, r0
 800c8d8:	4607      	mov	r7, r0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f000 ff10 	bl	800d700 <__multiply>
 800c8e0:	4659      	mov	r1, fp
 800c8e2:	9007      	str	r0, [sp, #28]
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f000 fdef 	bl	800d4c8 <_Bfree>
 800c8ea:	9b07      	ldr	r3, [sp, #28]
 800c8ec:	469b      	mov	fp, r3
 800c8ee:	9b06      	ldr	r3, [sp, #24]
 800c8f0:	1b9a      	subs	r2, r3, r6
 800c8f2:	d004      	beq.n	800c8fe <_dtoa_r+0x7ce>
 800c8f4:	4659      	mov	r1, fp
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 ffa8 	bl	800d84c <__pow5mult>
 800c8fc:	4683      	mov	fp, r0
 800c8fe:	2101      	movs	r1, #1
 800c900:	4620      	mov	r0, r4
 800c902:	f000 fee7 	bl	800d6d4 <__i2b>
 800c906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c908:	2b00      	cmp	r3, #0
 800c90a:	4606      	mov	r6, r0
 800c90c:	dd7c      	ble.n	800ca08 <_dtoa_r+0x8d8>
 800c90e:	461a      	mov	r2, r3
 800c910:	4601      	mov	r1, r0
 800c912:	4620      	mov	r0, r4
 800c914:	f000 ff9a 	bl	800d84c <__pow5mult>
 800c918:	9b05      	ldr	r3, [sp, #20]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	4606      	mov	r6, r0
 800c91e:	dd76      	ble.n	800ca0e <_dtoa_r+0x8de>
 800c920:	2300      	movs	r3, #0
 800c922:	9306      	str	r3, [sp, #24]
 800c924:	6933      	ldr	r3, [r6, #16]
 800c926:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c92a:	6918      	ldr	r0, [r3, #16]
 800c92c:	f000 fe82 	bl	800d634 <__hi0bits>
 800c930:	f1c0 0020 	rsb	r0, r0, #32
 800c934:	9b04      	ldr	r3, [sp, #16]
 800c936:	4418      	add	r0, r3
 800c938:	f010 001f 	ands.w	r0, r0, #31
 800c93c:	f000 8086 	beq.w	800ca4c <_dtoa_r+0x91c>
 800c940:	f1c0 0320 	rsb	r3, r0, #32
 800c944:	2b04      	cmp	r3, #4
 800c946:	dd7f      	ble.n	800ca48 <_dtoa_r+0x918>
 800c948:	f1c0 001c 	rsb	r0, r0, #28
 800c94c:	9b04      	ldr	r3, [sp, #16]
 800c94e:	4403      	add	r3, r0
 800c950:	4480      	add	r8, r0
 800c952:	4405      	add	r5, r0
 800c954:	9304      	str	r3, [sp, #16]
 800c956:	f1b8 0f00 	cmp.w	r8, #0
 800c95a:	dd05      	ble.n	800c968 <_dtoa_r+0x838>
 800c95c:	4659      	mov	r1, fp
 800c95e:	4642      	mov	r2, r8
 800c960:	4620      	mov	r0, r4
 800c962:	f000 ffcd 	bl	800d900 <__lshift>
 800c966:	4683      	mov	fp, r0
 800c968:	9b04      	ldr	r3, [sp, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dd05      	ble.n	800c97a <_dtoa_r+0x84a>
 800c96e:	4631      	mov	r1, r6
 800c970:	461a      	mov	r2, r3
 800c972:	4620      	mov	r0, r4
 800c974:	f000 ffc4 	bl	800d900 <__lshift>
 800c978:	4606      	mov	r6, r0
 800c97a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d069      	beq.n	800ca54 <_dtoa_r+0x924>
 800c980:	4631      	mov	r1, r6
 800c982:	4658      	mov	r0, fp
 800c984:	f001 f828 	bl	800d9d8 <__mcmp>
 800c988:	2800      	cmp	r0, #0
 800c98a:	da63      	bge.n	800ca54 <_dtoa_r+0x924>
 800c98c:	2300      	movs	r3, #0
 800c98e:	4659      	mov	r1, fp
 800c990:	220a      	movs	r2, #10
 800c992:	4620      	mov	r0, r4
 800c994:	f000 fdba 	bl	800d50c <__multadd>
 800c998:	9b08      	ldr	r3, [sp, #32]
 800c99a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c99e:	4683      	mov	fp, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f000 818f 	beq.w	800ccc4 <_dtoa_r+0xb94>
 800c9a6:	4639      	mov	r1, r7
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	220a      	movs	r2, #10
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 fdad 	bl	800d50c <__multadd>
 800c9b2:	f1b9 0f00 	cmp.w	r9, #0
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	f300 808e 	bgt.w	800cad8 <_dtoa_r+0x9a8>
 800c9bc:	9b05      	ldr	r3, [sp, #20]
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	dc50      	bgt.n	800ca64 <_dtoa_r+0x934>
 800c9c2:	e089      	b.n	800cad8 <_dtoa_r+0x9a8>
 800c9c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9ca:	e75d      	b.n	800c888 <_dtoa_r+0x758>
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	1e5e      	subs	r6, r3, #1
 800c9d0:	9b06      	ldr	r3, [sp, #24]
 800c9d2:	42b3      	cmp	r3, r6
 800c9d4:	bfbf      	itttt	lt
 800c9d6:	9b06      	ldrlt	r3, [sp, #24]
 800c9d8:	9606      	strlt	r6, [sp, #24]
 800c9da:	1af2      	sublt	r2, r6, r3
 800c9dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c9de:	bfb6      	itet	lt
 800c9e0:	189b      	addlt	r3, r3, r2
 800c9e2:	1b9e      	subge	r6, r3, r6
 800c9e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	bfb8      	it	lt
 800c9ea:	2600      	movlt	r6, #0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	bfb5      	itete	lt
 800c9f0:	eba8 0503 	sublt.w	r5, r8, r3
 800c9f4:	9b01      	ldrge	r3, [sp, #4]
 800c9f6:	2300      	movlt	r3, #0
 800c9f8:	4645      	movge	r5, r8
 800c9fa:	e747      	b.n	800c88c <_dtoa_r+0x75c>
 800c9fc:	9e06      	ldr	r6, [sp, #24]
 800c9fe:	9f08      	ldr	r7, [sp, #32]
 800ca00:	4645      	mov	r5, r8
 800ca02:	e74c      	b.n	800c89e <_dtoa_r+0x76e>
 800ca04:	9a06      	ldr	r2, [sp, #24]
 800ca06:	e775      	b.n	800c8f4 <_dtoa_r+0x7c4>
 800ca08:	9b05      	ldr	r3, [sp, #20]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	dc18      	bgt.n	800ca40 <_dtoa_r+0x910>
 800ca0e:	9b02      	ldr	r3, [sp, #8]
 800ca10:	b9b3      	cbnz	r3, 800ca40 <_dtoa_r+0x910>
 800ca12:	9b03      	ldr	r3, [sp, #12]
 800ca14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca18:	b9a3      	cbnz	r3, 800ca44 <_dtoa_r+0x914>
 800ca1a:	9b03      	ldr	r3, [sp, #12]
 800ca1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca20:	0d1b      	lsrs	r3, r3, #20
 800ca22:	051b      	lsls	r3, r3, #20
 800ca24:	b12b      	cbz	r3, 800ca32 <_dtoa_r+0x902>
 800ca26:	9b04      	ldr	r3, [sp, #16]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	9304      	str	r3, [sp, #16]
 800ca2c:	f108 0801 	add.w	r8, r8, #1
 800ca30:	2301      	movs	r3, #1
 800ca32:	9306      	str	r3, [sp, #24]
 800ca34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f47f af74 	bne.w	800c924 <_dtoa_r+0x7f4>
 800ca3c:	2001      	movs	r0, #1
 800ca3e:	e779      	b.n	800c934 <_dtoa_r+0x804>
 800ca40:	2300      	movs	r3, #0
 800ca42:	e7f6      	b.n	800ca32 <_dtoa_r+0x902>
 800ca44:	9b02      	ldr	r3, [sp, #8]
 800ca46:	e7f4      	b.n	800ca32 <_dtoa_r+0x902>
 800ca48:	d085      	beq.n	800c956 <_dtoa_r+0x826>
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	301c      	adds	r0, #28
 800ca4e:	e77d      	b.n	800c94c <_dtoa_r+0x81c>
 800ca50:	40240000 	.word	0x40240000
 800ca54:	9b01      	ldr	r3, [sp, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	dc38      	bgt.n	800cacc <_dtoa_r+0x99c>
 800ca5a:	9b05      	ldr	r3, [sp, #20]
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	dd35      	ble.n	800cacc <_dtoa_r+0x99c>
 800ca60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ca64:	f1b9 0f00 	cmp.w	r9, #0
 800ca68:	d10d      	bne.n	800ca86 <_dtoa_r+0x956>
 800ca6a:	4631      	mov	r1, r6
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	2205      	movs	r2, #5
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fd4b 	bl	800d50c <__multadd>
 800ca76:	4601      	mov	r1, r0
 800ca78:	4606      	mov	r6, r0
 800ca7a:	4658      	mov	r0, fp
 800ca7c:	f000 ffac 	bl	800d9d8 <__mcmp>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	f73f adbd 	bgt.w	800c600 <_dtoa_r+0x4d0>
 800ca86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca88:	9d00      	ldr	r5, [sp, #0]
 800ca8a:	ea6f 0a03 	mvn.w	sl, r3
 800ca8e:	f04f 0800 	mov.w	r8, #0
 800ca92:	4631      	mov	r1, r6
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fd17 	bl	800d4c8 <_Bfree>
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	f43f aeb4 	beq.w	800c808 <_dtoa_r+0x6d8>
 800caa0:	f1b8 0f00 	cmp.w	r8, #0
 800caa4:	d005      	beq.n	800cab2 <_dtoa_r+0x982>
 800caa6:	45b8      	cmp	r8, r7
 800caa8:	d003      	beq.n	800cab2 <_dtoa_r+0x982>
 800caaa:	4641      	mov	r1, r8
 800caac:	4620      	mov	r0, r4
 800caae:	f000 fd0b 	bl	800d4c8 <_Bfree>
 800cab2:	4639      	mov	r1, r7
 800cab4:	4620      	mov	r0, r4
 800cab6:	f000 fd07 	bl	800d4c8 <_Bfree>
 800caba:	e6a5      	b.n	800c808 <_dtoa_r+0x6d8>
 800cabc:	2600      	movs	r6, #0
 800cabe:	4637      	mov	r7, r6
 800cac0:	e7e1      	b.n	800ca86 <_dtoa_r+0x956>
 800cac2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cac4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cac8:	4637      	mov	r7, r6
 800caca:	e599      	b.n	800c600 <_dtoa_r+0x4d0>
 800cacc:	9b08      	ldr	r3, [sp, #32]
 800cace:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 80fd 	beq.w	800ccd2 <_dtoa_r+0xba2>
 800cad8:	2d00      	cmp	r5, #0
 800cada:	dd05      	ble.n	800cae8 <_dtoa_r+0x9b8>
 800cadc:	4639      	mov	r1, r7
 800cade:	462a      	mov	r2, r5
 800cae0:	4620      	mov	r0, r4
 800cae2:	f000 ff0d 	bl	800d900 <__lshift>
 800cae6:	4607      	mov	r7, r0
 800cae8:	9b06      	ldr	r3, [sp, #24]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d05c      	beq.n	800cba8 <_dtoa_r+0xa78>
 800caee:	6879      	ldr	r1, [r7, #4]
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 fca9 	bl	800d448 <_Balloc>
 800caf6:	4605      	mov	r5, r0
 800caf8:	b928      	cbnz	r0, 800cb06 <_dtoa_r+0x9d6>
 800cafa:	4b80      	ldr	r3, [pc, #512]	; (800ccfc <_dtoa_r+0xbcc>)
 800cafc:	4602      	mov	r2, r0
 800cafe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cb02:	f7ff bb2e 	b.w	800c162 <_dtoa_r+0x32>
 800cb06:	693a      	ldr	r2, [r7, #16]
 800cb08:	3202      	adds	r2, #2
 800cb0a:	0092      	lsls	r2, r2, #2
 800cb0c:	f107 010c 	add.w	r1, r7, #12
 800cb10:	300c      	adds	r0, #12
 800cb12:	f7fd fc45 	bl	800a3a0 <memcpy>
 800cb16:	2201      	movs	r2, #1
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f000 fef0 	bl	800d900 <__lshift>
 800cb20:	9b00      	ldr	r3, [sp, #0]
 800cb22:	3301      	adds	r3, #1
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	9b00      	ldr	r3, [sp, #0]
 800cb28:	444b      	add	r3, r9
 800cb2a:	9307      	str	r3, [sp, #28]
 800cb2c:	9b02      	ldr	r3, [sp, #8]
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	46b8      	mov	r8, r7
 800cb34:	9306      	str	r3, [sp, #24]
 800cb36:	4607      	mov	r7, r0
 800cb38:	9b01      	ldr	r3, [sp, #4]
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	4658      	mov	r0, fp
 800cb40:	9302      	str	r3, [sp, #8]
 800cb42:	f7ff fa69 	bl	800c018 <quorem>
 800cb46:	4603      	mov	r3, r0
 800cb48:	3330      	adds	r3, #48	; 0x30
 800cb4a:	9004      	str	r0, [sp, #16]
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	4658      	mov	r0, fp
 800cb50:	9308      	str	r3, [sp, #32]
 800cb52:	f000 ff41 	bl	800d9d8 <__mcmp>
 800cb56:	463a      	mov	r2, r7
 800cb58:	4681      	mov	r9, r0
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f000 ff57 	bl	800da10 <__mdiff>
 800cb62:	68c2      	ldr	r2, [r0, #12]
 800cb64:	9b08      	ldr	r3, [sp, #32]
 800cb66:	4605      	mov	r5, r0
 800cb68:	bb02      	cbnz	r2, 800cbac <_dtoa_r+0xa7c>
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	4658      	mov	r0, fp
 800cb6e:	f000 ff33 	bl	800d9d8 <__mcmp>
 800cb72:	9b08      	ldr	r3, [sp, #32]
 800cb74:	4602      	mov	r2, r0
 800cb76:	4629      	mov	r1, r5
 800cb78:	4620      	mov	r0, r4
 800cb7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cb7e:	f000 fca3 	bl	800d4c8 <_Bfree>
 800cb82:	9b05      	ldr	r3, [sp, #20]
 800cb84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb86:	9d01      	ldr	r5, [sp, #4]
 800cb88:	ea43 0102 	orr.w	r1, r3, r2
 800cb8c:	9b06      	ldr	r3, [sp, #24]
 800cb8e:	430b      	orrs	r3, r1
 800cb90:	9b08      	ldr	r3, [sp, #32]
 800cb92:	d10d      	bne.n	800cbb0 <_dtoa_r+0xa80>
 800cb94:	2b39      	cmp	r3, #57	; 0x39
 800cb96:	d029      	beq.n	800cbec <_dtoa_r+0xabc>
 800cb98:	f1b9 0f00 	cmp.w	r9, #0
 800cb9c:	dd01      	ble.n	800cba2 <_dtoa_r+0xa72>
 800cb9e:	9b04      	ldr	r3, [sp, #16]
 800cba0:	3331      	adds	r3, #49	; 0x31
 800cba2:	9a02      	ldr	r2, [sp, #8]
 800cba4:	7013      	strb	r3, [r2, #0]
 800cba6:	e774      	b.n	800ca92 <_dtoa_r+0x962>
 800cba8:	4638      	mov	r0, r7
 800cbaa:	e7b9      	b.n	800cb20 <_dtoa_r+0x9f0>
 800cbac:	2201      	movs	r2, #1
 800cbae:	e7e2      	b.n	800cb76 <_dtoa_r+0xa46>
 800cbb0:	f1b9 0f00 	cmp.w	r9, #0
 800cbb4:	db06      	blt.n	800cbc4 <_dtoa_r+0xa94>
 800cbb6:	9905      	ldr	r1, [sp, #20]
 800cbb8:	ea41 0909 	orr.w	r9, r1, r9
 800cbbc:	9906      	ldr	r1, [sp, #24]
 800cbbe:	ea59 0101 	orrs.w	r1, r9, r1
 800cbc2:	d120      	bne.n	800cc06 <_dtoa_r+0xad6>
 800cbc4:	2a00      	cmp	r2, #0
 800cbc6:	ddec      	ble.n	800cba2 <_dtoa_r+0xa72>
 800cbc8:	4659      	mov	r1, fp
 800cbca:	2201      	movs	r2, #1
 800cbcc:	4620      	mov	r0, r4
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	f000 fe96 	bl	800d900 <__lshift>
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4683      	mov	fp, r0
 800cbd8:	f000 fefe 	bl	800d9d8 <__mcmp>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	dc02      	bgt.n	800cbe8 <_dtoa_r+0xab8>
 800cbe2:	d1de      	bne.n	800cba2 <_dtoa_r+0xa72>
 800cbe4:	07da      	lsls	r2, r3, #31
 800cbe6:	d5dc      	bpl.n	800cba2 <_dtoa_r+0xa72>
 800cbe8:	2b39      	cmp	r3, #57	; 0x39
 800cbea:	d1d8      	bne.n	800cb9e <_dtoa_r+0xa6e>
 800cbec:	9a02      	ldr	r2, [sp, #8]
 800cbee:	2339      	movs	r3, #57	; 0x39
 800cbf0:	7013      	strb	r3, [r2, #0]
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	461d      	mov	r5, r3
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbfc:	2a39      	cmp	r2, #57	; 0x39
 800cbfe:	d050      	beq.n	800cca2 <_dtoa_r+0xb72>
 800cc00:	3201      	adds	r2, #1
 800cc02:	701a      	strb	r2, [r3, #0]
 800cc04:	e745      	b.n	800ca92 <_dtoa_r+0x962>
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	dd03      	ble.n	800cc12 <_dtoa_r+0xae2>
 800cc0a:	2b39      	cmp	r3, #57	; 0x39
 800cc0c:	d0ee      	beq.n	800cbec <_dtoa_r+0xabc>
 800cc0e:	3301      	adds	r3, #1
 800cc10:	e7c7      	b.n	800cba2 <_dtoa_r+0xa72>
 800cc12:	9a01      	ldr	r2, [sp, #4]
 800cc14:	9907      	ldr	r1, [sp, #28]
 800cc16:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cc1a:	428a      	cmp	r2, r1
 800cc1c:	d02a      	beq.n	800cc74 <_dtoa_r+0xb44>
 800cc1e:	4659      	mov	r1, fp
 800cc20:	2300      	movs	r3, #0
 800cc22:	220a      	movs	r2, #10
 800cc24:	4620      	mov	r0, r4
 800cc26:	f000 fc71 	bl	800d50c <__multadd>
 800cc2a:	45b8      	cmp	r8, r7
 800cc2c:	4683      	mov	fp, r0
 800cc2e:	f04f 0300 	mov.w	r3, #0
 800cc32:	f04f 020a 	mov.w	r2, #10
 800cc36:	4641      	mov	r1, r8
 800cc38:	4620      	mov	r0, r4
 800cc3a:	d107      	bne.n	800cc4c <_dtoa_r+0xb1c>
 800cc3c:	f000 fc66 	bl	800d50c <__multadd>
 800cc40:	4680      	mov	r8, r0
 800cc42:	4607      	mov	r7, r0
 800cc44:	9b01      	ldr	r3, [sp, #4]
 800cc46:	3301      	adds	r3, #1
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	e775      	b.n	800cb38 <_dtoa_r+0xa08>
 800cc4c:	f000 fc5e 	bl	800d50c <__multadd>
 800cc50:	4639      	mov	r1, r7
 800cc52:	4680      	mov	r8, r0
 800cc54:	2300      	movs	r3, #0
 800cc56:	220a      	movs	r2, #10
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f000 fc57 	bl	800d50c <__multadd>
 800cc5e:	4607      	mov	r7, r0
 800cc60:	e7f0      	b.n	800cc44 <_dtoa_r+0xb14>
 800cc62:	f1b9 0f00 	cmp.w	r9, #0
 800cc66:	9a00      	ldr	r2, [sp, #0]
 800cc68:	bfcc      	ite	gt
 800cc6a:	464d      	movgt	r5, r9
 800cc6c:	2501      	movle	r5, #1
 800cc6e:	4415      	add	r5, r2
 800cc70:	f04f 0800 	mov.w	r8, #0
 800cc74:	4659      	mov	r1, fp
 800cc76:	2201      	movs	r2, #1
 800cc78:	4620      	mov	r0, r4
 800cc7a:	9301      	str	r3, [sp, #4]
 800cc7c:	f000 fe40 	bl	800d900 <__lshift>
 800cc80:	4631      	mov	r1, r6
 800cc82:	4683      	mov	fp, r0
 800cc84:	f000 fea8 	bl	800d9d8 <__mcmp>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	dcb2      	bgt.n	800cbf2 <_dtoa_r+0xac2>
 800cc8c:	d102      	bne.n	800cc94 <_dtoa_r+0xb64>
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	07db      	lsls	r3, r3, #31
 800cc92:	d4ae      	bmi.n	800cbf2 <_dtoa_r+0xac2>
 800cc94:	462b      	mov	r3, r5
 800cc96:	461d      	mov	r5, r3
 800cc98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc9c:	2a30      	cmp	r2, #48	; 0x30
 800cc9e:	d0fa      	beq.n	800cc96 <_dtoa_r+0xb66>
 800cca0:	e6f7      	b.n	800ca92 <_dtoa_r+0x962>
 800cca2:	9a00      	ldr	r2, [sp, #0]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d1a5      	bne.n	800cbf4 <_dtoa_r+0xac4>
 800cca8:	f10a 0a01 	add.w	sl, sl, #1
 800ccac:	2331      	movs	r3, #49	; 0x31
 800ccae:	e779      	b.n	800cba4 <_dtoa_r+0xa74>
 800ccb0:	4b13      	ldr	r3, [pc, #76]	; (800cd00 <_dtoa_r+0xbd0>)
 800ccb2:	f7ff baaf 	b.w	800c214 <_dtoa_r+0xe4>
 800ccb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f47f aa86 	bne.w	800c1ca <_dtoa_r+0x9a>
 800ccbe:	4b11      	ldr	r3, [pc, #68]	; (800cd04 <_dtoa_r+0xbd4>)
 800ccc0:	f7ff baa8 	b.w	800c214 <_dtoa_r+0xe4>
 800ccc4:	f1b9 0f00 	cmp.w	r9, #0
 800ccc8:	dc03      	bgt.n	800ccd2 <_dtoa_r+0xba2>
 800ccca:	9b05      	ldr	r3, [sp, #20]
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	f73f aec9 	bgt.w	800ca64 <_dtoa_r+0x934>
 800ccd2:	9d00      	ldr	r5, [sp, #0]
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4658      	mov	r0, fp
 800ccd8:	f7ff f99e 	bl	800c018 <quorem>
 800ccdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cce0:	f805 3b01 	strb.w	r3, [r5], #1
 800cce4:	9a00      	ldr	r2, [sp, #0]
 800cce6:	1aaa      	subs	r2, r5, r2
 800cce8:	4591      	cmp	r9, r2
 800ccea:	ddba      	ble.n	800cc62 <_dtoa_r+0xb32>
 800ccec:	4659      	mov	r1, fp
 800ccee:	2300      	movs	r3, #0
 800ccf0:	220a      	movs	r2, #10
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f000 fc0a 	bl	800d50c <__multadd>
 800ccf8:	4683      	mov	fp, r0
 800ccfa:	e7eb      	b.n	800ccd4 <_dtoa_r+0xba4>
 800ccfc:	0800f3c1 	.word	0x0800f3c1
 800cd00:	0800f124 	.word	0x0800f124
 800cd04:	0800f355 	.word	0x0800f355

0800cd08 <fiprintf>:
 800cd08:	b40e      	push	{r1, r2, r3}
 800cd0a:	b503      	push	{r0, r1, lr}
 800cd0c:	4601      	mov	r1, r0
 800cd0e:	ab03      	add	r3, sp, #12
 800cd10:	4805      	ldr	r0, [pc, #20]	; (800cd28 <fiprintf+0x20>)
 800cd12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd16:	6800      	ldr	r0, [r0, #0]
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	f001 fab5 	bl	800e288 <_vfiprintf_r>
 800cd1e:	b002      	add	sp, #8
 800cd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd24:	b003      	add	sp, #12
 800cd26:	4770      	bx	lr
 800cd28:	20000048 	.word	0x20000048

0800cd2c <rshift>:
 800cd2c:	6903      	ldr	r3, [r0, #16]
 800cd2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd3a:	f100 0414 	add.w	r4, r0, #20
 800cd3e:	dd45      	ble.n	800cdcc <rshift+0xa0>
 800cd40:	f011 011f 	ands.w	r1, r1, #31
 800cd44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd4c:	d10c      	bne.n	800cd68 <rshift+0x3c>
 800cd4e:	f100 0710 	add.w	r7, r0, #16
 800cd52:	4629      	mov	r1, r5
 800cd54:	42b1      	cmp	r1, r6
 800cd56:	d334      	bcc.n	800cdc2 <rshift+0x96>
 800cd58:	1a9b      	subs	r3, r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	1eea      	subs	r2, r5, #3
 800cd5e:	4296      	cmp	r6, r2
 800cd60:	bf38      	it	cc
 800cd62:	2300      	movcc	r3, #0
 800cd64:	4423      	add	r3, r4
 800cd66:	e015      	b.n	800cd94 <rshift+0x68>
 800cd68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cd6c:	f1c1 0820 	rsb	r8, r1, #32
 800cd70:	40cf      	lsrs	r7, r1
 800cd72:	f105 0e04 	add.w	lr, r5, #4
 800cd76:	46a1      	mov	r9, r4
 800cd78:	4576      	cmp	r6, lr
 800cd7a:	46f4      	mov	ip, lr
 800cd7c:	d815      	bhi.n	800cdaa <rshift+0x7e>
 800cd7e:	1a9b      	subs	r3, r3, r2
 800cd80:	009a      	lsls	r2, r3, #2
 800cd82:	3a04      	subs	r2, #4
 800cd84:	3501      	adds	r5, #1
 800cd86:	42ae      	cmp	r6, r5
 800cd88:	bf38      	it	cc
 800cd8a:	2200      	movcc	r2, #0
 800cd8c:	18a3      	adds	r3, r4, r2
 800cd8e:	50a7      	str	r7, [r4, r2]
 800cd90:	b107      	cbz	r7, 800cd94 <rshift+0x68>
 800cd92:	3304      	adds	r3, #4
 800cd94:	1b1a      	subs	r2, r3, r4
 800cd96:	42a3      	cmp	r3, r4
 800cd98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cd9c:	bf08      	it	eq
 800cd9e:	2300      	moveq	r3, #0
 800cda0:	6102      	str	r2, [r0, #16]
 800cda2:	bf08      	it	eq
 800cda4:	6143      	streq	r3, [r0, #20]
 800cda6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdaa:	f8dc c000 	ldr.w	ip, [ip]
 800cdae:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdb2:	ea4c 0707 	orr.w	r7, ip, r7
 800cdb6:	f849 7b04 	str.w	r7, [r9], #4
 800cdba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cdbe:	40cf      	lsrs	r7, r1
 800cdc0:	e7da      	b.n	800cd78 <rshift+0x4c>
 800cdc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cdc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800cdca:	e7c3      	b.n	800cd54 <rshift+0x28>
 800cdcc:	4623      	mov	r3, r4
 800cdce:	e7e1      	b.n	800cd94 <rshift+0x68>

0800cdd0 <__hexdig_fun>:
 800cdd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cdd4:	2b09      	cmp	r3, #9
 800cdd6:	d802      	bhi.n	800cdde <__hexdig_fun+0xe>
 800cdd8:	3820      	subs	r0, #32
 800cdda:	b2c0      	uxtb	r0, r0
 800cddc:	4770      	bx	lr
 800cdde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cde2:	2b05      	cmp	r3, #5
 800cde4:	d801      	bhi.n	800cdea <__hexdig_fun+0x1a>
 800cde6:	3847      	subs	r0, #71	; 0x47
 800cde8:	e7f7      	b.n	800cdda <__hexdig_fun+0xa>
 800cdea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cdee:	2b05      	cmp	r3, #5
 800cdf0:	d801      	bhi.n	800cdf6 <__hexdig_fun+0x26>
 800cdf2:	3827      	subs	r0, #39	; 0x27
 800cdf4:	e7f1      	b.n	800cdda <__hexdig_fun+0xa>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	4770      	bx	lr
	...

0800cdfc <__gethex>:
 800cdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce00:	ed2d 8b02 	vpush	{d8}
 800ce04:	b089      	sub	sp, #36	; 0x24
 800ce06:	ee08 0a10 	vmov	s16, r0
 800ce0a:	9304      	str	r3, [sp, #16]
 800ce0c:	4bbc      	ldr	r3, [pc, #752]	; (800d100 <__gethex+0x304>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	4618      	mov	r0, r3
 800ce14:	468b      	mov	fp, r1
 800ce16:	4690      	mov	r8, r2
 800ce18:	f7f3 f9da 	bl	80001d0 <strlen>
 800ce1c:	9b01      	ldr	r3, [sp, #4]
 800ce1e:	f8db 2000 	ldr.w	r2, [fp]
 800ce22:	4403      	add	r3, r0
 800ce24:	4682      	mov	sl, r0
 800ce26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ce2a:	9305      	str	r3, [sp, #20]
 800ce2c:	1c93      	adds	r3, r2, #2
 800ce2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce36:	32fe      	adds	r2, #254	; 0xfe
 800ce38:	18d1      	adds	r1, r2, r3
 800ce3a:	461f      	mov	r7, r3
 800ce3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce40:	9100      	str	r1, [sp, #0]
 800ce42:	2830      	cmp	r0, #48	; 0x30
 800ce44:	d0f8      	beq.n	800ce38 <__gethex+0x3c>
 800ce46:	f7ff ffc3 	bl	800cdd0 <__hexdig_fun>
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d13a      	bne.n	800cec6 <__gethex+0xca>
 800ce50:	9901      	ldr	r1, [sp, #4]
 800ce52:	4652      	mov	r2, sl
 800ce54:	4638      	mov	r0, r7
 800ce56:	f001 fb5f 	bl	800e518 <strncmp>
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d168      	bne.n	800cf32 <__gethex+0x136>
 800ce60:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ce64:	eb07 060a 	add.w	r6, r7, sl
 800ce68:	f7ff ffb2 	bl	800cdd0 <__hexdig_fun>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d062      	beq.n	800cf36 <__gethex+0x13a>
 800ce70:	4633      	mov	r3, r6
 800ce72:	7818      	ldrb	r0, [r3, #0]
 800ce74:	2830      	cmp	r0, #48	; 0x30
 800ce76:	461f      	mov	r7, r3
 800ce78:	f103 0301 	add.w	r3, r3, #1
 800ce7c:	d0f9      	beq.n	800ce72 <__gethex+0x76>
 800ce7e:	f7ff ffa7 	bl	800cdd0 <__hexdig_fun>
 800ce82:	2301      	movs	r3, #1
 800ce84:	fab0 f480 	clz	r4, r0
 800ce88:	0964      	lsrs	r4, r4, #5
 800ce8a:	4635      	mov	r5, r6
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	463a      	mov	r2, r7
 800ce90:	4616      	mov	r6, r2
 800ce92:	3201      	adds	r2, #1
 800ce94:	7830      	ldrb	r0, [r6, #0]
 800ce96:	f7ff ff9b 	bl	800cdd0 <__hexdig_fun>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d1f8      	bne.n	800ce90 <__gethex+0x94>
 800ce9e:	9901      	ldr	r1, [sp, #4]
 800cea0:	4652      	mov	r2, sl
 800cea2:	4630      	mov	r0, r6
 800cea4:	f001 fb38 	bl	800e518 <strncmp>
 800cea8:	b980      	cbnz	r0, 800cecc <__gethex+0xd0>
 800ceaa:	b94d      	cbnz	r5, 800cec0 <__gethex+0xc4>
 800ceac:	eb06 050a 	add.w	r5, r6, sl
 800ceb0:	462a      	mov	r2, r5
 800ceb2:	4616      	mov	r6, r2
 800ceb4:	3201      	adds	r2, #1
 800ceb6:	7830      	ldrb	r0, [r6, #0]
 800ceb8:	f7ff ff8a 	bl	800cdd0 <__hexdig_fun>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d1f8      	bne.n	800ceb2 <__gethex+0xb6>
 800cec0:	1bad      	subs	r5, r5, r6
 800cec2:	00ad      	lsls	r5, r5, #2
 800cec4:	e004      	b.n	800ced0 <__gethex+0xd4>
 800cec6:	2400      	movs	r4, #0
 800cec8:	4625      	mov	r5, r4
 800ceca:	e7e0      	b.n	800ce8e <__gethex+0x92>
 800cecc:	2d00      	cmp	r5, #0
 800cece:	d1f7      	bne.n	800cec0 <__gethex+0xc4>
 800ced0:	7833      	ldrb	r3, [r6, #0]
 800ced2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ced6:	2b50      	cmp	r3, #80	; 0x50
 800ced8:	d13b      	bne.n	800cf52 <__gethex+0x156>
 800ceda:	7873      	ldrb	r3, [r6, #1]
 800cedc:	2b2b      	cmp	r3, #43	; 0x2b
 800cede:	d02c      	beq.n	800cf3a <__gethex+0x13e>
 800cee0:	2b2d      	cmp	r3, #45	; 0x2d
 800cee2:	d02e      	beq.n	800cf42 <__gethex+0x146>
 800cee4:	1c71      	adds	r1, r6, #1
 800cee6:	f04f 0900 	mov.w	r9, #0
 800ceea:	7808      	ldrb	r0, [r1, #0]
 800ceec:	f7ff ff70 	bl	800cdd0 <__hexdig_fun>
 800cef0:	1e43      	subs	r3, r0, #1
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	2b18      	cmp	r3, #24
 800cef6:	d82c      	bhi.n	800cf52 <__gethex+0x156>
 800cef8:	f1a0 0210 	sub.w	r2, r0, #16
 800cefc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf00:	f7ff ff66 	bl	800cdd0 <__hexdig_fun>
 800cf04:	1e43      	subs	r3, r0, #1
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b18      	cmp	r3, #24
 800cf0a:	d91d      	bls.n	800cf48 <__gethex+0x14c>
 800cf0c:	f1b9 0f00 	cmp.w	r9, #0
 800cf10:	d000      	beq.n	800cf14 <__gethex+0x118>
 800cf12:	4252      	negs	r2, r2
 800cf14:	4415      	add	r5, r2
 800cf16:	f8cb 1000 	str.w	r1, [fp]
 800cf1a:	b1e4      	cbz	r4, 800cf56 <__gethex+0x15a>
 800cf1c:	9b00      	ldr	r3, [sp, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	bf14      	ite	ne
 800cf22:	2700      	movne	r7, #0
 800cf24:	2706      	moveq	r7, #6
 800cf26:	4638      	mov	r0, r7
 800cf28:	b009      	add	sp, #36	; 0x24
 800cf2a:	ecbd 8b02 	vpop	{d8}
 800cf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf32:	463e      	mov	r6, r7
 800cf34:	4625      	mov	r5, r4
 800cf36:	2401      	movs	r4, #1
 800cf38:	e7ca      	b.n	800ced0 <__gethex+0xd4>
 800cf3a:	f04f 0900 	mov.w	r9, #0
 800cf3e:	1cb1      	adds	r1, r6, #2
 800cf40:	e7d3      	b.n	800ceea <__gethex+0xee>
 800cf42:	f04f 0901 	mov.w	r9, #1
 800cf46:	e7fa      	b.n	800cf3e <__gethex+0x142>
 800cf48:	230a      	movs	r3, #10
 800cf4a:	fb03 0202 	mla	r2, r3, r2, r0
 800cf4e:	3a10      	subs	r2, #16
 800cf50:	e7d4      	b.n	800cefc <__gethex+0x100>
 800cf52:	4631      	mov	r1, r6
 800cf54:	e7df      	b.n	800cf16 <__gethex+0x11a>
 800cf56:	1bf3      	subs	r3, r6, r7
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	2b07      	cmp	r3, #7
 800cf5e:	dc0b      	bgt.n	800cf78 <__gethex+0x17c>
 800cf60:	ee18 0a10 	vmov	r0, s16
 800cf64:	f000 fa70 	bl	800d448 <_Balloc>
 800cf68:	4604      	mov	r4, r0
 800cf6a:	b940      	cbnz	r0, 800cf7e <__gethex+0x182>
 800cf6c:	4b65      	ldr	r3, [pc, #404]	; (800d104 <__gethex+0x308>)
 800cf6e:	4602      	mov	r2, r0
 800cf70:	21de      	movs	r1, #222	; 0xde
 800cf72:	4865      	ldr	r0, [pc, #404]	; (800d108 <__gethex+0x30c>)
 800cf74:	f7ff f832 	bl	800bfdc <__assert_func>
 800cf78:	3101      	adds	r1, #1
 800cf7a:	105b      	asrs	r3, r3, #1
 800cf7c:	e7ee      	b.n	800cf5c <__gethex+0x160>
 800cf7e:	f100 0914 	add.w	r9, r0, #20
 800cf82:	f04f 0b00 	mov.w	fp, #0
 800cf86:	f1ca 0301 	rsb	r3, sl, #1
 800cf8a:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf8e:	f8cd b000 	str.w	fp, [sp]
 800cf92:	9306      	str	r3, [sp, #24]
 800cf94:	42b7      	cmp	r7, r6
 800cf96:	d340      	bcc.n	800d01a <__gethex+0x21e>
 800cf98:	9802      	ldr	r0, [sp, #8]
 800cf9a:	9b00      	ldr	r3, [sp, #0]
 800cf9c:	f840 3b04 	str.w	r3, [r0], #4
 800cfa0:	eba0 0009 	sub.w	r0, r0, r9
 800cfa4:	1080      	asrs	r0, r0, #2
 800cfa6:	0146      	lsls	r6, r0, #5
 800cfa8:	6120      	str	r0, [r4, #16]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 fb42 	bl	800d634 <__hi0bits>
 800cfb0:	1a30      	subs	r0, r6, r0
 800cfb2:	f8d8 6000 	ldr.w	r6, [r8]
 800cfb6:	42b0      	cmp	r0, r6
 800cfb8:	dd63      	ble.n	800d082 <__gethex+0x286>
 800cfba:	1b87      	subs	r7, r0, r6
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 fedc 	bl	800dd7c <__any_on>
 800cfc4:	4682      	mov	sl, r0
 800cfc6:	b1a8      	cbz	r0, 800cff4 <__gethex+0x1f8>
 800cfc8:	1e7b      	subs	r3, r7, #1
 800cfca:	1159      	asrs	r1, r3, #5
 800cfcc:	f003 021f 	and.w	r2, r3, #31
 800cfd0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cfd4:	f04f 0a01 	mov.w	sl, #1
 800cfd8:	fa0a f202 	lsl.w	r2, sl, r2
 800cfdc:	420a      	tst	r2, r1
 800cfde:	d009      	beq.n	800cff4 <__gethex+0x1f8>
 800cfe0:	4553      	cmp	r3, sl
 800cfe2:	dd05      	ble.n	800cff0 <__gethex+0x1f4>
 800cfe4:	1eb9      	subs	r1, r7, #2
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f000 fec8 	bl	800dd7c <__any_on>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d145      	bne.n	800d07c <__gethex+0x280>
 800cff0:	f04f 0a02 	mov.w	sl, #2
 800cff4:	4639      	mov	r1, r7
 800cff6:	4620      	mov	r0, r4
 800cff8:	f7ff fe98 	bl	800cd2c <rshift>
 800cffc:	443d      	add	r5, r7
 800cffe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d002:	42ab      	cmp	r3, r5
 800d004:	da4c      	bge.n	800d0a0 <__gethex+0x2a4>
 800d006:	ee18 0a10 	vmov	r0, s16
 800d00a:	4621      	mov	r1, r4
 800d00c:	f000 fa5c 	bl	800d4c8 <_Bfree>
 800d010:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d012:	2300      	movs	r3, #0
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	27a3      	movs	r7, #163	; 0xa3
 800d018:	e785      	b.n	800cf26 <__gethex+0x12a>
 800d01a:	1e73      	subs	r3, r6, #1
 800d01c:	9a05      	ldr	r2, [sp, #20]
 800d01e:	9303      	str	r3, [sp, #12]
 800d020:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d024:	4293      	cmp	r3, r2
 800d026:	d019      	beq.n	800d05c <__gethex+0x260>
 800d028:	f1bb 0f20 	cmp.w	fp, #32
 800d02c:	d107      	bne.n	800d03e <__gethex+0x242>
 800d02e:	9b02      	ldr	r3, [sp, #8]
 800d030:	9a00      	ldr	r2, [sp, #0]
 800d032:	f843 2b04 	str.w	r2, [r3], #4
 800d036:	9302      	str	r3, [sp, #8]
 800d038:	2300      	movs	r3, #0
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	469b      	mov	fp, r3
 800d03e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d042:	f7ff fec5 	bl	800cdd0 <__hexdig_fun>
 800d046:	9b00      	ldr	r3, [sp, #0]
 800d048:	f000 000f 	and.w	r0, r0, #15
 800d04c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d050:	4303      	orrs	r3, r0
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	f10b 0b04 	add.w	fp, fp, #4
 800d058:	9b03      	ldr	r3, [sp, #12]
 800d05a:	e00d      	b.n	800d078 <__gethex+0x27c>
 800d05c:	9b03      	ldr	r3, [sp, #12]
 800d05e:	9a06      	ldr	r2, [sp, #24]
 800d060:	4413      	add	r3, r2
 800d062:	42bb      	cmp	r3, r7
 800d064:	d3e0      	bcc.n	800d028 <__gethex+0x22c>
 800d066:	4618      	mov	r0, r3
 800d068:	9901      	ldr	r1, [sp, #4]
 800d06a:	9307      	str	r3, [sp, #28]
 800d06c:	4652      	mov	r2, sl
 800d06e:	f001 fa53 	bl	800e518 <strncmp>
 800d072:	9b07      	ldr	r3, [sp, #28]
 800d074:	2800      	cmp	r0, #0
 800d076:	d1d7      	bne.n	800d028 <__gethex+0x22c>
 800d078:	461e      	mov	r6, r3
 800d07a:	e78b      	b.n	800cf94 <__gethex+0x198>
 800d07c:	f04f 0a03 	mov.w	sl, #3
 800d080:	e7b8      	b.n	800cff4 <__gethex+0x1f8>
 800d082:	da0a      	bge.n	800d09a <__gethex+0x29e>
 800d084:	1a37      	subs	r7, r6, r0
 800d086:	4621      	mov	r1, r4
 800d088:	ee18 0a10 	vmov	r0, s16
 800d08c:	463a      	mov	r2, r7
 800d08e:	f000 fc37 	bl	800d900 <__lshift>
 800d092:	1bed      	subs	r5, r5, r7
 800d094:	4604      	mov	r4, r0
 800d096:	f100 0914 	add.w	r9, r0, #20
 800d09a:	f04f 0a00 	mov.w	sl, #0
 800d09e:	e7ae      	b.n	800cffe <__gethex+0x202>
 800d0a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d0a4:	42a8      	cmp	r0, r5
 800d0a6:	dd72      	ble.n	800d18e <__gethex+0x392>
 800d0a8:	1b45      	subs	r5, r0, r5
 800d0aa:	42ae      	cmp	r6, r5
 800d0ac:	dc36      	bgt.n	800d11c <__gethex+0x320>
 800d0ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d02a      	beq.n	800d10c <__gethex+0x310>
 800d0b6:	2b03      	cmp	r3, #3
 800d0b8:	d02c      	beq.n	800d114 <__gethex+0x318>
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d115      	bne.n	800d0ea <__gethex+0x2ee>
 800d0be:	42ae      	cmp	r6, r5
 800d0c0:	d113      	bne.n	800d0ea <__gethex+0x2ee>
 800d0c2:	2e01      	cmp	r6, #1
 800d0c4:	d10b      	bne.n	800d0de <__gethex+0x2e2>
 800d0c6:	9a04      	ldr	r2, [sp, #16]
 800d0c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0cc:	6013      	str	r3, [r2, #0]
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	6123      	str	r3, [r4, #16]
 800d0d2:	f8c9 3000 	str.w	r3, [r9]
 800d0d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0d8:	2762      	movs	r7, #98	; 0x62
 800d0da:	601c      	str	r4, [r3, #0]
 800d0dc:	e723      	b.n	800cf26 <__gethex+0x12a>
 800d0de:	1e71      	subs	r1, r6, #1
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f000 fe4b 	bl	800dd7c <__any_on>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d1ed      	bne.n	800d0c6 <__gethex+0x2ca>
 800d0ea:	ee18 0a10 	vmov	r0, s16
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	f000 f9ea 	bl	800d4c8 <_Bfree>
 800d0f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	2750      	movs	r7, #80	; 0x50
 800d0fc:	e713      	b.n	800cf26 <__gethex+0x12a>
 800d0fe:	bf00      	nop
 800d100:	0800f43c 	.word	0x0800f43c
 800d104:	0800f3c1 	.word	0x0800f3c1
 800d108:	0800f3d2 	.word	0x0800f3d2
 800d10c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1eb      	bne.n	800d0ea <__gethex+0x2ee>
 800d112:	e7d8      	b.n	800d0c6 <__gethex+0x2ca>
 800d114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1d5      	bne.n	800d0c6 <__gethex+0x2ca>
 800d11a:	e7e6      	b.n	800d0ea <__gethex+0x2ee>
 800d11c:	1e6f      	subs	r7, r5, #1
 800d11e:	f1ba 0f00 	cmp.w	sl, #0
 800d122:	d131      	bne.n	800d188 <__gethex+0x38c>
 800d124:	b127      	cbz	r7, 800d130 <__gethex+0x334>
 800d126:	4639      	mov	r1, r7
 800d128:	4620      	mov	r0, r4
 800d12a:	f000 fe27 	bl	800dd7c <__any_on>
 800d12e:	4682      	mov	sl, r0
 800d130:	117b      	asrs	r3, r7, #5
 800d132:	2101      	movs	r1, #1
 800d134:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d138:	f007 071f 	and.w	r7, r7, #31
 800d13c:	fa01 f707 	lsl.w	r7, r1, r7
 800d140:	421f      	tst	r7, r3
 800d142:	4629      	mov	r1, r5
 800d144:	4620      	mov	r0, r4
 800d146:	bf18      	it	ne
 800d148:	f04a 0a02 	orrne.w	sl, sl, #2
 800d14c:	1b76      	subs	r6, r6, r5
 800d14e:	f7ff fded 	bl	800cd2c <rshift>
 800d152:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d156:	2702      	movs	r7, #2
 800d158:	f1ba 0f00 	cmp.w	sl, #0
 800d15c:	d048      	beq.n	800d1f0 <__gethex+0x3f4>
 800d15e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d162:	2b02      	cmp	r3, #2
 800d164:	d015      	beq.n	800d192 <__gethex+0x396>
 800d166:	2b03      	cmp	r3, #3
 800d168:	d017      	beq.n	800d19a <__gethex+0x39e>
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d109      	bne.n	800d182 <__gethex+0x386>
 800d16e:	f01a 0f02 	tst.w	sl, #2
 800d172:	d006      	beq.n	800d182 <__gethex+0x386>
 800d174:	f8d9 0000 	ldr.w	r0, [r9]
 800d178:	ea4a 0a00 	orr.w	sl, sl, r0
 800d17c:	f01a 0f01 	tst.w	sl, #1
 800d180:	d10e      	bne.n	800d1a0 <__gethex+0x3a4>
 800d182:	f047 0710 	orr.w	r7, r7, #16
 800d186:	e033      	b.n	800d1f0 <__gethex+0x3f4>
 800d188:	f04f 0a01 	mov.w	sl, #1
 800d18c:	e7d0      	b.n	800d130 <__gethex+0x334>
 800d18e:	2701      	movs	r7, #1
 800d190:	e7e2      	b.n	800d158 <__gethex+0x35c>
 800d192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d194:	f1c3 0301 	rsb	r3, r3, #1
 800d198:	9315      	str	r3, [sp, #84]	; 0x54
 800d19a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d0f0      	beq.n	800d182 <__gethex+0x386>
 800d1a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1a4:	f104 0314 	add.w	r3, r4, #20
 800d1a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d1ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d1b0:	f04f 0c00 	mov.w	ip, #0
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d1be:	d01c      	beq.n	800d1fa <__gethex+0x3fe>
 800d1c0:	3201      	adds	r2, #1
 800d1c2:	6002      	str	r2, [r0, #0]
 800d1c4:	2f02      	cmp	r7, #2
 800d1c6:	f104 0314 	add.w	r3, r4, #20
 800d1ca:	d13f      	bne.n	800d24c <__gethex+0x450>
 800d1cc:	f8d8 2000 	ldr.w	r2, [r8]
 800d1d0:	3a01      	subs	r2, #1
 800d1d2:	42b2      	cmp	r2, r6
 800d1d4:	d10a      	bne.n	800d1ec <__gethex+0x3f0>
 800d1d6:	1171      	asrs	r1, r6, #5
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1de:	f006 061f 	and.w	r6, r6, #31
 800d1e2:	fa02 f606 	lsl.w	r6, r2, r6
 800d1e6:	421e      	tst	r6, r3
 800d1e8:	bf18      	it	ne
 800d1ea:	4617      	movne	r7, r2
 800d1ec:	f047 0720 	orr.w	r7, r7, #32
 800d1f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1f2:	601c      	str	r4, [r3, #0]
 800d1f4:	9b04      	ldr	r3, [sp, #16]
 800d1f6:	601d      	str	r5, [r3, #0]
 800d1f8:	e695      	b.n	800cf26 <__gethex+0x12a>
 800d1fa:	4299      	cmp	r1, r3
 800d1fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d200:	d8d8      	bhi.n	800d1b4 <__gethex+0x3b8>
 800d202:	68a3      	ldr	r3, [r4, #8]
 800d204:	459b      	cmp	fp, r3
 800d206:	db19      	blt.n	800d23c <__gethex+0x440>
 800d208:	6861      	ldr	r1, [r4, #4]
 800d20a:	ee18 0a10 	vmov	r0, s16
 800d20e:	3101      	adds	r1, #1
 800d210:	f000 f91a 	bl	800d448 <_Balloc>
 800d214:	4681      	mov	r9, r0
 800d216:	b918      	cbnz	r0, 800d220 <__gethex+0x424>
 800d218:	4b1a      	ldr	r3, [pc, #104]	; (800d284 <__gethex+0x488>)
 800d21a:	4602      	mov	r2, r0
 800d21c:	2184      	movs	r1, #132	; 0x84
 800d21e:	e6a8      	b.n	800cf72 <__gethex+0x176>
 800d220:	6922      	ldr	r2, [r4, #16]
 800d222:	3202      	adds	r2, #2
 800d224:	f104 010c 	add.w	r1, r4, #12
 800d228:	0092      	lsls	r2, r2, #2
 800d22a:	300c      	adds	r0, #12
 800d22c:	f7fd f8b8 	bl	800a3a0 <memcpy>
 800d230:	4621      	mov	r1, r4
 800d232:	ee18 0a10 	vmov	r0, s16
 800d236:	f000 f947 	bl	800d4c8 <_Bfree>
 800d23a:	464c      	mov	r4, r9
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	1c5a      	adds	r2, r3, #1
 800d240:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d244:	6122      	str	r2, [r4, #16]
 800d246:	2201      	movs	r2, #1
 800d248:	615a      	str	r2, [r3, #20]
 800d24a:	e7bb      	b.n	800d1c4 <__gethex+0x3c8>
 800d24c:	6922      	ldr	r2, [r4, #16]
 800d24e:	455a      	cmp	r2, fp
 800d250:	dd0b      	ble.n	800d26a <__gethex+0x46e>
 800d252:	2101      	movs	r1, #1
 800d254:	4620      	mov	r0, r4
 800d256:	f7ff fd69 	bl	800cd2c <rshift>
 800d25a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d25e:	3501      	adds	r5, #1
 800d260:	42ab      	cmp	r3, r5
 800d262:	f6ff aed0 	blt.w	800d006 <__gethex+0x20a>
 800d266:	2701      	movs	r7, #1
 800d268:	e7c0      	b.n	800d1ec <__gethex+0x3f0>
 800d26a:	f016 061f 	ands.w	r6, r6, #31
 800d26e:	d0fa      	beq.n	800d266 <__gethex+0x46a>
 800d270:	449a      	add	sl, r3
 800d272:	f1c6 0620 	rsb	r6, r6, #32
 800d276:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d27a:	f000 f9db 	bl	800d634 <__hi0bits>
 800d27e:	42b0      	cmp	r0, r6
 800d280:	dbe7      	blt.n	800d252 <__gethex+0x456>
 800d282:	e7f0      	b.n	800d266 <__gethex+0x46a>
 800d284:	0800f3c1 	.word	0x0800f3c1

0800d288 <L_shift>:
 800d288:	f1c2 0208 	rsb	r2, r2, #8
 800d28c:	0092      	lsls	r2, r2, #2
 800d28e:	b570      	push	{r4, r5, r6, lr}
 800d290:	f1c2 0620 	rsb	r6, r2, #32
 800d294:	6843      	ldr	r3, [r0, #4]
 800d296:	6804      	ldr	r4, [r0, #0]
 800d298:	fa03 f506 	lsl.w	r5, r3, r6
 800d29c:	432c      	orrs	r4, r5
 800d29e:	40d3      	lsrs	r3, r2
 800d2a0:	6004      	str	r4, [r0, #0]
 800d2a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2a6:	4288      	cmp	r0, r1
 800d2a8:	d3f4      	bcc.n	800d294 <L_shift+0xc>
 800d2aa:	bd70      	pop	{r4, r5, r6, pc}

0800d2ac <__match>:
 800d2ac:	b530      	push	{r4, r5, lr}
 800d2ae:	6803      	ldr	r3, [r0, #0]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2b6:	b914      	cbnz	r4, 800d2be <__match+0x12>
 800d2b8:	6003      	str	r3, [r0, #0]
 800d2ba:	2001      	movs	r0, #1
 800d2bc:	bd30      	pop	{r4, r5, pc}
 800d2be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2c6:	2d19      	cmp	r5, #25
 800d2c8:	bf98      	it	ls
 800d2ca:	3220      	addls	r2, #32
 800d2cc:	42a2      	cmp	r2, r4
 800d2ce:	d0f0      	beq.n	800d2b2 <__match+0x6>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	e7f3      	b.n	800d2bc <__match+0x10>

0800d2d4 <__hexnan>:
 800d2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d8:	680b      	ldr	r3, [r1, #0]
 800d2da:	6801      	ldr	r1, [r0, #0]
 800d2dc:	115e      	asrs	r6, r3, #5
 800d2de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2e2:	f013 031f 	ands.w	r3, r3, #31
 800d2e6:	b087      	sub	sp, #28
 800d2e8:	bf18      	it	ne
 800d2ea:	3604      	addne	r6, #4
 800d2ec:	2500      	movs	r5, #0
 800d2ee:	1f37      	subs	r7, r6, #4
 800d2f0:	4682      	mov	sl, r0
 800d2f2:	4690      	mov	r8, r2
 800d2f4:	9301      	str	r3, [sp, #4]
 800d2f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2fa:	46b9      	mov	r9, r7
 800d2fc:	463c      	mov	r4, r7
 800d2fe:	9502      	str	r5, [sp, #8]
 800d300:	46ab      	mov	fp, r5
 800d302:	784a      	ldrb	r2, [r1, #1]
 800d304:	1c4b      	adds	r3, r1, #1
 800d306:	9303      	str	r3, [sp, #12]
 800d308:	b342      	cbz	r2, 800d35c <__hexnan+0x88>
 800d30a:	4610      	mov	r0, r2
 800d30c:	9105      	str	r1, [sp, #20]
 800d30e:	9204      	str	r2, [sp, #16]
 800d310:	f7ff fd5e 	bl	800cdd0 <__hexdig_fun>
 800d314:	2800      	cmp	r0, #0
 800d316:	d14f      	bne.n	800d3b8 <__hexnan+0xe4>
 800d318:	9a04      	ldr	r2, [sp, #16]
 800d31a:	9905      	ldr	r1, [sp, #20]
 800d31c:	2a20      	cmp	r2, #32
 800d31e:	d818      	bhi.n	800d352 <__hexnan+0x7e>
 800d320:	9b02      	ldr	r3, [sp, #8]
 800d322:	459b      	cmp	fp, r3
 800d324:	dd13      	ble.n	800d34e <__hexnan+0x7a>
 800d326:	454c      	cmp	r4, r9
 800d328:	d206      	bcs.n	800d338 <__hexnan+0x64>
 800d32a:	2d07      	cmp	r5, #7
 800d32c:	dc04      	bgt.n	800d338 <__hexnan+0x64>
 800d32e:	462a      	mov	r2, r5
 800d330:	4649      	mov	r1, r9
 800d332:	4620      	mov	r0, r4
 800d334:	f7ff ffa8 	bl	800d288 <L_shift>
 800d338:	4544      	cmp	r4, r8
 800d33a:	d950      	bls.n	800d3de <__hexnan+0x10a>
 800d33c:	2300      	movs	r3, #0
 800d33e:	f1a4 0904 	sub.w	r9, r4, #4
 800d342:	f844 3c04 	str.w	r3, [r4, #-4]
 800d346:	f8cd b008 	str.w	fp, [sp, #8]
 800d34a:	464c      	mov	r4, r9
 800d34c:	461d      	mov	r5, r3
 800d34e:	9903      	ldr	r1, [sp, #12]
 800d350:	e7d7      	b.n	800d302 <__hexnan+0x2e>
 800d352:	2a29      	cmp	r2, #41	; 0x29
 800d354:	d156      	bne.n	800d404 <__hexnan+0x130>
 800d356:	3102      	adds	r1, #2
 800d358:	f8ca 1000 	str.w	r1, [sl]
 800d35c:	f1bb 0f00 	cmp.w	fp, #0
 800d360:	d050      	beq.n	800d404 <__hexnan+0x130>
 800d362:	454c      	cmp	r4, r9
 800d364:	d206      	bcs.n	800d374 <__hexnan+0xa0>
 800d366:	2d07      	cmp	r5, #7
 800d368:	dc04      	bgt.n	800d374 <__hexnan+0xa0>
 800d36a:	462a      	mov	r2, r5
 800d36c:	4649      	mov	r1, r9
 800d36e:	4620      	mov	r0, r4
 800d370:	f7ff ff8a 	bl	800d288 <L_shift>
 800d374:	4544      	cmp	r4, r8
 800d376:	d934      	bls.n	800d3e2 <__hexnan+0x10e>
 800d378:	f1a8 0204 	sub.w	r2, r8, #4
 800d37c:	4623      	mov	r3, r4
 800d37e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d382:	f842 1f04 	str.w	r1, [r2, #4]!
 800d386:	429f      	cmp	r7, r3
 800d388:	d2f9      	bcs.n	800d37e <__hexnan+0xaa>
 800d38a:	1b3b      	subs	r3, r7, r4
 800d38c:	f023 0303 	bic.w	r3, r3, #3
 800d390:	3304      	adds	r3, #4
 800d392:	3401      	adds	r4, #1
 800d394:	3e03      	subs	r6, #3
 800d396:	42b4      	cmp	r4, r6
 800d398:	bf88      	it	hi
 800d39a:	2304      	movhi	r3, #4
 800d39c:	4443      	add	r3, r8
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f843 2b04 	str.w	r2, [r3], #4
 800d3a4:	429f      	cmp	r7, r3
 800d3a6:	d2fb      	bcs.n	800d3a0 <__hexnan+0xcc>
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	b91b      	cbnz	r3, 800d3b4 <__hexnan+0xe0>
 800d3ac:	4547      	cmp	r7, r8
 800d3ae:	d127      	bne.n	800d400 <__hexnan+0x12c>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	603b      	str	r3, [r7, #0]
 800d3b4:	2005      	movs	r0, #5
 800d3b6:	e026      	b.n	800d406 <__hexnan+0x132>
 800d3b8:	3501      	adds	r5, #1
 800d3ba:	2d08      	cmp	r5, #8
 800d3bc:	f10b 0b01 	add.w	fp, fp, #1
 800d3c0:	dd06      	ble.n	800d3d0 <__hexnan+0xfc>
 800d3c2:	4544      	cmp	r4, r8
 800d3c4:	d9c3      	bls.n	800d34e <__hexnan+0x7a>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3cc:	2501      	movs	r5, #1
 800d3ce:	3c04      	subs	r4, #4
 800d3d0:	6822      	ldr	r2, [r4, #0]
 800d3d2:	f000 000f 	and.w	r0, r0, #15
 800d3d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d3da:	6022      	str	r2, [r4, #0]
 800d3dc:	e7b7      	b.n	800d34e <__hexnan+0x7a>
 800d3de:	2508      	movs	r5, #8
 800d3e0:	e7b5      	b.n	800d34e <__hexnan+0x7a>
 800d3e2:	9b01      	ldr	r3, [sp, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d0df      	beq.n	800d3a8 <__hexnan+0xd4>
 800d3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ec:	f1c3 0320 	rsb	r3, r3, #32
 800d3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d3f8:	401a      	ands	r2, r3
 800d3fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800d3fe:	e7d3      	b.n	800d3a8 <__hexnan+0xd4>
 800d400:	3f04      	subs	r7, #4
 800d402:	e7d1      	b.n	800d3a8 <__hexnan+0xd4>
 800d404:	2004      	movs	r0, #4
 800d406:	b007      	add	sp, #28
 800d408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d40c <_localeconv_r>:
 800d40c:	4800      	ldr	r0, [pc, #0]	; (800d410 <_localeconv_r+0x4>)
 800d40e:	4770      	bx	lr
 800d410:	200001a0 	.word	0x200001a0

0800d414 <malloc>:
 800d414:	4b02      	ldr	r3, [pc, #8]	; (800d420 <malloc+0xc>)
 800d416:	4601      	mov	r1, r0
 800d418:	6818      	ldr	r0, [r3, #0]
 800d41a:	f000 bd2f 	b.w	800de7c <_malloc_r>
 800d41e:	bf00      	nop
 800d420:	20000048 	.word	0x20000048

0800d424 <__ascii_mbtowc>:
 800d424:	b082      	sub	sp, #8
 800d426:	b901      	cbnz	r1, 800d42a <__ascii_mbtowc+0x6>
 800d428:	a901      	add	r1, sp, #4
 800d42a:	b142      	cbz	r2, 800d43e <__ascii_mbtowc+0x1a>
 800d42c:	b14b      	cbz	r3, 800d442 <__ascii_mbtowc+0x1e>
 800d42e:	7813      	ldrb	r3, [r2, #0]
 800d430:	600b      	str	r3, [r1, #0]
 800d432:	7812      	ldrb	r2, [r2, #0]
 800d434:	1e10      	subs	r0, r2, #0
 800d436:	bf18      	it	ne
 800d438:	2001      	movne	r0, #1
 800d43a:	b002      	add	sp, #8
 800d43c:	4770      	bx	lr
 800d43e:	4610      	mov	r0, r2
 800d440:	e7fb      	b.n	800d43a <__ascii_mbtowc+0x16>
 800d442:	f06f 0001 	mvn.w	r0, #1
 800d446:	e7f8      	b.n	800d43a <__ascii_mbtowc+0x16>

0800d448 <_Balloc>:
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d44c:	4604      	mov	r4, r0
 800d44e:	460d      	mov	r5, r1
 800d450:	b976      	cbnz	r6, 800d470 <_Balloc+0x28>
 800d452:	2010      	movs	r0, #16
 800d454:	f7ff ffde 	bl	800d414 <malloc>
 800d458:	4602      	mov	r2, r0
 800d45a:	6260      	str	r0, [r4, #36]	; 0x24
 800d45c:	b920      	cbnz	r0, 800d468 <_Balloc+0x20>
 800d45e:	4b18      	ldr	r3, [pc, #96]	; (800d4c0 <_Balloc+0x78>)
 800d460:	4818      	ldr	r0, [pc, #96]	; (800d4c4 <_Balloc+0x7c>)
 800d462:	2166      	movs	r1, #102	; 0x66
 800d464:	f7fe fdba 	bl	800bfdc <__assert_func>
 800d468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d46c:	6006      	str	r6, [r0, #0]
 800d46e:	60c6      	str	r6, [r0, #12]
 800d470:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d472:	68f3      	ldr	r3, [r6, #12]
 800d474:	b183      	cbz	r3, 800d498 <_Balloc+0x50>
 800d476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d47e:	b9b8      	cbnz	r0, 800d4b0 <_Balloc+0x68>
 800d480:	2101      	movs	r1, #1
 800d482:	fa01 f605 	lsl.w	r6, r1, r5
 800d486:	1d72      	adds	r2, r6, #5
 800d488:	0092      	lsls	r2, r2, #2
 800d48a:	4620      	mov	r0, r4
 800d48c:	f000 fc97 	bl	800ddbe <_calloc_r>
 800d490:	b160      	cbz	r0, 800d4ac <_Balloc+0x64>
 800d492:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d496:	e00e      	b.n	800d4b6 <_Balloc+0x6e>
 800d498:	2221      	movs	r2, #33	; 0x21
 800d49a:	2104      	movs	r1, #4
 800d49c:	4620      	mov	r0, r4
 800d49e:	f000 fc8e 	bl	800ddbe <_calloc_r>
 800d4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4a4:	60f0      	str	r0, [r6, #12]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1e4      	bne.n	800d476 <_Balloc+0x2e>
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	6802      	ldr	r2, [r0, #0]
 800d4b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4bc:	e7f7      	b.n	800d4ae <_Balloc+0x66>
 800d4be:	bf00      	nop
 800d4c0:	0800f1a0 	.word	0x0800f1a0
 800d4c4:	0800f450 	.word	0x0800f450

0800d4c8 <_Bfree>:
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	460c      	mov	r4, r1
 800d4d0:	b976      	cbnz	r6, 800d4f0 <_Bfree+0x28>
 800d4d2:	2010      	movs	r0, #16
 800d4d4:	f7ff ff9e 	bl	800d414 <malloc>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	6268      	str	r0, [r5, #36]	; 0x24
 800d4dc:	b920      	cbnz	r0, 800d4e8 <_Bfree+0x20>
 800d4de:	4b09      	ldr	r3, [pc, #36]	; (800d504 <_Bfree+0x3c>)
 800d4e0:	4809      	ldr	r0, [pc, #36]	; (800d508 <_Bfree+0x40>)
 800d4e2:	218a      	movs	r1, #138	; 0x8a
 800d4e4:	f7fe fd7a 	bl	800bfdc <__assert_func>
 800d4e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4ec:	6006      	str	r6, [r0, #0]
 800d4ee:	60c6      	str	r6, [r0, #12]
 800d4f0:	b13c      	cbz	r4, 800d502 <_Bfree+0x3a>
 800d4f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4f4:	6862      	ldr	r2, [r4, #4]
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4fc:	6021      	str	r1, [r4, #0]
 800d4fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d502:	bd70      	pop	{r4, r5, r6, pc}
 800d504:	0800f1a0 	.word	0x0800f1a0
 800d508:	0800f450 	.word	0x0800f450

0800d50c <__multadd>:
 800d50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d510:	690e      	ldr	r6, [r1, #16]
 800d512:	4607      	mov	r7, r0
 800d514:	4698      	mov	r8, r3
 800d516:	460c      	mov	r4, r1
 800d518:	f101 0014 	add.w	r0, r1, #20
 800d51c:	2300      	movs	r3, #0
 800d51e:	6805      	ldr	r5, [r0, #0]
 800d520:	b2a9      	uxth	r1, r5
 800d522:	fb02 8101 	mla	r1, r2, r1, r8
 800d526:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d52a:	0c2d      	lsrs	r5, r5, #16
 800d52c:	fb02 c505 	mla	r5, r2, r5, ip
 800d530:	b289      	uxth	r1, r1
 800d532:	3301      	adds	r3, #1
 800d534:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d538:	429e      	cmp	r6, r3
 800d53a:	f840 1b04 	str.w	r1, [r0], #4
 800d53e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d542:	dcec      	bgt.n	800d51e <__multadd+0x12>
 800d544:	f1b8 0f00 	cmp.w	r8, #0
 800d548:	d022      	beq.n	800d590 <__multadd+0x84>
 800d54a:	68a3      	ldr	r3, [r4, #8]
 800d54c:	42b3      	cmp	r3, r6
 800d54e:	dc19      	bgt.n	800d584 <__multadd+0x78>
 800d550:	6861      	ldr	r1, [r4, #4]
 800d552:	4638      	mov	r0, r7
 800d554:	3101      	adds	r1, #1
 800d556:	f7ff ff77 	bl	800d448 <_Balloc>
 800d55a:	4605      	mov	r5, r0
 800d55c:	b928      	cbnz	r0, 800d56a <__multadd+0x5e>
 800d55e:	4602      	mov	r2, r0
 800d560:	4b0d      	ldr	r3, [pc, #52]	; (800d598 <__multadd+0x8c>)
 800d562:	480e      	ldr	r0, [pc, #56]	; (800d59c <__multadd+0x90>)
 800d564:	21b5      	movs	r1, #181	; 0xb5
 800d566:	f7fe fd39 	bl	800bfdc <__assert_func>
 800d56a:	6922      	ldr	r2, [r4, #16]
 800d56c:	3202      	adds	r2, #2
 800d56e:	f104 010c 	add.w	r1, r4, #12
 800d572:	0092      	lsls	r2, r2, #2
 800d574:	300c      	adds	r0, #12
 800d576:	f7fc ff13 	bl	800a3a0 <memcpy>
 800d57a:	4621      	mov	r1, r4
 800d57c:	4638      	mov	r0, r7
 800d57e:	f7ff ffa3 	bl	800d4c8 <_Bfree>
 800d582:	462c      	mov	r4, r5
 800d584:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d588:	3601      	adds	r6, #1
 800d58a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d58e:	6126      	str	r6, [r4, #16]
 800d590:	4620      	mov	r0, r4
 800d592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d596:	bf00      	nop
 800d598:	0800f3c1 	.word	0x0800f3c1
 800d59c:	0800f450 	.word	0x0800f450

0800d5a0 <__s2b>:
 800d5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	4615      	mov	r5, r2
 800d5a8:	461f      	mov	r7, r3
 800d5aa:	2209      	movs	r2, #9
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	db09      	blt.n	800d5d0 <__s2b+0x30>
 800d5bc:	4630      	mov	r0, r6
 800d5be:	f7ff ff43 	bl	800d448 <_Balloc>
 800d5c2:	b940      	cbnz	r0, 800d5d6 <__s2b+0x36>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	4b19      	ldr	r3, [pc, #100]	; (800d62c <__s2b+0x8c>)
 800d5c8:	4819      	ldr	r0, [pc, #100]	; (800d630 <__s2b+0x90>)
 800d5ca:	21ce      	movs	r1, #206	; 0xce
 800d5cc:	f7fe fd06 	bl	800bfdc <__assert_func>
 800d5d0:	0052      	lsls	r2, r2, #1
 800d5d2:	3101      	adds	r1, #1
 800d5d4:	e7f0      	b.n	800d5b8 <__s2b+0x18>
 800d5d6:	9b08      	ldr	r3, [sp, #32]
 800d5d8:	6143      	str	r3, [r0, #20]
 800d5da:	2d09      	cmp	r5, #9
 800d5dc:	f04f 0301 	mov.w	r3, #1
 800d5e0:	6103      	str	r3, [r0, #16]
 800d5e2:	dd16      	ble.n	800d612 <__s2b+0x72>
 800d5e4:	f104 0909 	add.w	r9, r4, #9
 800d5e8:	46c8      	mov	r8, r9
 800d5ea:	442c      	add	r4, r5
 800d5ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d5f0:	4601      	mov	r1, r0
 800d5f2:	3b30      	subs	r3, #48	; 0x30
 800d5f4:	220a      	movs	r2, #10
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f7ff ff88 	bl	800d50c <__multadd>
 800d5fc:	45a0      	cmp	r8, r4
 800d5fe:	d1f5      	bne.n	800d5ec <__s2b+0x4c>
 800d600:	f1a5 0408 	sub.w	r4, r5, #8
 800d604:	444c      	add	r4, r9
 800d606:	1b2d      	subs	r5, r5, r4
 800d608:	1963      	adds	r3, r4, r5
 800d60a:	42bb      	cmp	r3, r7
 800d60c:	db04      	blt.n	800d618 <__s2b+0x78>
 800d60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d612:	340a      	adds	r4, #10
 800d614:	2509      	movs	r5, #9
 800d616:	e7f6      	b.n	800d606 <__s2b+0x66>
 800d618:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d61c:	4601      	mov	r1, r0
 800d61e:	3b30      	subs	r3, #48	; 0x30
 800d620:	220a      	movs	r2, #10
 800d622:	4630      	mov	r0, r6
 800d624:	f7ff ff72 	bl	800d50c <__multadd>
 800d628:	e7ee      	b.n	800d608 <__s2b+0x68>
 800d62a:	bf00      	nop
 800d62c:	0800f3c1 	.word	0x0800f3c1
 800d630:	0800f450 	.word	0x0800f450

0800d634 <__hi0bits>:
 800d634:	0c03      	lsrs	r3, r0, #16
 800d636:	041b      	lsls	r3, r3, #16
 800d638:	b9d3      	cbnz	r3, 800d670 <__hi0bits+0x3c>
 800d63a:	0400      	lsls	r0, r0, #16
 800d63c:	2310      	movs	r3, #16
 800d63e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d642:	bf04      	itt	eq
 800d644:	0200      	lsleq	r0, r0, #8
 800d646:	3308      	addeq	r3, #8
 800d648:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d64c:	bf04      	itt	eq
 800d64e:	0100      	lsleq	r0, r0, #4
 800d650:	3304      	addeq	r3, #4
 800d652:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d656:	bf04      	itt	eq
 800d658:	0080      	lsleq	r0, r0, #2
 800d65a:	3302      	addeq	r3, #2
 800d65c:	2800      	cmp	r0, #0
 800d65e:	db05      	blt.n	800d66c <__hi0bits+0x38>
 800d660:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d664:	f103 0301 	add.w	r3, r3, #1
 800d668:	bf08      	it	eq
 800d66a:	2320      	moveq	r3, #32
 800d66c:	4618      	mov	r0, r3
 800d66e:	4770      	bx	lr
 800d670:	2300      	movs	r3, #0
 800d672:	e7e4      	b.n	800d63e <__hi0bits+0xa>

0800d674 <__lo0bits>:
 800d674:	6803      	ldr	r3, [r0, #0]
 800d676:	f013 0207 	ands.w	r2, r3, #7
 800d67a:	4601      	mov	r1, r0
 800d67c:	d00b      	beq.n	800d696 <__lo0bits+0x22>
 800d67e:	07da      	lsls	r2, r3, #31
 800d680:	d424      	bmi.n	800d6cc <__lo0bits+0x58>
 800d682:	0798      	lsls	r0, r3, #30
 800d684:	bf49      	itett	mi
 800d686:	085b      	lsrmi	r3, r3, #1
 800d688:	089b      	lsrpl	r3, r3, #2
 800d68a:	2001      	movmi	r0, #1
 800d68c:	600b      	strmi	r3, [r1, #0]
 800d68e:	bf5c      	itt	pl
 800d690:	600b      	strpl	r3, [r1, #0]
 800d692:	2002      	movpl	r0, #2
 800d694:	4770      	bx	lr
 800d696:	b298      	uxth	r0, r3
 800d698:	b9b0      	cbnz	r0, 800d6c8 <__lo0bits+0x54>
 800d69a:	0c1b      	lsrs	r3, r3, #16
 800d69c:	2010      	movs	r0, #16
 800d69e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d6a2:	bf04      	itt	eq
 800d6a4:	0a1b      	lsreq	r3, r3, #8
 800d6a6:	3008      	addeq	r0, #8
 800d6a8:	071a      	lsls	r2, r3, #28
 800d6aa:	bf04      	itt	eq
 800d6ac:	091b      	lsreq	r3, r3, #4
 800d6ae:	3004      	addeq	r0, #4
 800d6b0:	079a      	lsls	r2, r3, #30
 800d6b2:	bf04      	itt	eq
 800d6b4:	089b      	lsreq	r3, r3, #2
 800d6b6:	3002      	addeq	r0, #2
 800d6b8:	07da      	lsls	r2, r3, #31
 800d6ba:	d403      	bmi.n	800d6c4 <__lo0bits+0x50>
 800d6bc:	085b      	lsrs	r3, r3, #1
 800d6be:	f100 0001 	add.w	r0, r0, #1
 800d6c2:	d005      	beq.n	800d6d0 <__lo0bits+0x5c>
 800d6c4:	600b      	str	r3, [r1, #0]
 800d6c6:	4770      	bx	lr
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	e7e8      	b.n	800d69e <__lo0bits+0x2a>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	4770      	bx	lr
 800d6d0:	2020      	movs	r0, #32
 800d6d2:	4770      	bx	lr

0800d6d4 <__i2b>:
 800d6d4:	b510      	push	{r4, lr}
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	2101      	movs	r1, #1
 800d6da:	f7ff feb5 	bl	800d448 <_Balloc>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	b928      	cbnz	r0, 800d6ee <__i2b+0x1a>
 800d6e2:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <__i2b+0x24>)
 800d6e4:	4805      	ldr	r0, [pc, #20]	; (800d6fc <__i2b+0x28>)
 800d6e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d6ea:	f7fe fc77 	bl	800bfdc <__assert_func>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	6144      	str	r4, [r0, #20]
 800d6f2:	6103      	str	r3, [r0, #16]
 800d6f4:	bd10      	pop	{r4, pc}
 800d6f6:	bf00      	nop
 800d6f8:	0800f3c1 	.word	0x0800f3c1
 800d6fc:	0800f450 	.word	0x0800f450

0800d700 <__multiply>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	4614      	mov	r4, r2
 800d706:	690a      	ldr	r2, [r1, #16]
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	bfb8      	it	lt
 800d70e:	460b      	movlt	r3, r1
 800d710:	460d      	mov	r5, r1
 800d712:	bfbc      	itt	lt
 800d714:	4625      	movlt	r5, r4
 800d716:	461c      	movlt	r4, r3
 800d718:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d71c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d720:	68ab      	ldr	r3, [r5, #8]
 800d722:	6869      	ldr	r1, [r5, #4]
 800d724:	eb0a 0709 	add.w	r7, sl, r9
 800d728:	42bb      	cmp	r3, r7
 800d72a:	b085      	sub	sp, #20
 800d72c:	bfb8      	it	lt
 800d72e:	3101      	addlt	r1, #1
 800d730:	f7ff fe8a 	bl	800d448 <_Balloc>
 800d734:	b930      	cbnz	r0, 800d744 <__multiply+0x44>
 800d736:	4602      	mov	r2, r0
 800d738:	4b42      	ldr	r3, [pc, #264]	; (800d844 <__multiply+0x144>)
 800d73a:	4843      	ldr	r0, [pc, #268]	; (800d848 <__multiply+0x148>)
 800d73c:	f240 115d 	movw	r1, #349	; 0x15d
 800d740:	f7fe fc4c 	bl	800bfdc <__assert_func>
 800d744:	f100 0614 	add.w	r6, r0, #20
 800d748:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d74c:	4633      	mov	r3, r6
 800d74e:	2200      	movs	r2, #0
 800d750:	4543      	cmp	r3, r8
 800d752:	d31e      	bcc.n	800d792 <__multiply+0x92>
 800d754:	f105 0c14 	add.w	ip, r5, #20
 800d758:	f104 0314 	add.w	r3, r4, #20
 800d75c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d760:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d764:	9202      	str	r2, [sp, #8]
 800d766:	ebac 0205 	sub.w	r2, ip, r5
 800d76a:	3a15      	subs	r2, #21
 800d76c:	f022 0203 	bic.w	r2, r2, #3
 800d770:	3204      	adds	r2, #4
 800d772:	f105 0115 	add.w	r1, r5, #21
 800d776:	458c      	cmp	ip, r1
 800d778:	bf38      	it	cc
 800d77a:	2204      	movcc	r2, #4
 800d77c:	9201      	str	r2, [sp, #4]
 800d77e:	9a02      	ldr	r2, [sp, #8]
 800d780:	9303      	str	r3, [sp, #12]
 800d782:	429a      	cmp	r2, r3
 800d784:	d808      	bhi.n	800d798 <__multiply+0x98>
 800d786:	2f00      	cmp	r7, #0
 800d788:	dc55      	bgt.n	800d836 <__multiply+0x136>
 800d78a:	6107      	str	r7, [r0, #16]
 800d78c:	b005      	add	sp, #20
 800d78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d792:	f843 2b04 	str.w	r2, [r3], #4
 800d796:	e7db      	b.n	800d750 <__multiply+0x50>
 800d798:	f8b3 a000 	ldrh.w	sl, [r3]
 800d79c:	f1ba 0f00 	cmp.w	sl, #0
 800d7a0:	d020      	beq.n	800d7e4 <__multiply+0xe4>
 800d7a2:	f105 0e14 	add.w	lr, r5, #20
 800d7a6:	46b1      	mov	r9, r6
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d7ae:	f8d9 b000 	ldr.w	fp, [r9]
 800d7b2:	b2a1      	uxth	r1, r4
 800d7b4:	fa1f fb8b 	uxth.w	fp, fp
 800d7b8:	fb0a b101 	mla	r1, sl, r1, fp
 800d7bc:	4411      	add	r1, r2
 800d7be:	f8d9 2000 	ldr.w	r2, [r9]
 800d7c2:	0c24      	lsrs	r4, r4, #16
 800d7c4:	0c12      	lsrs	r2, r2, #16
 800d7c6:	fb0a 2404 	mla	r4, sl, r4, r2
 800d7ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d7ce:	b289      	uxth	r1, r1
 800d7d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d7d4:	45f4      	cmp	ip, lr
 800d7d6:	f849 1b04 	str.w	r1, [r9], #4
 800d7da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d7de:	d8e4      	bhi.n	800d7aa <__multiply+0xaa>
 800d7e0:	9901      	ldr	r1, [sp, #4]
 800d7e2:	5072      	str	r2, [r6, r1]
 800d7e4:	9a03      	ldr	r2, [sp, #12]
 800d7e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	f1b9 0f00 	cmp.w	r9, #0
 800d7f0:	d01f      	beq.n	800d832 <__multiply+0x132>
 800d7f2:	6834      	ldr	r4, [r6, #0]
 800d7f4:	f105 0114 	add.w	r1, r5, #20
 800d7f8:	46b6      	mov	lr, r6
 800d7fa:	f04f 0a00 	mov.w	sl, #0
 800d7fe:	880a      	ldrh	r2, [r1, #0]
 800d800:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d804:	fb09 b202 	mla	r2, r9, r2, fp
 800d808:	4492      	add	sl, r2
 800d80a:	b2a4      	uxth	r4, r4
 800d80c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d810:	f84e 4b04 	str.w	r4, [lr], #4
 800d814:	f851 4b04 	ldr.w	r4, [r1], #4
 800d818:	f8be 2000 	ldrh.w	r2, [lr]
 800d81c:	0c24      	lsrs	r4, r4, #16
 800d81e:	fb09 2404 	mla	r4, r9, r4, r2
 800d822:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d826:	458c      	cmp	ip, r1
 800d828:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d82c:	d8e7      	bhi.n	800d7fe <__multiply+0xfe>
 800d82e:	9a01      	ldr	r2, [sp, #4]
 800d830:	50b4      	str	r4, [r6, r2]
 800d832:	3604      	adds	r6, #4
 800d834:	e7a3      	b.n	800d77e <__multiply+0x7e>
 800d836:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1a5      	bne.n	800d78a <__multiply+0x8a>
 800d83e:	3f01      	subs	r7, #1
 800d840:	e7a1      	b.n	800d786 <__multiply+0x86>
 800d842:	bf00      	nop
 800d844:	0800f3c1 	.word	0x0800f3c1
 800d848:	0800f450 	.word	0x0800f450

0800d84c <__pow5mult>:
 800d84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d850:	4615      	mov	r5, r2
 800d852:	f012 0203 	ands.w	r2, r2, #3
 800d856:	4606      	mov	r6, r0
 800d858:	460f      	mov	r7, r1
 800d85a:	d007      	beq.n	800d86c <__pow5mult+0x20>
 800d85c:	4c25      	ldr	r4, [pc, #148]	; (800d8f4 <__pow5mult+0xa8>)
 800d85e:	3a01      	subs	r2, #1
 800d860:	2300      	movs	r3, #0
 800d862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d866:	f7ff fe51 	bl	800d50c <__multadd>
 800d86a:	4607      	mov	r7, r0
 800d86c:	10ad      	asrs	r5, r5, #2
 800d86e:	d03d      	beq.n	800d8ec <__pow5mult+0xa0>
 800d870:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d872:	b97c      	cbnz	r4, 800d894 <__pow5mult+0x48>
 800d874:	2010      	movs	r0, #16
 800d876:	f7ff fdcd 	bl	800d414 <malloc>
 800d87a:	4602      	mov	r2, r0
 800d87c:	6270      	str	r0, [r6, #36]	; 0x24
 800d87e:	b928      	cbnz	r0, 800d88c <__pow5mult+0x40>
 800d880:	4b1d      	ldr	r3, [pc, #116]	; (800d8f8 <__pow5mult+0xac>)
 800d882:	481e      	ldr	r0, [pc, #120]	; (800d8fc <__pow5mult+0xb0>)
 800d884:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d888:	f7fe fba8 	bl	800bfdc <__assert_func>
 800d88c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d890:	6004      	str	r4, [r0, #0]
 800d892:	60c4      	str	r4, [r0, #12]
 800d894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d89c:	b94c      	cbnz	r4, 800d8b2 <__pow5mult+0x66>
 800d89e:	f240 2171 	movw	r1, #625	; 0x271
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7ff ff16 	bl	800d6d4 <__i2b>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	6003      	str	r3, [r0, #0]
 800d8b2:	f04f 0900 	mov.w	r9, #0
 800d8b6:	07eb      	lsls	r3, r5, #31
 800d8b8:	d50a      	bpl.n	800d8d0 <__pow5mult+0x84>
 800d8ba:	4639      	mov	r1, r7
 800d8bc:	4622      	mov	r2, r4
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f7ff ff1e 	bl	800d700 <__multiply>
 800d8c4:	4639      	mov	r1, r7
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f7ff fdfd 	bl	800d4c8 <_Bfree>
 800d8ce:	4647      	mov	r7, r8
 800d8d0:	106d      	asrs	r5, r5, #1
 800d8d2:	d00b      	beq.n	800d8ec <__pow5mult+0xa0>
 800d8d4:	6820      	ldr	r0, [r4, #0]
 800d8d6:	b938      	cbnz	r0, 800d8e8 <__pow5mult+0x9c>
 800d8d8:	4622      	mov	r2, r4
 800d8da:	4621      	mov	r1, r4
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f7ff ff0f 	bl	800d700 <__multiply>
 800d8e2:	6020      	str	r0, [r4, #0]
 800d8e4:	f8c0 9000 	str.w	r9, [r0]
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	e7e4      	b.n	800d8b6 <__pow5mult+0x6a>
 800d8ec:	4638      	mov	r0, r7
 800d8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8f2:	bf00      	nop
 800d8f4:	0800f5a0 	.word	0x0800f5a0
 800d8f8:	0800f1a0 	.word	0x0800f1a0
 800d8fc:	0800f450 	.word	0x0800f450

0800d900 <__lshift>:
 800d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d904:	460c      	mov	r4, r1
 800d906:	6849      	ldr	r1, [r1, #4]
 800d908:	6923      	ldr	r3, [r4, #16]
 800d90a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d90e:	68a3      	ldr	r3, [r4, #8]
 800d910:	4607      	mov	r7, r0
 800d912:	4691      	mov	r9, r2
 800d914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d918:	f108 0601 	add.w	r6, r8, #1
 800d91c:	42b3      	cmp	r3, r6
 800d91e:	db0b      	blt.n	800d938 <__lshift+0x38>
 800d920:	4638      	mov	r0, r7
 800d922:	f7ff fd91 	bl	800d448 <_Balloc>
 800d926:	4605      	mov	r5, r0
 800d928:	b948      	cbnz	r0, 800d93e <__lshift+0x3e>
 800d92a:	4602      	mov	r2, r0
 800d92c:	4b28      	ldr	r3, [pc, #160]	; (800d9d0 <__lshift+0xd0>)
 800d92e:	4829      	ldr	r0, [pc, #164]	; (800d9d4 <__lshift+0xd4>)
 800d930:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d934:	f7fe fb52 	bl	800bfdc <__assert_func>
 800d938:	3101      	adds	r1, #1
 800d93a:	005b      	lsls	r3, r3, #1
 800d93c:	e7ee      	b.n	800d91c <__lshift+0x1c>
 800d93e:	2300      	movs	r3, #0
 800d940:	f100 0114 	add.w	r1, r0, #20
 800d944:	f100 0210 	add.w	r2, r0, #16
 800d948:	4618      	mov	r0, r3
 800d94a:	4553      	cmp	r3, sl
 800d94c:	db33      	blt.n	800d9b6 <__lshift+0xb6>
 800d94e:	6920      	ldr	r0, [r4, #16]
 800d950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d954:	f104 0314 	add.w	r3, r4, #20
 800d958:	f019 091f 	ands.w	r9, r9, #31
 800d95c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d960:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d964:	d02b      	beq.n	800d9be <__lshift+0xbe>
 800d966:	f1c9 0e20 	rsb	lr, r9, #32
 800d96a:	468a      	mov	sl, r1
 800d96c:	2200      	movs	r2, #0
 800d96e:	6818      	ldr	r0, [r3, #0]
 800d970:	fa00 f009 	lsl.w	r0, r0, r9
 800d974:	4302      	orrs	r2, r0
 800d976:	f84a 2b04 	str.w	r2, [sl], #4
 800d97a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d97e:	459c      	cmp	ip, r3
 800d980:	fa22 f20e 	lsr.w	r2, r2, lr
 800d984:	d8f3      	bhi.n	800d96e <__lshift+0x6e>
 800d986:	ebac 0304 	sub.w	r3, ip, r4
 800d98a:	3b15      	subs	r3, #21
 800d98c:	f023 0303 	bic.w	r3, r3, #3
 800d990:	3304      	adds	r3, #4
 800d992:	f104 0015 	add.w	r0, r4, #21
 800d996:	4584      	cmp	ip, r0
 800d998:	bf38      	it	cc
 800d99a:	2304      	movcc	r3, #4
 800d99c:	50ca      	str	r2, [r1, r3]
 800d99e:	b10a      	cbz	r2, 800d9a4 <__lshift+0xa4>
 800d9a0:	f108 0602 	add.w	r6, r8, #2
 800d9a4:	3e01      	subs	r6, #1
 800d9a6:	4638      	mov	r0, r7
 800d9a8:	612e      	str	r6, [r5, #16]
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	f7ff fd8c 	bl	800d4c8 <_Bfree>
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	e7c5      	b.n	800d94a <__lshift+0x4a>
 800d9be:	3904      	subs	r1, #4
 800d9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9c8:	459c      	cmp	ip, r3
 800d9ca:	d8f9      	bhi.n	800d9c0 <__lshift+0xc0>
 800d9cc:	e7ea      	b.n	800d9a4 <__lshift+0xa4>
 800d9ce:	bf00      	nop
 800d9d0:	0800f3c1 	.word	0x0800f3c1
 800d9d4:	0800f450 	.word	0x0800f450

0800d9d8 <__mcmp>:
 800d9d8:	b530      	push	{r4, r5, lr}
 800d9da:	6902      	ldr	r2, [r0, #16]
 800d9dc:	690c      	ldr	r4, [r1, #16]
 800d9de:	1b12      	subs	r2, r2, r4
 800d9e0:	d10e      	bne.n	800da00 <__mcmp+0x28>
 800d9e2:	f100 0314 	add.w	r3, r0, #20
 800d9e6:	3114      	adds	r1, #20
 800d9e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d9ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d9f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d9f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d9f8:	42a5      	cmp	r5, r4
 800d9fa:	d003      	beq.n	800da04 <__mcmp+0x2c>
 800d9fc:	d305      	bcc.n	800da0a <__mcmp+0x32>
 800d9fe:	2201      	movs	r2, #1
 800da00:	4610      	mov	r0, r2
 800da02:	bd30      	pop	{r4, r5, pc}
 800da04:	4283      	cmp	r3, r0
 800da06:	d3f3      	bcc.n	800d9f0 <__mcmp+0x18>
 800da08:	e7fa      	b.n	800da00 <__mcmp+0x28>
 800da0a:	f04f 32ff 	mov.w	r2, #4294967295
 800da0e:	e7f7      	b.n	800da00 <__mcmp+0x28>

0800da10 <__mdiff>:
 800da10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	460c      	mov	r4, r1
 800da16:	4606      	mov	r6, r0
 800da18:	4611      	mov	r1, r2
 800da1a:	4620      	mov	r0, r4
 800da1c:	4617      	mov	r7, r2
 800da1e:	f7ff ffdb 	bl	800d9d8 <__mcmp>
 800da22:	1e05      	subs	r5, r0, #0
 800da24:	d110      	bne.n	800da48 <__mdiff+0x38>
 800da26:	4629      	mov	r1, r5
 800da28:	4630      	mov	r0, r6
 800da2a:	f7ff fd0d 	bl	800d448 <_Balloc>
 800da2e:	b930      	cbnz	r0, 800da3e <__mdiff+0x2e>
 800da30:	4b39      	ldr	r3, [pc, #228]	; (800db18 <__mdiff+0x108>)
 800da32:	4602      	mov	r2, r0
 800da34:	f240 2132 	movw	r1, #562	; 0x232
 800da38:	4838      	ldr	r0, [pc, #224]	; (800db1c <__mdiff+0x10c>)
 800da3a:	f7fe facf 	bl	800bfdc <__assert_func>
 800da3e:	2301      	movs	r3, #1
 800da40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da48:	bfa4      	itt	ge
 800da4a:	463b      	movge	r3, r7
 800da4c:	4627      	movge	r7, r4
 800da4e:	4630      	mov	r0, r6
 800da50:	6879      	ldr	r1, [r7, #4]
 800da52:	bfa6      	itte	ge
 800da54:	461c      	movge	r4, r3
 800da56:	2500      	movge	r5, #0
 800da58:	2501      	movlt	r5, #1
 800da5a:	f7ff fcf5 	bl	800d448 <_Balloc>
 800da5e:	b920      	cbnz	r0, 800da6a <__mdiff+0x5a>
 800da60:	4b2d      	ldr	r3, [pc, #180]	; (800db18 <__mdiff+0x108>)
 800da62:	4602      	mov	r2, r0
 800da64:	f44f 7110 	mov.w	r1, #576	; 0x240
 800da68:	e7e6      	b.n	800da38 <__mdiff+0x28>
 800da6a:	693e      	ldr	r6, [r7, #16]
 800da6c:	60c5      	str	r5, [r0, #12]
 800da6e:	6925      	ldr	r5, [r4, #16]
 800da70:	f107 0114 	add.w	r1, r7, #20
 800da74:	f104 0914 	add.w	r9, r4, #20
 800da78:	f100 0e14 	add.w	lr, r0, #20
 800da7c:	f107 0210 	add.w	r2, r7, #16
 800da80:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800da84:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800da88:	46f2      	mov	sl, lr
 800da8a:	2700      	movs	r7, #0
 800da8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800da90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da94:	fa1f f883 	uxth.w	r8, r3
 800da98:	fa17 f78b 	uxtah	r7, r7, fp
 800da9c:	0c1b      	lsrs	r3, r3, #16
 800da9e:	eba7 0808 	sub.w	r8, r7, r8
 800daa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800daa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800daaa:	fa1f f888 	uxth.w	r8, r8
 800daae:	141f      	asrs	r7, r3, #16
 800dab0:	454d      	cmp	r5, r9
 800dab2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dab6:	f84a 3b04 	str.w	r3, [sl], #4
 800daba:	d8e7      	bhi.n	800da8c <__mdiff+0x7c>
 800dabc:	1b2b      	subs	r3, r5, r4
 800dabe:	3b15      	subs	r3, #21
 800dac0:	f023 0303 	bic.w	r3, r3, #3
 800dac4:	3304      	adds	r3, #4
 800dac6:	3415      	adds	r4, #21
 800dac8:	42a5      	cmp	r5, r4
 800daca:	bf38      	it	cc
 800dacc:	2304      	movcc	r3, #4
 800dace:	4419      	add	r1, r3
 800dad0:	4473      	add	r3, lr
 800dad2:	469e      	mov	lr, r3
 800dad4:	460d      	mov	r5, r1
 800dad6:	4565      	cmp	r5, ip
 800dad8:	d30e      	bcc.n	800daf8 <__mdiff+0xe8>
 800dada:	f10c 0203 	add.w	r2, ip, #3
 800dade:	1a52      	subs	r2, r2, r1
 800dae0:	f022 0203 	bic.w	r2, r2, #3
 800dae4:	3903      	subs	r1, #3
 800dae6:	458c      	cmp	ip, r1
 800dae8:	bf38      	it	cc
 800daea:	2200      	movcc	r2, #0
 800daec:	441a      	add	r2, r3
 800daee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800daf2:	b17b      	cbz	r3, 800db14 <__mdiff+0x104>
 800daf4:	6106      	str	r6, [r0, #16]
 800daf6:	e7a5      	b.n	800da44 <__mdiff+0x34>
 800daf8:	f855 8b04 	ldr.w	r8, [r5], #4
 800dafc:	fa17 f488 	uxtah	r4, r7, r8
 800db00:	1422      	asrs	r2, r4, #16
 800db02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800db06:	b2a4      	uxth	r4, r4
 800db08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800db0c:	f84e 4b04 	str.w	r4, [lr], #4
 800db10:	1417      	asrs	r7, r2, #16
 800db12:	e7e0      	b.n	800dad6 <__mdiff+0xc6>
 800db14:	3e01      	subs	r6, #1
 800db16:	e7ea      	b.n	800daee <__mdiff+0xde>
 800db18:	0800f3c1 	.word	0x0800f3c1
 800db1c:	0800f450 	.word	0x0800f450

0800db20 <__ulp>:
 800db20:	b082      	sub	sp, #8
 800db22:	ed8d 0b00 	vstr	d0, [sp]
 800db26:	9b01      	ldr	r3, [sp, #4]
 800db28:	4912      	ldr	r1, [pc, #72]	; (800db74 <__ulp+0x54>)
 800db2a:	4019      	ands	r1, r3
 800db2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800db30:	2900      	cmp	r1, #0
 800db32:	dd05      	ble.n	800db40 <__ulp+0x20>
 800db34:	2200      	movs	r2, #0
 800db36:	460b      	mov	r3, r1
 800db38:	ec43 2b10 	vmov	d0, r2, r3
 800db3c:	b002      	add	sp, #8
 800db3e:	4770      	bx	lr
 800db40:	4249      	negs	r1, r1
 800db42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800db46:	ea4f 5021 	mov.w	r0, r1, asr #20
 800db4a:	f04f 0200 	mov.w	r2, #0
 800db4e:	f04f 0300 	mov.w	r3, #0
 800db52:	da04      	bge.n	800db5e <__ulp+0x3e>
 800db54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800db58:	fa41 f300 	asr.w	r3, r1, r0
 800db5c:	e7ec      	b.n	800db38 <__ulp+0x18>
 800db5e:	f1a0 0114 	sub.w	r1, r0, #20
 800db62:	291e      	cmp	r1, #30
 800db64:	bfda      	itte	le
 800db66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800db6a:	fa20 f101 	lsrle.w	r1, r0, r1
 800db6e:	2101      	movgt	r1, #1
 800db70:	460a      	mov	r2, r1
 800db72:	e7e1      	b.n	800db38 <__ulp+0x18>
 800db74:	7ff00000 	.word	0x7ff00000

0800db78 <__b2d>:
 800db78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db7a:	6905      	ldr	r5, [r0, #16]
 800db7c:	f100 0714 	add.w	r7, r0, #20
 800db80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800db84:	1f2e      	subs	r6, r5, #4
 800db86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800db8a:	4620      	mov	r0, r4
 800db8c:	f7ff fd52 	bl	800d634 <__hi0bits>
 800db90:	f1c0 0320 	rsb	r3, r0, #32
 800db94:	280a      	cmp	r0, #10
 800db96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dc14 <__b2d+0x9c>
 800db9a:	600b      	str	r3, [r1, #0]
 800db9c:	dc14      	bgt.n	800dbc8 <__b2d+0x50>
 800db9e:	f1c0 0e0b 	rsb	lr, r0, #11
 800dba2:	fa24 f10e 	lsr.w	r1, r4, lr
 800dba6:	42b7      	cmp	r7, r6
 800dba8:	ea41 030c 	orr.w	r3, r1, ip
 800dbac:	bf34      	ite	cc
 800dbae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dbb2:	2100      	movcs	r1, #0
 800dbb4:	3015      	adds	r0, #21
 800dbb6:	fa04 f000 	lsl.w	r0, r4, r0
 800dbba:	fa21 f10e 	lsr.w	r1, r1, lr
 800dbbe:	ea40 0201 	orr.w	r2, r0, r1
 800dbc2:	ec43 2b10 	vmov	d0, r2, r3
 800dbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbc8:	42b7      	cmp	r7, r6
 800dbca:	bf3a      	itte	cc
 800dbcc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dbd0:	f1a5 0608 	subcc.w	r6, r5, #8
 800dbd4:	2100      	movcs	r1, #0
 800dbd6:	380b      	subs	r0, #11
 800dbd8:	d017      	beq.n	800dc0a <__b2d+0x92>
 800dbda:	f1c0 0c20 	rsb	ip, r0, #32
 800dbde:	fa04 f500 	lsl.w	r5, r4, r0
 800dbe2:	42be      	cmp	r6, r7
 800dbe4:	fa21 f40c 	lsr.w	r4, r1, ip
 800dbe8:	ea45 0504 	orr.w	r5, r5, r4
 800dbec:	bf8c      	ite	hi
 800dbee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dbf2:	2400      	movls	r4, #0
 800dbf4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dbf8:	fa01 f000 	lsl.w	r0, r1, r0
 800dbfc:	fa24 f40c 	lsr.w	r4, r4, ip
 800dc00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc04:	ea40 0204 	orr.w	r2, r0, r4
 800dc08:	e7db      	b.n	800dbc2 <__b2d+0x4a>
 800dc0a:	ea44 030c 	orr.w	r3, r4, ip
 800dc0e:	460a      	mov	r2, r1
 800dc10:	e7d7      	b.n	800dbc2 <__b2d+0x4a>
 800dc12:	bf00      	nop
 800dc14:	3ff00000 	.word	0x3ff00000

0800dc18 <__d2b>:
 800dc18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	4689      	mov	r9, r1
 800dc1e:	2101      	movs	r1, #1
 800dc20:	ec57 6b10 	vmov	r6, r7, d0
 800dc24:	4690      	mov	r8, r2
 800dc26:	f7ff fc0f 	bl	800d448 <_Balloc>
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	b930      	cbnz	r0, 800dc3c <__d2b+0x24>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	4b25      	ldr	r3, [pc, #148]	; (800dcc8 <__d2b+0xb0>)
 800dc32:	4826      	ldr	r0, [pc, #152]	; (800dccc <__d2b+0xb4>)
 800dc34:	f240 310a 	movw	r1, #778	; 0x30a
 800dc38:	f7fe f9d0 	bl	800bfdc <__assert_func>
 800dc3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dc40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc44:	bb35      	cbnz	r5, 800dc94 <__d2b+0x7c>
 800dc46:	2e00      	cmp	r6, #0
 800dc48:	9301      	str	r3, [sp, #4]
 800dc4a:	d028      	beq.n	800dc9e <__d2b+0x86>
 800dc4c:	4668      	mov	r0, sp
 800dc4e:	9600      	str	r6, [sp, #0]
 800dc50:	f7ff fd10 	bl	800d674 <__lo0bits>
 800dc54:	9900      	ldr	r1, [sp, #0]
 800dc56:	b300      	cbz	r0, 800dc9a <__d2b+0x82>
 800dc58:	9a01      	ldr	r2, [sp, #4]
 800dc5a:	f1c0 0320 	rsb	r3, r0, #32
 800dc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc62:	430b      	orrs	r3, r1
 800dc64:	40c2      	lsrs	r2, r0
 800dc66:	6163      	str	r3, [r4, #20]
 800dc68:	9201      	str	r2, [sp, #4]
 800dc6a:	9b01      	ldr	r3, [sp, #4]
 800dc6c:	61a3      	str	r3, [r4, #24]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bf14      	ite	ne
 800dc72:	2202      	movne	r2, #2
 800dc74:	2201      	moveq	r2, #1
 800dc76:	6122      	str	r2, [r4, #16]
 800dc78:	b1d5      	cbz	r5, 800dcb0 <__d2b+0x98>
 800dc7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc7e:	4405      	add	r5, r0
 800dc80:	f8c9 5000 	str.w	r5, [r9]
 800dc84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc88:	f8c8 0000 	str.w	r0, [r8]
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	b003      	add	sp, #12
 800dc90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc98:	e7d5      	b.n	800dc46 <__d2b+0x2e>
 800dc9a:	6161      	str	r1, [r4, #20]
 800dc9c:	e7e5      	b.n	800dc6a <__d2b+0x52>
 800dc9e:	a801      	add	r0, sp, #4
 800dca0:	f7ff fce8 	bl	800d674 <__lo0bits>
 800dca4:	9b01      	ldr	r3, [sp, #4]
 800dca6:	6163      	str	r3, [r4, #20]
 800dca8:	2201      	movs	r2, #1
 800dcaa:	6122      	str	r2, [r4, #16]
 800dcac:	3020      	adds	r0, #32
 800dcae:	e7e3      	b.n	800dc78 <__d2b+0x60>
 800dcb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dcb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dcb8:	f8c9 0000 	str.w	r0, [r9]
 800dcbc:	6918      	ldr	r0, [r3, #16]
 800dcbe:	f7ff fcb9 	bl	800d634 <__hi0bits>
 800dcc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dcc6:	e7df      	b.n	800dc88 <__d2b+0x70>
 800dcc8:	0800f3c1 	.word	0x0800f3c1
 800dccc:	0800f450 	.word	0x0800f450

0800dcd0 <__ratio>:
 800dcd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd4:	4688      	mov	r8, r1
 800dcd6:	4669      	mov	r1, sp
 800dcd8:	4681      	mov	r9, r0
 800dcda:	f7ff ff4d 	bl	800db78 <__b2d>
 800dcde:	a901      	add	r1, sp, #4
 800dce0:	4640      	mov	r0, r8
 800dce2:	ec55 4b10 	vmov	r4, r5, d0
 800dce6:	f7ff ff47 	bl	800db78 <__b2d>
 800dcea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dcf2:	eba3 0c02 	sub.w	ip, r3, r2
 800dcf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dcfa:	1a9b      	subs	r3, r3, r2
 800dcfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dd00:	ec51 0b10 	vmov	r0, r1, d0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	bfd6      	itet	le
 800dd08:	460a      	movle	r2, r1
 800dd0a:	462a      	movgt	r2, r5
 800dd0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd10:	468b      	mov	fp, r1
 800dd12:	462f      	mov	r7, r5
 800dd14:	bfd4      	ite	le
 800dd16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dd1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd1e:	4620      	mov	r0, r4
 800dd20:	ee10 2a10 	vmov	r2, s0
 800dd24:	465b      	mov	r3, fp
 800dd26:	4639      	mov	r1, r7
 800dd28:	f7f2 fd90 	bl	800084c <__aeabi_ddiv>
 800dd2c:	ec41 0b10 	vmov	d0, r0, r1
 800dd30:	b003      	add	sp, #12
 800dd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd36 <__copybits>:
 800dd36:	3901      	subs	r1, #1
 800dd38:	b570      	push	{r4, r5, r6, lr}
 800dd3a:	1149      	asrs	r1, r1, #5
 800dd3c:	6914      	ldr	r4, [r2, #16]
 800dd3e:	3101      	adds	r1, #1
 800dd40:	f102 0314 	add.w	r3, r2, #20
 800dd44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd4c:	1f05      	subs	r5, r0, #4
 800dd4e:	42a3      	cmp	r3, r4
 800dd50:	d30c      	bcc.n	800dd6c <__copybits+0x36>
 800dd52:	1aa3      	subs	r3, r4, r2
 800dd54:	3b11      	subs	r3, #17
 800dd56:	f023 0303 	bic.w	r3, r3, #3
 800dd5a:	3211      	adds	r2, #17
 800dd5c:	42a2      	cmp	r2, r4
 800dd5e:	bf88      	it	hi
 800dd60:	2300      	movhi	r3, #0
 800dd62:	4418      	add	r0, r3
 800dd64:	2300      	movs	r3, #0
 800dd66:	4288      	cmp	r0, r1
 800dd68:	d305      	bcc.n	800dd76 <__copybits+0x40>
 800dd6a:	bd70      	pop	{r4, r5, r6, pc}
 800dd6c:	f853 6b04 	ldr.w	r6, [r3], #4
 800dd70:	f845 6f04 	str.w	r6, [r5, #4]!
 800dd74:	e7eb      	b.n	800dd4e <__copybits+0x18>
 800dd76:	f840 3b04 	str.w	r3, [r0], #4
 800dd7a:	e7f4      	b.n	800dd66 <__copybits+0x30>

0800dd7c <__any_on>:
 800dd7c:	f100 0214 	add.w	r2, r0, #20
 800dd80:	6900      	ldr	r0, [r0, #16]
 800dd82:	114b      	asrs	r3, r1, #5
 800dd84:	4298      	cmp	r0, r3
 800dd86:	b510      	push	{r4, lr}
 800dd88:	db11      	blt.n	800ddae <__any_on+0x32>
 800dd8a:	dd0a      	ble.n	800dda2 <__any_on+0x26>
 800dd8c:	f011 011f 	ands.w	r1, r1, #31
 800dd90:	d007      	beq.n	800dda2 <__any_on+0x26>
 800dd92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dd96:	fa24 f001 	lsr.w	r0, r4, r1
 800dd9a:	fa00 f101 	lsl.w	r1, r0, r1
 800dd9e:	428c      	cmp	r4, r1
 800dda0:	d10b      	bne.n	800ddba <__any_on+0x3e>
 800dda2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d803      	bhi.n	800ddb2 <__any_on+0x36>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	bd10      	pop	{r4, pc}
 800ddae:	4603      	mov	r3, r0
 800ddb0:	e7f7      	b.n	800dda2 <__any_on+0x26>
 800ddb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ddb6:	2900      	cmp	r1, #0
 800ddb8:	d0f5      	beq.n	800dda6 <__any_on+0x2a>
 800ddba:	2001      	movs	r0, #1
 800ddbc:	e7f6      	b.n	800ddac <__any_on+0x30>

0800ddbe <_calloc_r>:
 800ddbe:	b513      	push	{r0, r1, r4, lr}
 800ddc0:	434a      	muls	r2, r1
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	9201      	str	r2, [sp, #4]
 800ddc6:	f000 f859 	bl	800de7c <_malloc_r>
 800ddca:	4604      	mov	r4, r0
 800ddcc:	b118      	cbz	r0, 800ddd6 <_calloc_r+0x18>
 800ddce:	9a01      	ldr	r2, [sp, #4]
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	f7fc faf3 	bl	800a3bc <memset>
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	b002      	add	sp, #8
 800ddda:	bd10      	pop	{r4, pc}

0800dddc <_free_r>:
 800dddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddde:	2900      	cmp	r1, #0
 800dde0:	d048      	beq.n	800de74 <_free_r+0x98>
 800dde2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde6:	9001      	str	r0, [sp, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f1a1 0404 	sub.w	r4, r1, #4
 800ddee:	bfb8      	it	lt
 800ddf0:	18e4      	addlt	r4, r4, r3
 800ddf2:	f000 fea9 	bl	800eb48 <__malloc_lock>
 800ddf6:	4a20      	ldr	r2, [pc, #128]	; (800de78 <_free_r+0x9c>)
 800ddf8:	9801      	ldr	r0, [sp, #4]
 800ddfa:	6813      	ldr	r3, [r2, #0]
 800ddfc:	4615      	mov	r5, r2
 800ddfe:	b933      	cbnz	r3, 800de0e <_free_r+0x32>
 800de00:	6063      	str	r3, [r4, #4]
 800de02:	6014      	str	r4, [r2, #0]
 800de04:	b003      	add	sp, #12
 800de06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de0a:	f000 bea3 	b.w	800eb54 <__malloc_unlock>
 800de0e:	42a3      	cmp	r3, r4
 800de10:	d90b      	bls.n	800de2a <_free_r+0x4e>
 800de12:	6821      	ldr	r1, [r4, #0]
 800de14:	1862      	adds	r2, r4, r1
 800de16:	4293      	cmp	r3, r2
 800de18:	bf04      	itt	eq
 800de1a:	681a      	ldreq	r2, [r3, #0]
 800de1c:	685b      	ldreq	r3, [r3, #4]
 800de1e:	6063      	str	r3, [r4, #4]
 800de20:	bf04      	itt	eq
 800de22:	1852      	addeq	r2, r2, r1
 800de24:	6022      	streq	r2, [r4, #0]
 800de26:	602c      	str	r4, [r5, #0]
 800de28:	e7ec      	b.n	800de04 <_free_r+0x28>
 800de2a:	461a      	mov	r2, r3
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	b10b      	cbz	r3, 800de34 <_free_r+0x58>
 800de30:	42a3      	cmp	r3, r4
 800de32:	d9fa      	bls.n	800de2a <_free_r+0x4e>
 800de34:	6811      	ldr	r1, [r2, #0]
 800de36:	1855      	adds	r5, r2, r1
 800de38:	42a5      	cmp	r5, r4
 800de3a:	d10b      	bne.n	800de54 <_free_r+0x78>
 800de3c:	6824      	ldr	r4, [r4, #0]
 800de3e:	4421      	add	r1, r4
 800de40:	1854      	adds	r4, r2, r1
 800de42:	42a3      	cmp	r3, r4
 800de44:	6011      	str	r1, [r2, #0]
 800de46:	d1dd      	bne.n	800de04 <_free_r+0x28>
 800de48:	681c      	ldr	r4, [r3, #0]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	6053      	str	r3, [r2, #4]
 800de4e:	4421      	add	r1, r4
 800de50:	6011      	str	r1, [r2, #0]
 800de52:	e7d7      	b.n	800de04 <_free_r+0x28>
 800de54:	d902      	bls.n	800de5c <_free_r+0x80>
 800de56:	230c      	movs	r3, #12
 800de58:	6003      	str	r3, [r0, #0]
 800de5a:	e7d3      	b.n	800de04 <_free_r+0x28>
 800de5c:	6825      	ldr	r5, [r4, #0]
 800de5e:	1961      	adds	r1, r4, r5
 800de60:	428b      	cmp	r3, r1
 800de62:	bf04      	itt	eq
 800de64:	6819      	ldreq	r1, [r3, #0]
 800de66:	685b      	ldreq	r3, [r3, #4]
 800de68:	6063      	str	r3, [r4, #4]
 800de6a:	bf04      	itt	eq
 800de6c:	1949      	addeq	r1, r1, r5
 800de6e:	6021      	streq	r1, [r4, #0]
 800de70:	6054      	str	r4, [r2, #4]
 800de72:	e7c7      	b.n	800de04 <_free_r+0x28>
 800de74:	b003      	add	sp, #12
 800de76:	bd30      	pop	{r4, r5, pc}
 800de78:	20000edc 	.word	0x20000edc

0800de7c <_malloc_r>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	1ccd      	adds	r5, r1, #3
 800de80:	f025 0503 	bic.w	r5, r5, #3
 800de84:	3508      	adds	r5, #8
 800de86:	2d0c      	cmp	r5, #12
 800de88:	bf38      	it	cc
 800de8a:	250c      	movcc	r5, #12
 800de8c:	2d00      	cmp	r5, #0
 800de8e:	4606      	mov	r6, r0
 800de90:	db01      	blt.n	800de96 <_malloc_r+0x1a>
 800de92:	42a9      	cmp	r1, r5
 800de94:	d903      	bls.n	800de9e <_malloc_r+0x22>
 800de96:	230c      	movs	r3, #12
 800de98:	6033      	str	r3, [r6, #0]
 800de9a:	2000      	movs	r0, #0
 800de9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de9e:	f000 fe53 	bl	800eb48 <__malloc_lock>
 800dea2:	4921      	ldr	r1, [pc, #132]	; (800df28 <_malloc_r+0xac>)
 800dea4:	680a      	ldr	r2, [r1, #0]
 800dea6:	4614      	mov	r4, r2
 800dea8:	b99c      	cbnz	r4, 800ded2 <_malloc_r+0x56>
 800deaa:	4f20      	ldr	r7, [pc, #128]	; (800df2c <_malloc_r+0xb0>)
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	b923      	cbnz	r3, 800deba <_malloc_r+0x3e>
 800deb0:	4621      	mov	r1, r4
 800deb2:	4630      	mov	r0, r6
 800deb4:	f000 fb20 	bl	800e4f8 <_sbrk_r>
 800deb8:	6038      	str	r0, [r7, #0]
 800deba:	4629      	mov	r1, r5
 800debc:	4630      	mov	r0, r6
 800debe:	f000 fb1b 	bl	800e4f8 <_sbrk_r>
 800dec2:	1c43      	adds	r3, r0, #1
 800dec4:	d123      	bne.n	800df0e <_malloc_r+0x92>
 800dec6:	230c      	movs	r3, #12
 800dec8:	6033      	str	r3, [r6, #0]
 800deca:	4630      	mov	r0, r6
 800decc:	f000 fe42 	bl	800eb54 <__malloc_unlock>
 800ded0:	e7e3      	b.n	800de9a <_malloc_r+0x1e>
 800ded2:	6823      	ldr	r3, [r4, #0]
 800ded4:	1b5b      	subs	r3, r3, r5
 800ded6:	d417      	bmi.n	800df08 <_malloc_r+0x8c>
 800ded8:	2b0b      	cmp	r3, #11
 800deda:	d903      	bls.n	800dee4 <_malloc_r+0x68>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	441c      	add	r4, r3
 800dee0:	6025      	str	r5, [r4, #0]
 800dee2:	e004      	b.n	800deee <_malloc_r+0x72>
 800dee4:	6863      	ldr	r3, [r4, #4]
 800dee6:	42a2      	cmp	r2, r4
 800dee8:	bf0c      	ite	eq
 800deea:	600b      	streq	r3, [r1, #0]
 800deec:	6053      	strne	r3, [r2, #4]
 800deee:	4630      	mov	r0, r6
 800def0:	f000 fe30 	bl	800eb54 <__malloc_unlock>
 800def4:	f104 000b 	add.w	r0, r4, #11
 800def8:	1d23      	adds	r3, r4, #4
 800defa:	f020 0007 	bic.w	r0, r0, #7
 800defe:	1ac2      	subs	r2, r0, r3
 800df00:	d0cc      	beq.n	800de9c <_malloc_r+0x20>
 800df02:	1a1b      	subs	r3, r3, r0
 800df04:	50a3      	str	r3, [r4, r2]
 800df06:	e7c9      	b.n	800de9c <_malloc_r+0x20>
 800df08:	4622      	mov	r2, r4
 800df0a:	6864      	ldr	r4, [r4, #4]
 800df0c:	e7cc      	b.n	800dea8 <_malloc_r+0x2c>
 800df0e:	1cc4      	adds	r4, r0, #3
 800df10:	f024 0403 	bic.w	r4, r4, #3
 800df14:	42a0      	cmp	r0, r4
 800df16:	d0e3      	beq.n	800dee0 <_malloc_r+0x64>
 800df18:	1a21      	subs	r1, r4, r0
 800df1a:	4630      	mov	r0, r6
 800df1c:	f000 faec 	bl	800e4f8 <_sbrk_r>
 800df20:	3001      	adds	r0, #1
 800df22:	d1dd      	bne.n	800dee0 <_malloc_r+0x64>
 800df24:	e7cf      	b.n	800dec6 <_malloc_r+0x4a>
 800df26:	bf00      	nop
 800df28:	20000edc 	.word	0x20000edc
 800df2c:	20000ee0 	.word	0x20000ee0

0800df30 <_realloc_r>:
 800df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df32:	4607      	mov	r7, r0
 800df34:	4614      	mov	r4, r2
 800df36:	460e      	mov	r6, r1
 800df38:	b921      	cbnz	r1, 800df44 <_realloc_r+0x14>
 800df3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800df3e:	4611      	mov	r1, r2
 800df40:	f7ff bf9c 	b.w	800de7c <_malloc_r>
 800df44:	b922      	cbnz	r2, 800df50 <_realloc_r+0x20>
 800df46:	f7ff ff49 	bl	800dddc <_free_r>
 800df4a:	4625      	mov	r5, r4
 800df4c:	4628      	mov	r0, r5
 800df4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df50:	f000 fe06 	bl	800eb60 <_malloc_usable_size_r>
 800df54:	42a0      	cmp	r0, r4
 800df56:	d20f      	bcs.n	800df78 <_realloc_r+0x48>
 800df58:	4621      	mov	r1, r4
 800df5a:	4638      	mov	r0, r7
 800df5c:	f7ff ff8e 	bl	800de7c <_malloc_r>
 800df60:	4605      	mov	r5, r0
 800df62:	2800      	cmp	r0, #0
 800df64:	d0f2      	beq.n	800df4c <_realloc_r+0x1c>
 800df66:	4631      	mov	r1, r6
 800df68:	4622      	mov	r2, r4
 800df6a:	f7fc fa19 	bl	800a3a0 <memcpy>
 800df6e:	4631      	mov	r1, r6
 800df70:	4638      	mov	r0, r7
 800df72:	f7ff ff33 	bl	800dddc <_free_r>
 800df76:	e7e9      	b.n	800df4c <_realloc_r+0x1c>
 800df78:	4635      	mov	r5, r6
 800df7a:	e7e7      	b.n	800df4c <_realloc_r+0x1c>

0800df7c <__ssputs_r>:
 800df7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df80:	688e      	ldr	r6, [r1, #8]
 800df82:	429e      	cmp	r6, r3
 800df84:	4682      	mov	sl, r0
 800df86:	460c      	mov	r4, r1
 800df88:	4690      	mov	r8, r2
 800df8a:	461f      	mov	r7, r3
 800df8c:	d838      	bhi.n	800e000 <__ssputs_r+0x84>
 800df8e:	898a      	ldrh	r2, [r1, #12]
 800df90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df94:	d032      	beq.n	800dffc <__ssputs_r+0x80>
 800df96:	6825      	ldr	r5, [r4, #0]
 800df98:	6909      	ldr	r1, [r1, #16]
 800df9a:	eba5 0901 	sub.w	r9, r5, r1
 800df9e:	6965      	ldr	r5, [r4, #20]
 800dfa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	444b      	add	r3, r9
 800dfac:	106d      	asrs	r5, r5, #1
 800dfae:	429d      	cmp	r5, r3
 800dfb0:	bf38      	it	cc
 800dfb2:	461d      	movcc	r5, r3
 800dfb4:	0553      	lsls	r3, r2, #21
 800dfb6:	d531      	bpl.n	800e01c <__ssputs_r+0xa0>
 800dfb8:	4629      	mov	r1, r5
 800dfba:	f7ff ff5f 	bl	800de7c <_malloc_r>
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	b950      	cbnz	r0, 800dfd8 <__ssputs_r+0x5c>
 800dfc2:	230c      	movs	r3, #12
 800dfc4:	f8ca 3000 	str.w	r3, [sl]
 800dfc8:	89a3      	ldrh	r3, [r4, #12]
 800dfca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfce:	81a3      	strh	r3, [r4, #12]
 800dfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd8:	6921      	ldr	r1, [r4, #16]
 800dfda:	464a      	mov	r2, r9
 800dfdc:	f7fc f9e0 	bl	800a3a0 <memcpy>
 800dfe0:	89a3      	ldrh	r3, [r4, #12]
 800dfe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dfe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfea:	81a3      	strh	r3, [r4, #12]
 800dfec:	6126      	str	r6, [r4, #16]
 800dfee:	6165      	str	r5, [r4, #20]
 800dff0:	444e      	add	r6, r9
 800dff2:	eba5 0509 	sub.w	r5, r5, r9
 800dff6:	6026      	str	r6, [r4, #0]
 800dff8:	60a5      	str	r5, [r4, #8]
 800dffa:	463e      	mov	r6, r7
 800dffc:	42be      	cmp	r6, r7
 800dffe:	d900      	bls.n	800e002 <__ssputs_r+0x86>
 800e000:	463e      	mov	r6, r7
 800e002:	4632      	mov	r2, r6
 800e004:	6820      	ldr	r0, [r4, #0]
 800e006:	4641      	mov	r1, r8
 800e008:	f000 fd84 	bl	800eb14 <memmove>
 800e00c:	68a3      	ldr	r3, [r4, #8]
 800e00e:	6822      	ldr	r2, [r4, #0]
 800e010:	1b9b      	subs	r3, r3, r6
 800e012:	4432      	add	r2, r6
 800e014:	60a3      	str	r3, [r4, #8]
 800e016:	6022      	str	r2, [r4, #0]
 800e018:	2000      	movs	r0, #0
 800e01a:	e7db      	b.n	800dfd4 <__ssputs_r+0x58>
 800e01c:	462a      	mov	r2, r5
 800e01e:	f7ff ff87 	bl	800df30 <_realloc_r>
 800e022:	4606      	mov	r6, r0
 800e024:	2800      	cmp	r0, #0
 800e026:	d1e1      	bne.n	800dfec <__ssputs_r+0x70>
 800e028:	6921      	ldr	r1, [r4, #16]
 800e02a:	4650      	mov	r0, sl
 800e02c:	f7ff fed6 	bl	800dddc <_free_r>
 800e030:	e7c7      	b.n	800dfc2 <__ssputs_r+0x46>
	...

0800e034 <_svfiprintf_r>:
 800e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e038:	4698      	mov	r8, r3
 800e03a:	898b      	ldrh	r3, [r1, #12]
 800e03c:	061b      	lsls	r3, r3, #24
 800e03e:	b09d      	sub	sp, #116	; 0x74
 800e040:	4607      	mov	r7, r0
 800e042:	460d      	mov	r5, r1
 800e044:	4614      	mov	r4, r2
 800e046:	d50e      	bpl.n	800e066 <_svfiprintf_r+0x32>
 800e048:	690b      	ldr	r3, [r1, #16]
 800e04a:	b963      	cbnz	r3, 800e066 <_svfiprintf_r+0x32>
 800e04c:	2140      	movs	r1, #64	; 0x40
 800e04e:	f7ff ff15 	bl	800de7c <_malloc_r>
 800e052:	6028      	str	r0, [r5, #0]
 800e054:	6128      	str	r0, [r5, #16]
 800e056:	b920      	cbnz	r0, 800e062 <_svfiprintf_r+0x2e>
 800e058:	230c      	movs	r3, #12
 800e05a:	603b      	str	r3, [r7, #0]
 800e05c:	f04f 30ff 	mov.w	r0, #4294967295
 800e060:	e0d1      	b.n	800e206 <_svfiprintf_r+0x1d2>
 800e062:	2340      	movs	r3, #64	; 0x40
 800e064:	616b      	str	r3, [r5, #20]
 800e066:	2300      	movs	r3, #0
 800e068:	9309      	str	r3, [sp, #36]	; 0x24
 800e06a:	2320      	movs	r3, #32
 800e06c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e070:	f8cd 800c 	str.w	r8, [sp, #12]
 800e074:	2330      	movs	r3, #48	; 0x30
 800e076:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e220 <_svfiprintf_r+0x1ec>
 800e07a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e07e:	f04f 0901 	mov.w	r9, #1
 800e082:	4623      	mov	r3, r4
 800e084:	469a      	mov	sl, r3
 800e086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e08a:	b10a      	cbz	r2, 800e090 <_svfiprintf_r+0x5c>
 800e08c:	2a25      	cmp	r2, #37	; 0x25
 800e08e:	d1f9      	bne.n	800e084 <_svfiprintf_r+0x50>
 800e090:	ebba 0b04 	subs.w	fp, sl, r4
 800e094:	d00b      	beq.n	800e0ae <_svfiprintf_r+0x7a>
 800e096:	465b      	mov	r3, fp
 800e098:	4622      	mov	r2, r4
 800e09a:	4629      	mov	r1, r5
 800e09c:	4638      	mov	r0, r7
 800e09e:	f7ff ff6d 	bl	800df7c <__ssputs_r>
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	f000 80aa 	beq.w	800e1fc <_svfiprintf_r+0x1c8>
 800e0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0aa:	445a      	add	r2, fp
 800e0ac:	9209      	str	r2, [sp, #36]	; 0x24
 800e0ae:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f000 80a2 	beq.w	800e1fc <_svfiprintf_r+0x1c8>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e0be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0c2:	f10a 0a01 	add.w	sl, sl, #1
 800e0c6:	9304      	str	r3, [sp, #16]
 800e0c8:	9307      	str	r3, [sp, #28]
 800e0ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0ce:	931a      	str	r3, [sp, #104]	; 0x68
 800e0d0:	4654      	mov	r4, sl
 800e0d2:	2205      	movs	r2, #5
 800e0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d8:	4851      	ldr	r0, [pc, #324]	; (800e220 <_svfiprintf_r+0x1ec>)
 800e0da:	f7f2 f881 	bl	80001e0 <memchr>
 800e0de:	9a04      	ldr	r2, [sp, #16]
 800e0e0:	b9d8      	cbnz	r0, 800e11a <_svfiprintf_r+0xe6>
 800e0e2:	06d0      	lsls	r0, r2, #27
 800e0e4:	bf44      	itt	mi
 800e0e6:	2320      	movmi	r3, #32
 800e0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0ec:	0711      	lsls	r1, r2, #28
 800e0ee:	bf44      	itt	mi
 800e0f0:	232b      	movmi	r3, #43	; 0x2b
 800e0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0f6:	f89a 3000 	ldrb.w	r3, [sl]
 800e0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800e0fc:	d015      	beq.n	800e12a <_svfiprintf_r+0xf6>
 800e0fe:	9a07      	ldr	r2, [sp, #28]
 800e100:	4654      	mov	r4, sl
 800e102:	2000      	movs	r0, #0
 800e104:	f04f 0c0a 	mov.w	ip, #10
 800e108:	4621      	mov	r1, r4
 800e10a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e10e:	3b30      	subs	r3, #48	; 0x30
 800e110:	2b09      	cmp	r3, #9
 800e112:	d94e      	bls.n	800e1b2 <_svfiprintf_r+0x17e>
 800e114:	b1b0      	cbz	r0, 800e144 <_svfiprintf_r+0x110>
 800e116:	9207      	str	r2, [sp, #28]
 800e118:	e014      	b.n	800e144 <_svfiprintf_r+0x110>
 800e11a:	eba0 0308 	sub.w	r3, r0, r8
 800e11e:	fa09 f303 	lsl.w	r3, r9, r3
 800e122:	4313      	orrs	r3, r2
 800e124:	9304      	str	r3, [sp, #16]
 800e126:	46a2      	mov	sl, r4
 800e128:	e7d2      	b.n	800e0d0 <_svfiprintf_r+0x9c>
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	1d19      	adds	r1, r3, #4
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	9103      	str	r1, [sp, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	bfbb      	ittet	lt
 800e136:	425b      	neglt	r3, r3
 800e138:	f042 0202 	orrlt.w	r2, r2, #2
 800e13c:	9307      	strge	r3, [sp, #28]
 800e13e:	9307      	strlt	r3, [sp, #28]
 800e140:	bfb8      	it	lt
 800e142:	9204      	strlt	r2, [sp, #16]
 800e144:	7823      	ldrb	r3, [r4, #0]
 800e146:	2b2e      	cmp	r3, #46	; 0x2e
 800e148:	d10c      	bne.n	800e164 <_svfiprintf_r+0x130>
 800e14a:	7863      	ldrb	r3, [r4, #1]
 800e14c:	2b2a      	cmp	r3, #42	; 0x2a
 800e14e:	d135      	bne.n	800e1bc <_svfiprintf_r+0x188>
 800e150:	9b03      	ldr	r3, [sp, #12]
 800e152:	1d1a      	adds	r2, r3, #4
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	9203      	str	r2, [sp, #12]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	bfb8      	it	lt
 800e15c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e160:	3402      	adds	r4, #2
 800e162:	9305      	str	r3, [sp, #20]
 800e164:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e230 <_svfiprintf_r+0x1fc>
 800e168:	7821      	ldrb	r1, [r4, #0]
 800e16a:	2203      	movs	r2, #3
 800e16c:	4650      	mov	r0, sl
 800e16e:	f7f2 f837 	bl	80001e0 <memchr>
 800e172:	b140      	cbz	r0, 800e186 <_svfiprintf_r+0x152>
 800e174:	2340      	movs	r3, #64	; 0x40
 800e176:	eba0 000a 	sub.w	r0, r0, sl
 800e17a:	fa03 f000 	lsl.w	r0, r3, r0
 800e17e:	9b04      	ldr	r3, [sp, #16]
 800e180:	4303      	orrs	r3, r0
 800e182:	3401      	adds	r4, #1
 800e184:	9304      	str	r3, [sp, #16]
 800e186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e18a:	4826      	ldr	r0, [pc, #152]	; (800e224 <_svfiprintf_r+0x1f0>)
 800e18c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e190:	2206      	movs	r2, #6
 800e192:	f7f2 f825 	bl	80001e0 <memchr>
 800e196:	2800      	cmp	r0, #0
 800e198:	d038      	beq.n	800e20c <_svfiprintf_r+0x1d8>
 800e19a:	4b23      	ldr	r3, [pc, #140]	; (800e228 <_svfiprintf_r+0x1f4>)
 800e19c:	bb1b      	cbnz	r3, 800e1e6 <_svfiprintf_r+0x1b2>
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	3307      	adds	r3, #7
 800e1a2:	f023 0307 	bic.w	r3, r3, #7
 800e1a6:	3308      	adds	r3, #8
 800e1a8:	9303      	str	r3, [sp, #12]
 800e1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ac:	4433      	add	r3, r6
 800e1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e1b0:	e767      	b.n	800e082 <_svfiprintf_r+0x4e>
 800e1b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	e7a5      	b.n	800e108 <_svfiprintf_r+0xd4>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	3401      	adds	r4, #1
 800e1c0:	9305      	str	r3, [sp, #20]
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	f04f 0c0a 	mov.w	ip, #10
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ce:	3a30      	subs	r2, #48	; 0x30
 800e1d0:	2a09      	cmp	r2, #9
 800e1d2:	d903      	bls.n	800e1dc <_svfiprintf_r+0x1a8>
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d0c5      	beq.n	800e164 <_svfiprintf_r+0x130>
 800e1d8:	9105      	str	r1, [sp, #20]
 800e1da:	e7c3      	b.n	800e164 <_svfiprintf_r+0x130>
 800e1dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1e0:	4604      	mov	r4, r0
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e7f0      	b.n	800e1c8 <_svfiprintf_r+0x194>
 800e1e6:	ab03      	add	r3, sp, #12
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	462a      	mov	r2, r5
 800e1ec:	4b0f      	ldr	r3, [pc, #60]	; (800e22c <_svfiprintf_r+0x1f8>)
 800e1ee:	a904      	add	r1, sp, #16
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f7fc f98b 	bl	800a50c <_printf_float>
 800e1f6:	1c42      	adds	r2, r0, #1
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	d1d6      	bne.n	800e1aa <_svfiprintf_r+0x176>
 800e1fc:	89ab      	ldrh	r3, [r5, #12]
 800e1fe:	065b      	lsls	r3, r3, #25
 800e200:	f53f af2c 	bmi.w	800e05c <_svfiprintf_r+0x28>
 800e204:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e206:	b01d      	add	sp, #116	; 0x74
 800e208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e20c:	ab03      	add	r3, sp, #12
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	462a      	mov	r2, r5
 800e212:	4b06      	ldr	r3, [pc, #24]	; (800e22c <_svfiprintf_r+0x1f8>)
 800e214:	a904      	add	r1, sp, #16
 800e216:	4638      	mov	r0, r7
 800e218:	f7fc fc1c 	bl	800aa54 <_printf_i>
 800e21c:	e7eb      	b.n	800e1f6 <_svfiprintf_r+0x1c2>
 800e21e:	bf00      	nop
 800e220:	0800f5ac 	.word	0x0800f5ac
 800e224:	0800f5b6 	.word	0x0800f5b6
 800e228:	0800a50d 	.word	0x0800a50d
 800e22c:	0800df7d 	.word	0x0800df7d
 800e230:	0800f5b2 	.word	0x0800f5b2

0800e234 <__sfputc_r>:
 800e234:	6893      	ldr	r3, [r2, #8]
 800e236:	3b01      	subs	r3, #1
 800e238:	2b00      	cmp	r3, #0
 800e23a:	b410      	push	{r4}
 800e23c:	6093      	str	r3, [r2, #8]
 800e23e:	da08      	bge.n	800e252 <__sfputc_r+0x1e>
 800e240:	6994      	ldr	r4, [r2, #24]
 800e242:	42a3      	cmp	r3, r4
 800e244:	db01      	blt.n	800e24a <__sfputc_r+0x16>
 800e246:	290a      	cmp	r1, #10
 800e248:	d103      	bne.n	800e252 <__sfputc_r+0x1e>
 800e24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e24e:	f000 b975 	b.w	800e53c <__swbuf_r>
 800e252:	6813      	ldr	r3, [r2, #0]
 800e254:	1c58      	adds	r0, r3, #1
 800e256:	6010      	str	r0, [r2, #0]
 800e258:	7019      	strb	r1, [r3, #0]
 800e25a:	4608      	mov	r0, r1
 800e25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <__sfputs_r>:
 800e262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e264:	4606      	mov	r6, r0
 800e266:	460f      	mov	r7, r1
 800e268:	4614      	mov	r4, r2
 800e26a:	18d5      	adds	r5, r2, r3
 800e26c:	42ac      	cmp	r4, r5
 800e26e:	d101      	bne.n	800e274 <__sfputs_r+0x12>
 800e270:	2000      	movs	r0, #0
 800e272:	e007      	b.n	800e284 <__sfputs_r+0x22>
 800e274:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e278:	463a      	mov	r2, r7
 800e27a:	4630      	mov	r0, r6
 800e27c:	f7ff ffda 	bl	800e234 <__sfputc_r>
 800e280:	1c43      	adds	r3, r0, #1
 800e282:	d1f3      	bne.n	800e26c <__sfputs_r+0xa>
 800e284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e288 <_vfiprintf_r>:
 800e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28c:	460d      	mov	r5, r1
 800e28e:	b09d      	sub	sp, #116	; 0x74
 800e290:	4614      	mov	r4, r2
 800e292:	4698      	mov	r8, r3
 800e294:	4606      	mov	r6, r0
 800e296:	b118      	cbz	r0, 800e2a0 <_vfiprintf_r+0x18>
 800e298:	6983      	ldr	r3, [r0, #24]
 800e29a:	b90b      	cbnz	r3, 800e2a0 <_vfiprintf_r+0x18>
 800e29c:	f000 fb36 	bl	800e90c <__sinit>
 800e2a0:	4b89      	ldr	r3, [pc, #548]	; (800e4c8 <_vfiprintf_r+0x240>)
 800e2a2:	429d      	cmp	r5, r3
 800e2a4:	d11b      	bne.n	800e2de <_vfiprintf_r+0x56>
 800e2a6:	6875      	ldr	r5, [r6, #4]
 800e2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2aa:	07d9      	lsls	r1, r3, #31
 800e2ac:	d405      	bmi.n	800e2ba <_vfiprintf_r+0x32>
 800e2ae:	89ab      	ldrh	r3, [r5, #12]
 800e2b0:	059a      	lsls	r2, r3, #22
 800e2b2:	d402      	bmi.n	800e2ba <_vfiprintf_r+0x32>
 800e2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2b6:	f000 fbc7 	bl	800ea48 <__retarget_lock_acquire_recursive>
 800e2ba:	89ab      	ldrh	r3, [r5, #12]
 800e2bc:	071b      	lsls	r3, r3, #28
 800e2be:	d501      	bpl.n	800e2c4 <_vfiprintf_r+0x3c>
 800e2c0:	692b      	ldr	r3, [r5, #16]
 800e2c2:	b9eb      	cbnz	r3, 800e300 <_vfiprintf_r+0x78>
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	f000 f998 	bl	800e5fc <__swsetup_r>
 800e2cc:	b1c0      	cbz	r0, 800e300 <_vfiprintf_r+0x78>
 800e2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2d0:	07dc      	lsls	r4, r3, #31
 800e2d2:	d50e      	bpl.n	800e2f2 <_vfiprintf_r+0x6a>
 800e2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d8:	b01d      	add	sp, #116	; 0x74
 800e2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2de:	4b7b      	ldr	r3, [pc, #492]	; (800e4cc <_vfiprintf_r+0x244>)
 800e2e0:	429d      	cmp	r5, r3
 800e2e2:	d101      	bne.n	800e2e8 <_vfiprintf_r+0x60>
 800e2e4:	68b5      	ldr	r5, [r6, #8]
 800e2e6:	e7df      	b.n	800e2a8 <_vfiprintf_r+0x20>
 800e2e8:	4b79      	ldr	r3, [pc, #484]	; (800e4d0 <_vfiprintf_r+0x248>)
 800e2ea:	429d      	cmp	r5, r3
 800e2ec:	bf08      	it	eq
 800e2ee:	68f5      	ldreq	r5, [r6, #12]
 800e2f0:	e7da      	b.n	800e2a8 <_vfiprintf_r+0x20>
 800e2f2:	89ab      	ldrh	r3, [r5, #12]
 800e2f4:	0598      	lsls	r0, r3, #22
 800e2f6:	d4ed      	bmi.n	800e2d4 <_vfiprintf_r+0x4c>
 800e2f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2fa:	f000 fba6 	bl	800ea4a <__retarget_lock_release_recursive>
 800e2fe:	e7e9      	b.n	800e2d4 <_vfiprintf_r+0x4c>
 800e300:	2300      	movs	r3, #0
 800e302:	9309      	str	r3, [sp, #36]	; 0x24
 800e304:	2320      	movs	r3, #32
 800e306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e30a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e30e:	2330      	movs	r3, #48	; 0x30
 800e310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e4d4 <_vfiprintf_r+0x24c>
 800e314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e318:	f04f 0901 	mov.w	r9, #1
 800e31c:	4623      	mov	r3, r4
 800e31e:	469a      	mov	sl, r3
 800e320:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e324:	b10a      	cbz	r2, 800e32a <_vfiprintf_r+0xa2>
 800e326:	2a25      	cmp	r2, #37	; 0x25
 800e328:	d1f9      	bne.n	800e31e <_vfiprintf_r+0x96>
 800e32a:	ebba 0b04 	subs.w	fp, sl, r4
 800e32e:	d00b      	beq.n	800e348 <_vfiprintf_r+0xc0>
 800e330:	465b      	mov	r3, fp
 800e332:	4622      	mov	r2, r4
 800e334:	4629      	mov	r1, r5
 800e336:	4630      	mov	r0, r6
 800e338:	f7ff ff93 	bl	800e262 <__sfputs_r>
 800e33c:	3001      	adds	r0, #1
 800e33e:	f000 80aa 	beq.w	800e496 <_vfiprintf_r+0x20e>
 800e342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e344:	445a      	add	r2, fp
 800e346:	9209      	str	r2, [sp, #36]	; 0x24
 800e348:	f89a 3000 	ldrb.w	r3, [sl]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f000 80a2 	beq.w	800e496 <_vfiprintf_r+0x20e>
 800e352:	2300      	movs	r3, #0
 800e354:	f04f 32ff 	mov.w	r2, #4294967295
 800e358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e35c:	f10a 0a01 	add.w	sl, sl, #1
 800e360:	9304      	str	r3, [sp, #16]
 800e362:	9307      	str	r3, [sp, #28]
 800e364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e368:	931a      	str	r3, [sp, #104]	; 0x68
 800e36a:	4654      	mov	r4, sl
 800e36c:	2205      	movs	r2, #5
 800e36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e372:	4858      	ldr	r0, [pc, #352]	; (800e4d4 <_vfiprintf_r+0x24c>)
 800e374:	f7f1 ff34 	bl	80001e0 <memchr>
 800e378:	9a04      	ldr	r2, [sp, #16]
 800e37a:	b9d8      	cbnz	r0, 800e3b4 <_vfiprintf_r+0x12c>
 800e37c:	06d1      	lsls	r1, r2, #27
 800e37e:	bf44      	itt	mi
 800e380:	2320      	movmi	r3, #32
 800e382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e386:	0713      	lsls	r3, r2, #28
 800e388:	bf44      	itt	mi
 800e38a:	232b      	movmi	r3, #43	; 0x2b
 800e38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e390:	f89a 3000 	ldrb.w	r3, [sl]
 800e394:	2b2a      	cmp	r3, #42	; 0x2a
 800e396:	d015      	beq.n	800e3c4 <_vfiprintf_r+0x13c>
 800e398:	9a07      	ldr	r2, [sp, #28]
 800e39a:	4654      	mov	r4, sl
 800e39c:	2000      	movs	r0, #0
 800e39e:	f04f 0c0a 	mov.w	ip, #10
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3a8:	3b30      	subs	r3, #48	; 0x30
 800e3aa:	2b09      	cmp	r3, #9
 800e3ac:	d94e      	bls.n	800e44c <_vfiprintf_r+0x1c4>
 800e3ae:	b1b0      	cbz	r0, 800e3de <_vfiprintf_r+0x156>
 800e3b0:	9207      	str	r2, [sp, #28]
 800e3b2:	e014      	b.n	800e3de <_vfiprintf_r+0x156>
 800e3b4:	eba0 0308 	sub.w	r3, r0, r8
 800e3b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	9304      	str	r3, [sp, #16]
 800e3c0:	46a2      	mov	sl, r4
 800e3c2:	e7d2      	b.n	800e36a <_vfiprintf_r+0xe2>
 800e3c4:	9b03      	ldr	r3, [sp, #12]
 800e3c6:	1d19      	adds	r1, r3, #4
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	9103      	str	r1, [sp, #12]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	bfbb      	ittet	lt
 800e3d0:	425b      	neglt	r3, r3
 800e3d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e3d6:	9307      	strge	r3, [sp, #28]
 800e3d8:	9307      	strlt	r3, [sp, #28]
 800e3da:	bfb8      	it	lt
 800e3dc:	9204      	strlt	r2, [sp, #16]
 800e3de:	7823      	ldrb	r3, [r4, #0]
 800e3e0:	2b2e      	cmp	r3, #46	; 0x2e
 800e3e2:	d10c      	bne.n	800e3fe <_vfiprintf_r+0x176>
 800e3e4:	7863      	ldrb	r3, [r4, #1]
 800e3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e3e8:	d135      	bne.n	800e456 <_vfiprintf_r+0x1ce>
 800e3ea:	9b03      	ldr	r3, [sp, #12]
 800e3ec:	1d1a      	adds	r2, r3, #4
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	9203      	str	r2, [sp, #12]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	bfb8      	it	lt
 800e3f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3fa:	3402      	adds	r4, #2
 800e3fc:	9305      	str	r3, [sp, #20]
 800e3fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e4e4 <_vfiprintf_r+0x25c>
 800e402:	7821      	ldrb	r1, [r4, #0]
 800e404:	2203      	movs	r2, #3
 800e406:	4650      	mov	r0, sl
 800e408:	f7f1 feea 	bl	80001e0 <memchr>
 800e40c:	b140      	cbz	r0, 800e420 <_vfiprintf_r+0x198>
 800e40e:	2340      	movs	r3, #64	; 0x40
 800e410:	eba0 000a 	sub.w	r0, r0, sl
 800e414:	fa03 f000 	lsl.w	r0, r3, r0
 800e418:	9b04      	ldr	r3, [sp, #16]
 800e41a:	4303      	orrs	r3, r0
 800e41c:	3401      	adds	r4, #1
 800e41e:	9304      	str	r3, [sp, #16]
 800e420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e424:	482c      	ldr	r0, [pc, #176]	; (800e4d8 <_vfiprintf_r+0x250>)
 800e426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e42a:	2206      	movs	r2, #6
 800e42c:	f7f1 fed8 	bl	80001e0 <memchr>
 800e430:	2800      	cmp	r0, #0
 800e432:	d03f      	beq.n	800e4b4 <_vfiprintf_r+0x22c>
 800e434:	4b29      	ldr	r3, [pc, #164]	; (800e4dc <_vfiprintf_r+0x254>)
 800e436:	bb1b      	cbnz	r3, 800e480 <_vfiprintf_r+0x1f8>
 800e438:	9b03      	ldr	r3, [sp, #12]
 800e43a:	3307      	adds	r3, #7
 800e43c:	f023 0307 	bic.w	r3, r3, #7
 800e440:	3308      	adds	r3, #8
 800e442:	9303      	str	r3, [sp, #12]
 800e444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e446:	443b      	add	r3, r7
 800e448:	9309      	str	r3, [sp, #36]	; 0x24
 800e44a:	e767      	b.n	800e31c <_vfiprintf_r+0x94>
 800e44c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e450:	460c      	mov	r4, r1
 800e452:	2001      	movs	r0, #1
 800e454:	e7a5      	b.n	800e3a2 <_vfiprintf_r+0x11a>
 800e456:	2300      	movs	r3, #0
 800e458:	3401      	adds	r4, #1
 800e45a:	9305      	str	r3, [sp, #20]
 800e45c:	4619      	mov	r1, r3
 800e45e:	f04f 0c0a 	mov.w	ip, #10
 800e462:	4620      	mov	r0, r4
 800e464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e468:	3a30      	subs	r2, #48	; 0x30
 800e46a:	2a09      	cmp	r2, #9
 800e46c:	d903      	bls.n	800e476 <_vfiprintf_r+0x1ee>
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d0c5      	beq.n	800e3fe <_vfiprintf_r+0x176>
 800e472:	9105      	str	r1, [sp, #20]
 800e474:	e7c3      	b.n	800e3fe <_vfiprintf_r+0x176>
 800e476:	fb0c 2101 	mla	r1, ip, r1, r2
 800e47a:	4604      	mov	r4, r0
 800e47c:	2301      	movs	r3, #1
 800e47e:	e7f0      	b.n	800e462 <_vfiprintf_r+0x1da>
 800e480:	ab03      	add	r3, sp, #12
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	462a      	mov	r2, r5
 800e486:	4b16      	ldr	r3, [pc, #88]	; (800e4e0 <_vfiprintf_r+0x258>)
 800e488:	a904      	add	r1, sp, #16
 800e48a:	4630      	mov	r0, r6
 800e48c:	f7fc f83e 	bl	800a50c <_printf_float>
 800e490:	4607      	mov	r7, r0
 800e492:	1c78      	adds	r0, r7, #1
 800e494:	d1d6      	bne.n	800e444 <_vfiprintf_r+0x1bc>
 800e496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e498:	07d9      	lsls	r1, r3, #31
 800e49a:	d405      	bmi.n	800e4a8 <_vfiprintf_r+0x220>
 800e49c:	89ab      	ldrh	r3, [r5, #12]
 800e49e:	059a      	lsls	r2, r3, #22
 800e4a0:	d402      	bmi.n	800e4a8 <_vfiprintf_r+0x220>
 800e4a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4a4:	f000 fad1 	bl	800ea4a <__retarget_lock_release_recursive>
 800e4a8:	89ab      	ldrh	r3, [r5, #12]
 800e4aa:	065b      	lsls	r3, r3, #25
 800e4ac:	f53f af12 	bmi.w	800e2d4 <_vfiprintf_r+0x4c>
 800e4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4b2:	e711      	b.n	800e2d8 <_vfiprintf_r+0x50>
 800e4b4:	ab03      	add	r3, sp, #12
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	462a      	mov	r2, r5
 800e4ba:	4b09      	ldr	r3, [pc, #36]	; (800e4e0 <_vfiprintf_r+0x258>)
 800e4bc:	a904      	add	r1, sp, #16
 800e4be:	4630      	mov	r0, r6
 800e4c0:	f7fc fac8 	bl	800aa54 <_printf_i>
 800e4c4:	e7e4      	b.n	800e490 <_vfiprintf_r+0x208>
 800e4c6:	bf00      	nop
 800e4c8:	0800f5e0 	.word	0x0800f5e0
 800e4cc:	0800f600 	.word	0x0800f600
 800e4d0:	0800f5c0 	.word	0x0800f5c0
 800e4d4:	0800f5ac 	.word	0x0800f5ac
 800e4d8:	0800f5b6 	.word	0x0800f5b6
 800e4dc:	0800a50d 	.word	0x0800a50d
 800e4e0:	0800e263 	.word	0x0800e263
 800e4e4:	0800f5b2 	.word	0x0800f5b2

0800e4e8 <nan>:
 800e4e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4f0 <nan+0x8>
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	00000000 	.word	0x00000000
 800e4f4:	7ff80000 	.word	0x7ff80000

0800e4f8 <_sbrk_r>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	4d06      	ldr	r5, [pc, #24]	; (800e514 <_sbrk_r+0x1c>)
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4604      	mov	r4, r0
 800e500:	4608      	mov	r0, r1
 800e502:	602b      	str	r3, [r5, #0]
 800e504:	f7f8 f844 	bl	8006590 <_sbrk>
 800e508:	1c43      	adds	r3, r0, #1
 800e50a:	d102      	bne.n	800e512 <_sbrk_r+0x1a>
 800e50c:	682b      	ldr	r3, [r5, #0]
 800e50e:	b103      	cbz	r3, 800e512 <_sbrk_r+0x1a>
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	bd38      	pop	{r3, r4, r5, pc}
 800e514:	200010c0 	.word	0x200010c0

0800e518 <strncmp>:
 800e518:	b510      	push	{r4, lr}
 800e51a:	b16a      	cbz	r2, 800e538 <strncmp+0x20>
 800e51c:	3901      	subs	r1, #1
 800e51e:	1884      	adds	r4, r0, r2
 800e520:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e524:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e528:	4293      	cmp	r3, r2
 800e52a:	d103      	bne.n	800e534 <strncmp+0x1c>
 800e52c:	42a0      	cmp	r0, r4
 800e52e:	d001      	beq.n	800e534 <strncmp+0x1c>
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1f5      	bne.n	800e520 <strncmp+0x8>
 800e534:	1a98      	subs	r0, r3, r2
 800e536:	bd10      	pop	{r4, pc}
 800e538:	4610      	mov	r0, r2
 800e53a:	e7fc      	b.n	800e536 <strncmp+0x1e>

0800e53c <__swbuf_r>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	460e      	mov	r6, r1
 800e540:	4614      	mov	r4, r2
 800e542:	4605      	mov	r5, r0
 800e544:	b118      	cbz	r0, 800e54e <__swbuf_r+0x12>
 800e546:	6983      	ldr	r3, [r0, #24]
 800e548:	b90b      	cbnz	r3, 800e54e <__swbuf_r+0x12>
 800e54a:	f000 f9df 	bl	800e90c <__sinit>
 800e54e:	4b21      	ldr	r3, [pc, #132]	; (800e5d4 <__swbuf_r+0x98>)
 800e550:	429c      	cmp	r4, r3
 800e552:	d12b      	bne.n	800e5ac <__swbuf_r+0x70>
 800e554:	686c      	ldr	r4, [r5, #4]
 800e556:	69a3      	ldr	r3, [r4, #24]
 800e558:	60a3      	str	r3, [r4, #8]
 800e55a:	89a3      	ldrh	r3, [r4, #12]
 800e55c:	071a      	lsls	r2, r3, #28
 800e55e:	d52f      	bpl.n	800e5c0 <__swbuf_r+0x84>
 800e560:	6923      	ldr	r3, [r4, #16]
 800e562:	b36b      	cbz	r3, 800e5c0 <__swbuf_r+0x84>
 800e564:	6923      	ldr	r3, [r4, #16]
 800e566:	6820      	ldr	r0, [r4, #0]
 800e568:	1ac0      	subs	r0, r0, r3
 800e56a:	6963      	ldr	r3, [r4, #20]
 800e56c:	b2f6      	uxtb	r6, r6
 800e56e:	4283      	cmp	r3, r0
 800e570:	4637      	mov	r7, r6
 800e572:	dc04      	bgt.n	800e57e <__swbuf_r+0x42>
 800e574:	4621      	mov	r1, r4
 800e576:	4628      	mov	r0, r5
 800e578:	f000 f934 	bl	800e7e4 <_fflush_r>
 800e57c:	bb30      	cbnz	r0, 800e5cc <__swbuf_r+0x90>
 800e57e:	68a3      	ldr	r3, [r4, #8]
 800e580:	3b01      	subs	r3, #1
 800e582:	60a3      	str	r3, [r4, #8]
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	1c5a      	adds	r2, r3, #1
 800e588:	6022      	str	r2, [r4, #0]
 800e58a:	701e      	strb	r6, [r3, #0]
 800e58c:	6963      	ldr	r3, [r4, #20]
 800e58e:	3001      	adds	r0, #1
 800e590:	4283      	cmp	r3, r0
 800e592:	d004      	beq.n	800e59e <__swbuf_r+0x62>
 800e594:	89a3      	ldrh	r3, [r4, #12]
 800e596:	07db      	lsls	r3, r3, #31
 800e598:	d506      	bpl.n	800e5a8 <__swbuf_r+0x6c>
 800e59a:	2e0a      	cmp	r6, #10
 800e59c:	d104      	bne.n	800e5a8 <__swbuf_r+0x6c>
 800e59e:	4621      	mov	r1, r4
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	f000 f91f 	bl	800e7e4 <_fflush_r>
 800e5a6:	b988      	cbnz	r0, 800e5cc <__swbuf_r+0x90>
 800e5a8:	4638      	mov	r0, r7
 800e5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ac:	4b0a      	ldr	r3, [pc, #40]	; (800e5d8 <__swbuf_r+0x9c>)
 800e5ae:	429c      	cmp	r4, r3
 800e5b0:	d101      	bne.n	800e5b6 <__swbuf_r+0x7a>
 800e5b2:	68ac      	ldr	r4, [r5, #8]
 800e5b4:	e7cf      	b.n	800e556 <__swbuf_r+0x1a>
 800e5b6:	4b09      	ldr	r3, [pc, #36]	; (800e5dc <__swbuf_r+0xa0>)
 800e5b8:	429c      	cmp	r4, r3
 800e5ba:	bf08      	it	eq
 800e5bc:	68ec      	ldreq	r4, [r5, #12]
 800e5be:	e7ca      	b.n	800e556 <__swbuf_r+0x1a>
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	f000 f81a 	bl	800e5fc <__swsetup_r>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d0cb      	beq.n	800e564 <__swbuf_r+0x28>
 800e5cc:	f04f 37ff 	mov.w	r7, #4294967295
 800e5d0:	e7ea      	b.n	800e5a8 <__swbuf_r+0x6c>
 800e5d2:	bf00      	nop
 800e5d4:	0800f5e0 	.word	0x0800f5e0
 800e5d8:	0800f600 	.word	0x0800f600
 800e5dc:	0800f5c0 	.word	0x0800f5c0

0800e5e0 <__ascii_wctomb>:
 800e5e0:	b149      	cbz	r1, 800e5f6 <__ascii_wctomb+0x16>
 800e5e2:	2aff      	cmp	r2, #255	; 0xff
 800e5e4:	bf85      	ittet	hi
 800e5e6:	238a      	movhi	r3, #138	; 0x8a
 800e5e8:	6003      	strhi	r3, [r0, #0]
 800e5ea:	700a      	strbls	r2, [r1, #0]
 800e5ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800e5f0:	bf98      	it	ls
 800e5f2:	2001      	movls	r0, #1
 800e5f4:	4770      	bx	lr
 800e5f6:	4608      	mov	r0, r1
 800e5f8:	4770      	bx	lr
	...

0800e5fc <__swsetup_r>:
 800e5fc:	4b32      	ldr	r3, [pc, #200]	; (800e6c8 <__swsetup_r+0xcc>)
 800e5fe:	b570      	push	{r4, r5, r6, lr}
 800e600:	681d      	ldr	r5, [r3, #0]
 800e602:	4606      	mov	r6, r0
 800e604:	460c      	mov	r4, r1
 800e606:	b125      	cbz	r5, 800e612 <__swsetup_r+0x16>
 800e608:	69ab      	ldr	r3, [r5, #24]
 800e60a:	b913      	cbnz	r3, 800e612 <__swsetup_r+0x16>
 800e60c:	4628      	mov	r0, r5
 800e60e:	f000 f97d 	bl	800e90c <__sinit>
 800e612:	4b2e      	ldr	r3, [pc, #184]	; (800e6cc <__swsetup_r+0xd0>)
 800e614:	429c      	cmp	r4, r3
 800e616:	d10f      	bne.n	800e638 <__swsetup_r+0x3c>
 800e618:	686c      	ldr	r4, [r5, #4]
 800e61a:	89a3      	ldrh	r3, [r4, #12]
 800e61c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e620:	0719      	lsls	r1, r3, #28
 800e622:	d42c      	bmi.n	800e67e <__swsetup_r+0x82>
 800e624:	06dd      	lsls	r5, r3, #27
 800e626:	d411      	bmi.n	800e64c <__swsetup_r+0x50>
 800e628:	2309      	movs	r3, #9
 800e62a:	6033      	str	r3, [r6, #0]
 800e62c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e630:	81a3      	strh	r3, [r4, #12]
 800e632:	f04f 30ff 	mov.w	r0, #4294967295
 800e636:	e03e      	b.n	800e6b6 <__swsetup_r+0xba>
 800e638:	4b25      	ldr	r3, [pc, #148]	; (800e6d0 <__swsetup_r+0xd4>)
 800e63a:	429c      	cmp	r4, r3
 800e63c:	d101      	bne.n	800e642 <__swsetup_r+0x46>
 800e63e:	68ac      	ldr	r4, [r5, #8]
 800e640:	e7eb      	b.n	800e61a <__swsetup_r+0x1e>
 800e642:	4b24      	ldr	r3, [pc, #144]	; (800e6d4 <__swsetup_r+0xd8>)
 800e644:	429c      	cmp	r4, r3
 800e646:	bf08      	it	eq
 800e648:	68ec      	ldreq	r4, [r5, #12]
 800e64a:	e7e6      	b.n	800e61a <__swsetup_r+0x1e>
 800e64c:	0758      	lsls	r0, r3, #29
 800e64e:	d512      	bpl.n	800e676 <__swsetup_r+0x7a>
 800e650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e652:	b141      	cbz	r1, 800e666 <__swsetup_r+0x6a>
 800e654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e658:	4299      	cmp	r1, r3
 800e65a:	d002      	beq.n	800e662 <__swsetup_r+0x66>
 800e65c:	4630      	mov	r0, r6
 800e65e:	f7ff fbbd 	bl	800dddc <_free_r>
 800e662:	2300      	movs	r3, #0
 800e664:	6363      	str	r3, [r4, #52]	; 0x34
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e66c:	81a3      	strh	r3, [r4, #12]
 800e66e:	2300      	movs	r3, #0
 800e670:	6063      	str	r3, [r4, #4]
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	6023      	str	r3, [r4, #0]
 800e676:	89a3      	ldrh	r3, [r4, #12]
 800e678:	f043 0308 	orr.w	r3, r3, #8
 800e67c:	81a3      	strh	r3, [r4, #12]
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	b94b      	cbnz	r3, 800e696 <__swsetup_r+0x9a>
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e68c:	d003      	beq.n	800e696 <__swsetup_r+0x9a>
 800e68e:	4621      	mov	r1, r4
 800e690:	4630      	mov	r0, r6
 800e692:	f000 f9ff 	bl	800ea94 <__smakebuf_r>
 800e696:	89a0      	ldrh	r0, [r4, #12]
 800e698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e69c:	f010 0301 	ands.w	r3, r0, #1
 800e6a0:	d00a      	beq.n	800e6b8 <__swsetup_r+0xbc>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	60a3      	str	r3, [r4, #8]
 800e6a6:	6963      	ldr	r3, [r4, #20]
 800e6a8:	425b      	negs	r3, r3
 800e6aa:	61a3      	str	r3, [r4, #24]
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	b943      	cbnz	r3, 800e6c2 <__swsetup_r+0xc6>
 800e6b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6b4:	d1ba      	bne.n	800e62c <__swsetup_r+0x30>
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}
 800e6b8:	0781      	lsls	r1, r0, #30
 800e6ba:	bf58      	it	pl
 800e6bc:	6963      	ldrpl	r3, [r4, #20]
 800e6be:	60a3      	str	r3, [r4, #8]
 800e6c0:	e7f4      	b.n	800e6ac <__swsetup_r+0xb0>
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	e7f7      	b.n	800e6b6 <__swsetup_r+0xba>
 800e6c6:	bf00      	nop
 800e6c8:	20000048 	.word	0x20000048
 800e6cc:	0800f5e0 	.word	0x0800f5e0
 800e6d0:	0800f600 	.word	0x0800f600
 800e6d4:	0800f5c0 	.word	0x0800f5c0

0800e6d8 <__sflush_r>:
 800e6d8:	898a      	ldrh	r2, [r1, #12]
 800e6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6de:	4605      	mov	r5, r0
 800e6e0:	0710      	lsls	r0, r2, #28
 800e6e2:	460c      	mov	r4, r1
 800e6e4:	d458      	bmi.n	800e798 <__sflush_r+0xc0>
 800e6e6:	684b      	ldr	r3, [r1, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	dc05      	bgt.n	800e6f8 <__sflush_r+0x20>
 800e6ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	dc02      	bgt.n	800e6f8 <__sflush_r+0x20>
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6fa:	2e00      	cmp	r6, #0
 800e6fc:	d0f9      	beq.n	800e6f2 <__sflush_r+0x1a>
 800e6fe:	2300      	movs	r3, #0
 800e700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e704:	682f      	ldr	r7, [r5, #0]
 800e706:	602b      	str	r3, [r5, #0]
 800e708:	d032      	beq.n	800e770 <__sflush_r+0x98>
 800e70a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	075a      	lsls	r2, r3, #29
 800e710:	d505      	bpl.n	800e71e <__sflush_r+0x46>
 800e712:	6863      	ldr	r3, [r4, #4]
 800e714:	1ac0      	subs	r0, r0, r3
 800e716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e718:	b10b      	cbz	r3, 800e71e <__sflush_r+0x46>
 800e71a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e71c:	1ac0      	subs	r0, r0, r3
 800e71e:	2300      	movs	r3, #0
 800e720:	4602      	mov	r2, r0
 800e722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e724:	6a21      	ldr	r1, [r4, #32]
 800e726:	4628      	mov	r0, r5
 800e728:	47b0      	blx	r6
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	89a3      	ldrh	r3, [r4, #12]
 800e72e:	d106      	bne.n	800e73e <__sflush_r+0x66>
 800e730:	6829      	ldr	r1, [r5, #0]
 800e732:	291d      	cmp	r1, #29
 800e734:	d82c      	bhi.n	800e790 <__sflush_r+0xb8>
 800e736:	4a2a      	ldr	r2, [pc, #168]	; (800e7e0 <__sflush_r+0x108>)
 800e738:	40ca      	lsrs	r2, r1
 800e73a:	07d6      	lsls	r6, r2, #31
 800e73c:	d528      	bpl.n	800e790 <__sflush_r+0xb8>
 800e73e:	2200      	movs	r2, #0
 800e740:	6062      	str	r2, [r4, #4]
 800e742:	04d9      	lsls	r1, r3, #19
 800e744:	6922      	ldr	r2, [r4, #16]
 800e746:	6022      	str	r2, [r4, #0]
 800e748:	d504      	bpl.n	800e754 <__sflush_r+0x7c>
 800e74a:	1c42      	adds	r2, r0, #1
 800e74c:	d101      	bne.n	800e752 <__sflush_r+0x7a>
 800e74e:	682b      	ldr	r3, [r5, #0]
 800e750:	b903      	cbnz	r3, 800e754 <__sflush_r+0x7c>
 800e752:	6560      	str	r0, [r4, #84]	; 0x54
 800e754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e756:	602f      	str	r7, [r5, #0]
 800e758:	2900      	cmp	r1, #0
 800e75a:	d0ca      	beq.n	800e6f2 <__sflush_r+0x1a>
 800e75c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e760:	4299      	cmp	r1, r3
 800e762:	d002      	beq.n	800e76a <__sflush_r+0x92>
 800e764:	4628      	mov	r0, r5
 800e766:	f7ff fb39 	bl	800dddc <_free_r>
 800e76a:	2000      	movs	r0, #0
 800e76c:	6360      	str	r0, [r4, #52]	; 0x34
 800e76e:	e7c1      	b.n	800e6f4 <__sflush_r+0x1c>
 800e770:	6a21      	ldr	r1, [r4, #32]
 800e772:	2301      	movs	r3, #1
 800e774:	4628      	mov	r0, r5
 800e776:	47b0      	blx	r6
 800e778:	1c41      	adds	r1, r0, #1
 800e77a:	d1c7      	bne.n	800e70c <__sflush_r+0x34>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d0c4      	beq.n	800e70c <__sflush_r+0x34>
 800e782:	2b1d      	cmp	r3, #29
 800e784:	d001      	beq.n	800e78a <__sflush_r+0xb2>
 800e786:	2b16      	cmp	r3, #22
 800e788:	d101      	bne.n	800e78e <__sflush_r+0xb6>
 800e78a:	602f      	str	r7, [r5, #0]
 800e78c:	e7b1      	b.n	800e6f2 <__sflush_r+0x1a>
 800e78e:	89a3      	ldrh	r3, [r4, #12]
 800e790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e794:	81a3      	strh	r3, [r4, #12]
 800e796:	e7ad      	b.n	800e6f4 <__sflush_r+0x1c>
 800e798:	690f      	ldr	r7, [r1, #16]
 800e79a:	2f00      	cmp	r7, #0
 800e79c:	d0a9      	beq.n	800e6f2 <__sflush_r+0x1a>
 800e79e:	0793      	lsls	r3, r2, #30
 800e7a0:	680e      	ldr	r6, [r1, #0]
 800e7a2:	bf08      	it	eq
 800e7a4:	694b      	ldreq	r3, [r1, #20]
 800e7a6:	600f      	str	r7, [r1, #0]
 800e7a8:	bf18      	it	ne
 800e7aa:	2300      	movne	r3, #0
 800e7ac:	eba6 0807 	sub.w	r8, r6, r7
 800e7b0:	608b      	str	r3, [r1, #8]
 800e7b2:	f1b8 0f00 	cmp.w	r8, #0
 800e7b6:	dd9c      	ble.n	800e6f2 <__sflush_r+0x1a>
 800e7b8:	6a21      	ldr	r1, [r4, #32]
 800e7ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e7bc:	4643      	mov	r3, r8
 800e7be:	463a      	mov	r2, r7
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	47b0      	blx	r6
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	dc06      	bgt.n	800e7d6 <__sflush_r+0xfe>
 800e7c8:	89a3      	ldrh	r3, [r4, #12]
 800e7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ce:	81a3      	strh	r3, [r4, #12]
 800e7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d4:	e78e      	b.n	800e6f4 <__sflush_r+0x1c>
 800e7d6:	4407      	add	r7, r0
 800e7d8:	eba8 0800 	sub.w	r8, r8, r0
 800e7dc:	e7e9      	b.n	800e7b2 <__sflush_r+0xda>
 800e7de:	bf00      	nop
 800e7e0:	20400001 	.word	0x20400001

0800e7e4 <_fflush_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	690b      	ldr	r3, [r1, #16]
 800e7e8:	4605      	mov	r5, r0
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	b913      	cbnz	r3, 800e7f4 <_fflush_r+0x10>
 800e7ee:	2500      	movs	r5, #0
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	bd38      	pop	{r3, r4, r5, pc}
 800e7f4:	b118      	cbz	r0, 800e7fe <_fflush_r+0x1a>
 800e7f6:	6983      	ldr	r3, [r0, #24]
 800e7f8:	b90b      	cbnz	r3, 800e7fe <_fflush_r+0x1a>
 800e7fa:	f000 f887 	bl	800e90c <__sinit>
 800e7fe:	4b14      	ldr	r3, [pc, #80]	; (800e850 <_fflush_r+0x6c>)
 800e800:	429c      	cmp	r4, r3
 800e802:	d11b      	bne.n	800e83c <_fflush_r+0x58>
 800e804:	686c      	ldr	r4, [r5, #4]
 800e806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d0ef      	beq.n	800e7ee <_fflush_r+0xa>
 800e80e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e810:	07d0      	lsls	r0, r2, #31
 800e812:	d404      	bmi.n	800e81e <_fflush_r+0x3a>
 800e814:	0599      	lsls	r1, r3, #22
 800e816:	d402      	bmi.n	800e81e <_fflush_r+0x3a>
 800e818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e81a:	f000 f915 	bl	800ea48 <__retarget_lock_acquire_recursive>
 800e81e:	4628      	mov	r0, r5
 800e820:	4621      	mov	r1, r4
 800e822:	f7ff ff59 	bl	800e6d8 <__sflush_r>
 800e826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e828:	07da      	lsls	r2, r3, #31
 800e82a:	4605      	mov	r5, r0
 800e82c:	d4e0      	bmi.n	800e7f0 <_fflush_r+0xc>
 800e82e:	89a3      	ldrh	r3, [r4, #12]
 800e830:	059b      	lsls	r3, r3, #22
 800e832:	d4dd      	bmi.n	800e7f0 <_fflush_r+0xc>
 800e834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e836:	f000 f908 	bl	800ea4a <__retarget_lock_release_recursive>
 800e83a:	e7d9      	b.n	800e7f0 <_fflush_r+0xc>
 800e83c:	4b05      	ldr	r3, [pc, #20]	; (800e854 <_fflush_r+0x70>)
 800e83e:	429c      	cmp	r4, r3
 800e840:	d101      	bne.n	800e846 <_fflush_r+0x62>
 800e842:	68ac      	ldr	r4, [r5, #8]
 800e844:	e7df      	b.n	800e806 <_fflush_r+0x22>
 800e846:	4b04      	ldr	r3, [pc, #16]	; (800e858 <_fflush_r+0x74>)
 800e848:	429c      	cmp	r4, r3
 800e84a:	bf08      	it	eq
 800e84c:	68ec      	ldreq	r4, [r5, #12]
 800e84e:	e7da      	b.n	800e806 <_fflush_r+0x22>
 800e850:	0800f5e0 	.word	0x0800f5e0
 800e854:	0800f600 	.word	0x0800f600
 800e858:	0800f5c0 	.word	0x0800f5c0

0800e85c <std>:
 800e85c:	2300      	movs	r3, #0
 800e85e:	b510      	push	{r4, lr}
 800e860:	4604      	mov	r4, r0
 800e862:	e9c0 3300 	strd	r3, r3, [r0]
 800e866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e86a:	6083      	str	r3, [r0, #8]
 800e86c:	8181      	strh	r1, [r0, #12]
 800e86e:	6643      	str	r3, [r0, #100]	; 0x64
 800e870:	81c2      	strh	r2, [r0, #14]
 800e872:	6183      	str	r3, [r0, #24]
 800e874:	4619      	mov	r1, r3
 800e876:	2208      	movs	r2, #8
 800e878:	305c      	adds	r0, #92	; 0x5c
 800e87a:	f7fb fd9f 	bl	800a3bc <memset>
 800e87e:	4b05      	ldr	r3, [pc, #20]	; (800e894 <std+0x38>)
 800e880:	6263      	str	r3, [r4, #36]	; 0x24
 800e882:	4b05      	ldr	r3, [pc, #20]	; (800e898 <std+0x3c>)
 800e884:	62a3      	str	r3, [r4, #40]	; 0x28
 800e886:	4b05      	ldr	r3, [pc, #20]	; (800e89c <std+0x40>)
 800e888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e88a:	4b05      	ldr	r3, [pc, #20]	; (800e8a0 <std+0x44>)
 800e88c:	6224      	str	r4, [r4, #32]
 800e88e:	6323      	str	r3, [r4, #48]	; 0x30
 800e890:	bd10      	pop	{r4, pc}
 800e892:	bf00      	nop
 800e894:	0800eb71 	.word	0x0800eb71
 800e898:	0800eb93 	.word	0x0800eb93
 800e89c:	0800ebcb 	.word	0x0800ebcb
 800e8a0:	0800ebef 	.word	0x0800ebef

0800e8a4 <_cleanup_r>:
 800e8a4:	4901      	ldr	r1, [pc, #4]	; (800e8ac <_cleanup_r+0x8>)
 800e8a6:	f000 b8af 	b.w	800ea08 <_fwalk_reent>
 800e8aa:	bf00      	nop
 800e8ac:	0800e7e5 	.word	0x0800e7e5

0800e8b0 <__sfmoreglue>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	1e4a      	subs	r2, r1, #1
 800e8b4:	2568      	movs	r5, #104	; 0x68
 800e8b6:	4355      	muls	r5, r2
 800e8b8:	460e      	mov	r6, r1
 800e8ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8be:	f7ff fadd 	bl	800de7c <_malloc_r>
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	b140      	cbz	r0, 800e8d8 <__sfmoreglue+0x28>
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	e9c0 1600 	strd	r1, r6, [r0]
 800e8cc:	300c      	adds	r0, #12
 800e8ce:	60a0      	str	r0, [r4, #8]
 800e8d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8d4:	f7fb fd72 	bl	800a3bc <memset>
 800e8d8:	4620      	mov	r0, r4
 800e8da:	bd70      	pop	{r4, r5, r6, pc}

0800e8dc <__sfp_lock_acquire>:
 800e8dc:	4801      	ldr	r0, [pc, #4]	; (800e8e4 <__sfp_lock_acquire+0x8>)
 800e8de:	f000 b8b3 	b.w	800ea48 <__retarget_lock_acquire_recursive>
 800e8e2:	bf00      	nop
 800e8e4:	200010cc 	.word	0x200010cc

0800e8e8 <__sfp_lock_release>:
 800e8e8:	4801      	ldr	r0, [pc, #4]	; (800e8f0 <__sfp_lock_release+0x8>)
 800e8ea:	f000 b8ae 	b.w	800ea4a <__retarget_lock_release_recursive>
 800e8ee:	bf00      	nop
 800e8f0:	200010cc 	.word	0x200010cc

0800e8f4 <__sinit_lock_acquire>:
 800e8f4:	4801      	ldr	r0, [pc, #4]	; (800e8fc <__sinit_lock_acquire+0x8>)
 800e8f6:	f000 b8a7 	b.w	800ea48 <__retarget_lock_acquire_recursive>
 800e8fa:	bf00      	nop
 800e8fc:	200010c7 	.word	0x200010c7

0800e900 <__sinit_lock_release>:
 800e900:	4801      	ldr	r0, [pc, #4]	; (800e908 <__sinit_lock_release+0x8>)
 800e902:	f000 b8a2 	b.w	800ea4a <__retarget_lock_release_recursive>
 800e906:	bf00      	nop
 800e908:	200010c7 	.word	0x200010c7

0800e90c <__sinit>:
 800e90c:	b510      	push	{r4, lr}
 800e90e:	4604      	mov	r4, r0
 800e910:	f7ff fff0 	bl	800e8f4 <__sinit_lock_acquire>
 800e914:	69a3      	ldr	r3, [r4, #24]
 800e916:	b11b      	cbz	r3, 800e920 <__sinit+0x14>
 800e918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e91c:	f7ff bff0 	b.w	800e900 <__sinit_lock_release>
 800e920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e924:	6523      	str	r3, [r4, #80]	; 0x50
 800e926:	4b13      	ldr	r3, [pc, #76]	; (800e974 <__sinit+0x68>)
 800e928:	4a13      	ldr	r2, [pc, #76]	; (800e978 <__sinit+0x6c>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e92e:	42a3      	cmp	r3, r4
 800e930:	bf04      	itt	eq
 800e932:	2301      	moveq	r3, #1
 800e934:	61a3      	streq	r3, [r4, #24]
 800e936:	4620      	mov	r0, r4
 800e938:	f000 f820 	bl	800e97c <__sfp>
 800e93c:	6060      	str	r0, [r4, #4]
 800e93e:	4620      	mov	r0, r4
 800e940:	f000 f81c 	bl	800e97c <__sfp>
 800e944:	60a0      	str	r0, [r4, #8]
 800e946:	4620      	mov	r0, r4
 800e948:	f000 f818 	bl	800e97c <__sfp>
 800e94c:	2200      	movs	r2, #0
 800e94e:	60e0      	str	r0, [r4, #12]
 800e950:	2104      	movs	r1, #4
 800e952:	6860      	ldr	r0, [r4, #4]
 800e954:	f7ff ff82 	bl	800e85c <std>
 800e958:	68a0      	ldr	r0, [r4, #8]
 800e95a:	2201      	movs	r2, #1
 800e95c:	2109      	movs	r1, #9
 800e95e:	f7ff ff7d 	bl	800e85c <std>
 800e962:	68e0      	ldr	r0, [r4, #12]
 800e964:	2202      	movs	r2, #2
 800e966:	2112      	movs	r1, #18
 800e968:	f7ff ff78 	bl	800e85c <std>
 800e96c:	2301      	movs	r3, #1
 800e96e:	61a3      	str	r3, [r4, #24]
 800e970:	e7d2      	b.n	800e918 <__sinit+0xc>
 800e972:	bf00      	nop
 800e974:	0800f110 	.word	0x0800f110
 800e978:	0800e8a5 	.word	0x0800e8a5

0800e97c <__sfp>:
 800e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97e:	4607      	mov	r7, r0
 800e980:	f7ff ffac 	bl	800e8dc <__sfp_lock_acquire>
 800e984:	4b1e      	ldr	r3, [pc, #120]	; (800ea00 <__sfp+0x84>)
 800e986:	681e      	ldr	r6, [r3, #0]
 800e988:	69b3      	ldr	r3, [r6, #24]
 800e98a:	b913      	cbnz	r3, 800e992 <__sfp+0x16>
 800e98c:	4630      	mov	r0, r6
 800e98e:	f7ff ffbd 	bl	800e90c <__sinit>
 800e992:	3648      	adds	r6, #72	; 0x48
 800e994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e998:	3b01      	subs	r3, #1
 800e99a:	d503      	bpl.n	800e9a4 <__sfp+0x28>
 800e99c:	6833      	ldr	r3, [r6, #0]
 800e99e:	b30b      	cbz	r3, 800e9e4 <__sfp+0x68>
 800e9a0:	6836      	ldr	r6, [r6, #0]
 800e9a2:	e7f7      	b.n	800e994 <__sfp+0x18>
 800e9a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9a8:	b9d5      	cbnz	r5, 800e9e0 <__sfp+0x64>
 800e9aa:	4b16      	ldr	r3, [pc, #88]	; (800ea04 <__sfp+0x88>)
 800e9ac:	60e3      	str	r3, [r4, #12]
 800e9ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9b2:	6665      	str	r5, [r4, #100]	; 0x64
 800e9b4:	f000 f847 	bl	800ea46 <__retarget_lock_init_recursive>
 800e9b8:	f7ff ff96 	bl	800e8e8 <__sfp_lock_release>
 800e9bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e9c4:	6025      	str	r5, [r4, #0]
 800e9c6:	61a5      	str	r5, [r4, #24]
 800e9c8:	2208      	movs	r2, #8
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9d0:	f7fb fcf4 	bl	800a3bc <memset>
 800e9d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9dc:	4620      	mov	r0, r4
 800e9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e0:	3468      	adds	r4, #104	; 0x68
 800e9e2:	e7d9      	b.n	800e998 <__sfp+0x1c>
 800e9e4:	2104      	movs	r1, #4
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	f7ff ff62 	bl	800e8b0 <__sfmoreglue>
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	6030      	str	r0, [r6, #0]
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d1d5      	bne.n	800e9a0 <__sfp+0x24>
 800e9f4:	f7ff ff78 	bl	800e8e8 <__sfp_lock_release>
 800e9f8:	230c      	movs	r3, #12
 800e9fa:	603b      	str	r3, [r7, #0]
 800e9fc:	e7ee      	b.n	800e9dc <__sfp+0x60>
 800e9fe:	bf00      	nop
 800ea00:	0800f110 	.word	0x0800f110
 800ea04:	ffff0001 	.word	0xffff0001

0800ea08 <_fwalk_reent>:
 800ea08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea0c:	4606      	mov	r6, r0
 800ea0e:	4688      	mov	r8, r1
 800ea10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea14:	2700      	movs	r7, #0
 800ea16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ea1e:	d505      	bpl.n	800ea2c <_fwalk_reent+0x24>
 800ea20:	6824      	ldr	r4, [r4, #0]
 800ea22:	2c00      	cmp	r4, #0
 800ea24:	d1f7      	bne.n	800ea16 <_fwalk_reent+0xe>
 800ea26:	4638      	mov	r0, r7
 800ea28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea2c:	89ab      	ldrh	r3, [r5, #12]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d907      	bls.n	800ea42 <_fwalk_reent+0x3a>
 800ea32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea36:	3301      	adds	r3, #1
 800ea38:	d003      	beq.n	800ea42 <_fwalk_reent+0x3a>
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	47c0      	blx	r8
 800ea40:	4307      	orrs	r7, r0
 800ea42:	3568      	adds	r5, #104	; 0x68
 800ea44:	e7e9      	b.n	800ea1a <_fwalk_reent+0x12>

0800ea46 <__retarget_lock_init_recursive>:
 800ea46:	4770      	bx	lr

0800ea48 <__retarget_lock_acquire_recursive>:
 800ea48:	4770      	bx	lr

0800ea4a <__retarget_lock_release_recursive>:
 800ea4a:	4770      	bx	lr

0800ea4c <__swhatbuf_r>:
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	460e      	mov	r6, r1
 800ea50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea54:	2900      	cmp	r1, #0
 800ea56:	b096      	sub	sp, #88	; 0x58
 800ea58:	4614      	mov	r4, r2
 800ea5a:	461d      	mov	r5, r3
 800ea5c:	da07      	bge.n	800ea6e <__swhatbuf_r+0x22>
 800ea5e:	2300      	movs	r3, #0
 800ea60:	602b      	str	r3, [r5, #0]
 800ea62:	89b3      	ldrh	r3, [r6, #12]
 800ea64:	061a      	lsls	r2, r3, #24
 800ea66:	d410      	bmi.n	800ea8a <__swhatbuf_r+0x3e>
 800ea68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea6c:	e00e      	b.n	800ea8c <__swhatbuf_r+0x40>
 800ea6e:	466a      	mov	r2, sp
 800ea70:	f000 f8e4 	bl	800ec3c <_fstat_r>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	dbf2      	blt.n	800ea5e <__swhatbuf_r+0x12>
 800ea78:	9a01      	ldr	r2, [sp, #4]
 800ea7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea82:	425a      	negs	r2, r3
 800ea84:	415a      	adcs	r2, r3
 800ea86:	602a      	str	r2, [r5, #0]
 800ea88:	e7ee      	b.n	800ea68 <__swhatbuf_r+0x1c>
 800ea8a:	2340      	movs	r3, #64	; 0x40
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	6023      	str	r3, [r4, #0]
 800ea90:	b016      	add	sp, #88	; 0x58
 800ea92:	bd70      	pop	{r4, r5, r6, pc}

0800ea94 <__smakebuf_r>:
 800ea94:	898b      	ldrh	r3, [r1, #12]
 800ea96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea98:	079d      	lsls	r5, r3, #30
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	460c      	mov	r4, r1
 800ea9e:	d507      	bpl.n	800eab0 <__smakebuf_r+0x1c>
 800eaa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	6123      	str	r3, [r4, #16]
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	6163      	str	r3, [r4, #20]
 800eaac:	b002      	add	sp, #8
 800eaae:	bd70      	pop	{r4, r5, r6, pc}
 800eab0:	ab01      	add	r3, sp, #4
 800eab2:	466a      	mov	r2, sp
 800eab4:	f7ff ffca 	bl	800ea4c <__swhatbuf_r>
 800eab8:	9900      	ldr	r1, [sp, #0]
 800eaba:	4605      	mov	r5, r0
 800eabc:	4630      	mov	r0, r6
 800eabe:	f7ff f9dd 	bl	800de7c <_malloc_r>
 800eac2:	b948      	cbnz	r0, 800ead8 <__smakebuf_r+0x44>
 800eac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eac8:	059a      	lsls	r2, r3, #22
 800eaca:	d4ef      	bmi.n	800eaac <__smakebuf_r+0x18>
 800eacc:	f023 0303 	bic.w	r3, r3, #3
 800ead0:	f043 0302 	orr.w	r3, r3, #2
 800ead4:	81a3      	strh	r3, [r4, #12]
 800ead6:	e7e3      	b.n	800eaa0 <__smakebuf_r+0xc>
 800ead8:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <__smakebuf_r+0x7c>)
 800eada:	62b3      	str	r3, [r6, #40]	; 0x28
 800eadc:	89a3      	ldrh	r3, [r4, #12]
 800eade:	6020      	str	r0, [r4, #0]
 800eae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eae4:	81a3      	strh	r3, [r4, #12]
 800eae6:	9b00      	ldr	r3, [sp, #0]
 800eae8:	6163      	str	r3, [r4, #20]
 800eaea:	9b01      	ldr	r3, [sp, #4]
 800eaec:	6120      	str	r0, [r4, #16]
 800eaee:	b15b      	cbz	r3, 800eb08 <__smakebuf_r+0x74>
 800eaf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f000 f8b3 	bl	800ec60 <_isatty_r>
 800eafa:	b128      	cbz	r0, 800eb08 <__smakebuf_r+0x74>
 800eafc:	89a3      	ldrh	r3, [r4, #12]
 800eafe:	f023 0303 	bic.w	r3, r3, #3
 800eb02:	f043 0301 	orr.w	r3, r3, #1
 800eb06:	81a3      	strh	r3, [r4, #12]
 800eb08:	89a0      	ldrh	r0, [r4, #12]
 800eb0a:	4305      	orrs	r5, r0
 800eb0c:	81a5      	strh	r5, [r4, #12]
 800eb0e:	e7cd      	b.n	800eaac <__smakebuf_r+0x18>
 800eb10:	0800e8a5 	.word	0x0800e8a5

0800eb14 <memmove>:
 800eb14:	4288      	cmp	r0, r1
 800eb16:	b510      	push	{r4, lr}
 800eb18:	eb01 0402 	add.w	r4, r1, r2
 800eb1c:	d902      	bls.n	800eb24 <memmove+0x10>
 800eb1e:	4284      	cmp	r4, r0
 800eb20:	4623      	mov	r3, r4
 800eb22:	d807      	bhi.n	800eb34 <memmove+0x20>
 800eb24:	1e43      	subs	r3, r0, #1
 800eb26:	42a1      	cmp	r1, r4
 800eb28:	d008      	beq.n	800eb3c <memmove+0x28>
 800eb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb32:	e7f8      	b.n	800eb26 <memmove+0x12>
 800eb34:	4402      	add	r2, r0
 800eb36:	4601      	mov	r1, r0
 800eb38:	428a      	cmp	r2, r1
 800eb3a:	d100      	bne.n	800eb3e <memmove+0x2a>
 800eb3c:	bd10      	pop	{r4, pc}
 800eb3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb46:	e7f7      	b.n	800eb38 <memmove+0x24>

0800eb48 <__malloc_lock>:
 800eb48:	4801      	ldr	r0, [pc, #4]	; (800eb50 <__malloc_lock+0x8>)
 800eb4a:	f7ff bf7d 	b.w	800ea48 <__retarget_lock_acquire_recursive>
 800eb4e:	bf00      	nop
 800eb50:	200010c8 	.word	0x200010c8

0800eb54 <__malloc_unlock>:
 800eb54:	4801      	ldr	r0, [pc, #4]	; (800eb5c <__malloc_unlock+0x8>)
 800eb56:	f7ff bf78 	b.w	800ea4a <__retarget_lock_release_recursive>
 800eb5a:	bf00      	nop
 800eb5c:	200010c8 	.word	0x200010c8

0800eb60 <_malloc_usable_size_r>:
 800eb60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb64:	1f18      	subs	r0, r3, #4
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	bfbc      	itt	lt
 800eb6a:	580b      	ldrlt	r3, [r1, r0]
 800eb6c:	18c0      	addlt	r0, r0, r3
 800eb6e:	4770      	bx	lr

0800eb70 <__sread>:
 800eb70:	b510      	push	{r4, lr}
 800eb72:	460c      	mov	r4, r1
 800eb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb78:	f000 f894 	bl	800eca4 <_read_r>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	bfab      	itete	ge
 800eb80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb82:	89a3      	ldrhlt	r3, [r4, #12]
 800eb84:	181b      	addge	r3, r3, r0
 800eb86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb8a:	bfac      	ite	ge
 800eb8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb8e:	81a3      	strhlt	r3, [r4, #12]
 800eb90:	bd10      	pop	{r4, pc}

0800eb92 <__swrite>:
 800eb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb96:	461f      	mov	r7, r3
 800eb98:	898b      	ldrh	r3, [r1, #12]
 800eb9a:	05db      	lsls	r3, r3, #23
 800eb9c:	4605      	mov	r5, r0
 800eb9e:	460c      	mov	r4, r1
 800eba0:	4616      	mov	r6, r2
 800eba2:	d505      	bpl.n	800ebb0 <__swrite+0x1e>
 800eba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba8:	2302      	movs	r3, #2
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f000 f868 	bl	800ec80 <_lseek_r>
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	4632      	mov	r2, r6
 800ebbe:	463b      	mov	r3, r7
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc6:	f000 b817 	b.w	800ebf8 <_write_r>

0800ebca <__sseek>:
 800ebca:	b510      	push	{r4, lr}
 800ebcc:	460c      	mov	r4, r1
 800ebce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd2:	f000 f855 	bl	800ec80 <_lseek_r>
 800ebd6:	1c43      	adds	r3, r0, #1
 800ebd8:	89a3      	ldrh	r3, [r4, #12]
 800ebda:	bf15      	itete	ne
 800ebdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebe6:	81a3      	strheq	r3, [r4, #12]
 800ebe8:	bf18      	it	ne
 800ebea:	81a3      	strhne	r3, [r4, #12]
 800ebec:	bd10      	pop	{r4, pc}

0800ebee <__sclose>:
 800ebee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf2:	f000 b813 	b.w	800ec1c <_close_r>
	...

0800ebf8 <_write_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	4d07      	ldr	r5, [pc, #28]	; (800ec18 <_write_r+0x20>)
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	4608      	mov	r0, r1
 800ec00:	4611      	mov	r1, r2
 800ec02:	2200      	movs	r2, #0
 800ec04:	602a      	str	r2, [r5, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	f7f7 fc71 	bl	80064ee <_write>
 800ec0c:	1c43      	adds	r3, r0, #1
 800ec0e:	d102      	bne.n	800ec16 <_write_r+0x1e>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	b103      	cbz	r3, 800ec16 <_write_r+0x1e>
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	200010c0 	.word	0x200010c0

0800ec1c <_close_r>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4d06      	ldr	r5, [pc, #24]	; (800ec38 <_close_r+0x1c>)
 800ec20:	2300      	movs	r3, #0
 800ec22:	4604      	mov	r4, r0
 800ec24:	4608      	mov	r0, r1
 800ec26:	602b      	str	r3, [r5, #0]
 800ec28:	f7f7 fc7d 	bl	8006526 <_close>
 800ec2c:	1c43      	adds	r3, r0, #1
 800ec2e:	d102      	bne.n	800ec36 <_close_r+0x1a>
 800ec30:	682b      	ldr	r3, [r5, #0]
 800ec32:	b103      	cbz	r3, 800ec36 <_close_r+0x1a>
 800ec34:	6023      	str	r3, [r4, #0]
 800ec36:	bd38      	pop	{r3, r4, r5, pc}
 800ec38:	200010c0 	.word	0x200010c0

0800ec3c <_fstat_r>:
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	4d07      	ldr	r5, [pc, #28]	; (800ec5c <_fstat_r+0x20>)
 800ec40:	2300      	movs	r3, #0
 800ec42:	4604      	mov	r4, r0
 800ec44:	4608      	mov	r0, r1
 800ec46:	4611      	mov	r1, r2
 800ec48:	602b      	str	r3, [r5, #0]
 800ec4a:	f7f7 fc78 	bl	800653e <_fstat>
 800ec4e:	1c43      	adds	r3, r0, #1
 800ec50:	d102      	bne.n	800ec58 <_fstat_r+0x1c>
 800ec52:	682b      	ldr	r3, [r5, #0]
 800ec54:	b103      	cbz	r3, 800ec58 <_fstat_r+0x1c>
 800ec56:	6023      	str	r3, [r4, #0]
 800ec58:	bd38      	pop	{r3, r4, r5, pc}
 800ec5a:	bf00      	nop
 800ec5c:	200010c0 	.word	0x200010c0

0800ec60 <_isatty_r>:
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	4d06      	ldr	r5, [pc, #24]	; (800ec7c <_isatty_r+0x1c>)
 800ec64:	2300      	movs	r3, #0
 800ec66:	4604      	mov	r4, r0
 800ec68:	4608      	mov	r0, r1
 800ec6a:	602b      	str	r3, [r5, #0]
 800ec6c:	f7f7 fc77 	bl	800655e <_isatty>
 800ec70:	1c43      	adds	r3, r0, #1
 800ec72:	d102      	bne.n	800ec7a <_isatty_r+0x1a>
 800ec74:	682b      	ldr	r3, [r5, #0]
 800ec76:	b103      	cbz	r3, 800ec7a <_isatty_r+0x1a>
 800ec78:	6023      	str	r3, [r4, #0]
 800ec7a:	bd38      	pop	{r3, r4, r5, pc}
 800ec7c:	200010c0 	.word	0x200010c0

0800ec80 <_lseek_r>:
 800ec80:	b538      	push	{r3, r4, r5, lr}
 800ec82:	4d07      	ldr	r5, [pc, #28]	; (800eca0 <_lseek_r+0x20>)
 800ec84:	4604      	mov	r4, r0
 800ec86:	4608      	mov	r0, r1
 800ec88:	4611      	mov	r1, r2
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	602a      	str	r2, [r5, #0]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	f7f7 fc70 	bl	8006574 <_lseek>
 800ec94:	1c43      	adds	r3, r0, #1
 800ec96:	d102      	bne.n	800ec9e <_lseek_r+0x1e>
 800ec98:	682b      	ldr	r3, [r5, #0]
 800ec9a:	b103      	cbz	r3, 800ec9e <_lseek_r+0x1e>
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	bd38      	pop	{r3, r4, r5, pc}
 800eca0:	200010c0 	.word	0x200010c0

0800eca4 <_read_r>:
 800eca4:	b538      	push	{r3, r4, r5, lr}
 800eca6:	4d07      	ldr	r5, [pc, #28]	; (800ecc4 <_read_r+0x20>)
 800eca8:	4604      	mov	r4, r0
 800ecaa:	4608      	mov	r0, r1
 800ecac:	4611      	mov	r1, r2
 800ecae:	2200      	movs	r2, #0
 800ecb0:	602a      	str	r2, [r5, #0]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	f7f7 fbfe 	bl	80064b4 <_read>
 800ecb8:	1c43      	adds	r3, r0, #1
 800ecba:	d102      	bne.n	800ecc2 <_read_r+0x1e>
 800ecbc:	682b      	ldr	r3, [r5, #0]
 800ecbe:	b103      	cbz	r3, 800ecc2 <_read_r+0x1e>
 800ecc0:	6023      	str	r3, [r4, #0]
 800ecc2:	bd38      	pop	{r3, r4, r5, pc}
 800ecc4:	200010c0 	.word	0x200010c0

0800ecc8 <_init>:
 800ecc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecca:	bf00      	nop
 800eccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecce:	bc08      	pop	{r3}
 800ecd0:	469e      	mov	lr, r3
 800ecd2:	4770      	bx	lr

0800ecd4 <_fini>:
 800ecd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecd6:	bf00      	nop
 800ecd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecda:	bc08      	pop	{r3}
 800ecdc:	469e      	mov	lr, r3
 800ecde:	4770      	bx	lr
